{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/flex/1.jpg","path":"img/flex/1.jpg","modified":0,"renderable":0},{"_id":"source/img/flex/3.jpg","path":"img/flex/3.jpg","modified":0,"renderable":0},{"_id":"source/img/flex/2.jpg","path":"img/flex/2.jpg","modified":0,"renderable":0},{"_id":"source/img/flex/4.jpg","path":"img/flex/4.jpg","modified":0,"renderable":0},{"_id":"source/img/flex/5.jpg","path":"img/flex/5.jpg","modified":0,"renderable":0},{"_id":"source/img/flex/6.jpg","path":"img/flex/6.jpg","modified":0,"renderable":0},{"_id":"source/img/flex/7.jpg","path":"img/flex/7.jpg","modified":0,"renderable":0},{"_id":"source/img/flex/8.jpg","path":"img/flex/8.jpg","modified":0,"renderable":0},{"_id":"source/img/flex/9.jpg","path":"img/flex/9.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/zhudi.jpg","path":"uploads/zhudi.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/img/3.jpg","path":"img/3.jpg","modified":0,"renderable":0},{"_id":"source/img/4.jpg","path":"img/4.jpg","modified":0,"renderable":0},{"_id":"source/img/2.jpg","path":"img/2.jpg","modified":0,"renderable":0},{"_id":"source/img/1.jpg","path":"img/1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"526ec2e5b043b2bccf894db6e7ec7e8d1b5f07a9","modified":1465872379512},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1465872381253},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1465872381254},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1465872381259},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1465872381260},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1465872381260},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1465872381261},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1465872381262},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1465872381264},{"_id":"themes/next/_config.yml","hash":"08a93f6646e4a8a554bf511423116f8829597ae4","modified":1465872381265},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1465872381266},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1465872381267},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1465872381328},{"_id":"source/_drafts/css3动画.md","hash":"ed6bb41c21f079fece6fc7c134f79bf5194a8ef6","modified":1465872379513},{"_id":"source/_drafts/css3变形.md","hash":"6be1f0a49b5262c6f486a9638d589ec152b54a10","modified":1465872379513},{"_id":"source/_drafts/决策树算法学习.md","hash":"772cd5743186208da62b962dfa8e46da61b1a634","modified":1465872379514},{"_id":"source/_posts/BFC.md","hash":"c07e1fc90c9a6f6c64710d04b0bcc00a4a711df5","modified":1465872379515},{"_id":"source/_posts/CSS3多列布局.md","hash":"e32bfe2bcc0a5f2e943cfaba9d6f9796808b0135","modified":1465872379515},{"_id":"source/_posts/bt.md","hash":"a005a1898ad99d55162be7e48ac154f629e31520","modified":1465873858631},{"_id":"source/_posts/css3选择器整理.md","hash":"d84c86a820b7f8180e0463bca4c5b1d3c26b926e","modified":1465872379516},{"_id":"source/_posts/flex.md","hash":"e0c78880bfd9ca440d9468f27c3a6d9bc53d05f7","modified":1465872379516},{"_id":"source/_posts/gitignore配置.md","hash":"25ff5e19c30924e24446af33cd534380ecbfa92a","modified":1465872379518},{"_id":"source/_posts/heapSort.md","hash":"6dcc67ac248906c78fb8a42211bf34494e18c0fc","modified":1465872379518},{"_id":"source/_posts/html标签.md","hash":"a741fa9edf56a86ed6d0bb3c7dcb4341a6921737","modified":1465872379525},{"_id":"source/_posts/mergeSort.md","hash":"3be15866c1872421e5a32045d4ee948a5502a2ed","modified":1465872379526},{"_id":"source/_posts/pushstate.md","hash":"c1e2fcd8867988155dacaa0e4744db0c4a4d31e9","modified":1465872379527},{"_id":"source/_posts/svm.md","hash":"1589dde54427a27d86c9c089b9087091c82d73a7","modified":1465872379527},{"_id":"source/_posts/transition.md","hash":"6b4920fad70aaf1735c10e5c52b4ec96a8184211","modified":1465872379528},{"_id":"source/_posts/关门山.md","hash":"55e361f0c8b202e5ba0edf23f80ae14d4d9a10dd","modified":1465872379529},{"_id":"source/_posts/思考.md","hash":"ee78e1194f7e3cadc54b1b8015e8674b185566c1","modified":1465872379530},{"_id":"source/_posts/数据库.md","hash":"79ab41af1e1fec19dbebd81b7960be202507cc47","modified":1465872379530},{"_id":"source/_posts/部署到git上面时报错.md","hash":"09d6852e9e1cb829700ba1f9dfbd0447ca0940ff","modified":1465872379531},{"_id":"source/categories/index.md","hash":"757902a3e899c80e32a2a52bf99865bd17a244b9","modified":1465872379532},{"_id":"source/_posts/配置Hexo.md","hash":"860f82838449053c0ef56531c27a82f4a395b348","modified":1465872379532},{"_id":"source/tags/index.md","hash":"81e6ae9778247b8fb8c96b20c0fc4ff09b270110","modified":1465872380730},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1465872381256},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1465872381257},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1465872381268},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1465872381269},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1465872381269},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1465872381270},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1465872381271},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1465872381271},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1465872381272},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1465872381273},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1465872381274},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1465872381274},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1465872381275},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1465872381276},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1465872381325},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1465872381326},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1465872381326},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1465872381327},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1465872381327},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1465872381328},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1465872381330},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1465872381822},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1465872381823},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1465872381824},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465872381400},{"_id":"source/img/flex/1.jpg","hash":"e29ffb5f65f40b3eddf545582c0e86631bbb0fce","modified":1465872380718},{"_id":"source/img/flex/3.jpg","hash":"00520c0855634ca4a12f66a4949d0916a0a84ef8","modified":1465872380720},{"_id":"source/img/flex/2.jpg","hash":"3846a7211365e4007b1ae30ca18f940513569ccb","modified":1465872380719},{"_id":"source/img/flex/4.jpg","hash":"8ec29b5f3380801ab3c76ccebc579e2bcbf5bec7","modified":1465872380722},{"_id":"source/img/flex/5.jpg","hash":"09390cdaaa31e944970f3c8757f4bdfe203649ce","modified":1465872380723},{"_id":"source/img/flex/6.jpg","hash":"57168956bfe6f9ddeba2428d7b6ac3dcbaf1c7cc","modified":1465872380724},{"_id":"source/img/flex/7.jpg","hash":"eaeeb9c69a9d0c79e3c41370e6fc057517799962","modified":1465872380726},{"_id":"source/img/flex/8.jpg","hash":"f83a7c1d4f6696cb40830da32493261e844591a1","modified":1465872380727},{"_id":"source/img/flex/9.jpg","hash":"02afb6cd53c1ceb2dcd715de3f8a2e318f7cb49c","modified":1465872380729},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1465872381277},{"_id":"themes/next/layout/_macro/post.swig","hash":"74e316a693166969af1de1eb23cd8077dc922963","modified":1465872381277},{"_id":"themes/next/layout/_macro/reward.swig","hash":"05cad11b3efcb8b7e74677bd7c13ad53d268476a","modified":1465872381278},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"8cd78f0f934318524393fcb26dbdff9be4df70b9","modified":1465872381279},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1465872381279},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1465872381280},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1465872381281},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1465872381300},{"_id":"themes/next/layout/_partials/head.swig","hash":"d5eadfe13cd28aa4626a1b17e18deaafe0a0452e","modified":1465872381300},{"_id":"themes/next/layout/_partials/header.swig","hash":"b3f4f07f03bedd615039934b44d552b91e2a4a1d","modified":1465872381302},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1465872381303},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1465872381304},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1465872381309},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1465872381310},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1465872381310},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1465872381324},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1465872381330},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1465872381331},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1465872381332},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1465872381399},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1465872381401},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1465872381401},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1465872381402},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1465872381403},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1465872381404},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1465872381405},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1465872381406},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465872381406},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465872381406},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1465872381407},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1465872381408},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1465872381409},{"_id":"themes/next/source/uploads/zhudi.jpg","hash":"b4d438b5b8d6b69d2fc8458bbac13b2563680b0e","modified":1465872381461},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465872381312},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465872381313},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465872381375},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465872381376},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465872381378},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465872381395},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465872381397},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b83439cfca7b2c81846cd35596e27381ea4045e9","modified":1465872381302},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1465872381305},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1465872381305},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1465872381306},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1465872381307},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1465872381307},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1465872381308},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1465872381308},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1465872381312},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1465872381315},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1465872381319},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"aebc73513c9cbbbbda2935e2eb18e09bb1c24bf8","modified":1465872381321},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1465872381322},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1465872381323},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1465872381323},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1465872381313},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1465872381375},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1465872381377},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1465872381378},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1465872381394},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"6da593f19a9c8e76b43bc05172923d82b2aefa03","modified":1465872381396},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ea6e519065702dfdb1dc299f85411b9ee2bcf4ce","modified":1465872381397},{"_id":"themes/next/source/css/_variables/default.styl","hash":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1465872381398},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1465872381410},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1465872381411},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1465872381411},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1465872381412},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1465872381413},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1465872381415},{"_id":"themes/next/source/js/src/utils.js","hash":"14521498ba62a9a4050b86fb1eae0babd5b88c8a","modified":1465872381415},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1465872381474},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1465872381474},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1465872381475},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1465872381476},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1465872381480},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1465872381479},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1465872381481},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1465872381481},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1465872381482},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1465872381641},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1465872381651},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1465872381652},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1465872381653},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1465872381769},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1465872381771},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1465872381772},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1465872381778},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1465872381779},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1465872381818},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1465872381819},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1465872381820},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1465872381644},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1465872381316},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1465872381315},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1465872381317},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1465872381317},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1465872381318},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1465872381318},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1465872381320},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1465872381320},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1465872381334},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1465872381334},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1465872381335},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1465872381336},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1465872381345},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1465872381360},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1465872381369},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"99487a9e1acb05eedbefa36eb6f4a606fe85f20c","modified":1465872381370},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"302fca2d38d0175f5b5c7c42bc80b5a87404a50d","modified":1465872381371},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1465872381372},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1465872381373},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1465872381374},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1465872381379},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1465872381380},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1465872381381},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1465872381381},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1465872381382},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1465872381383},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5187512cc4b2ce095230928c7046e0b26c3897bd","modified":1465872381384},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1465872381385},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1465872381386},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1465872381387},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1465872381388},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"f70fa81275eb4e0ea5e5a740b7a35539c6ffa9ba","modified":1465872381388},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1465872381389},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1465872381390},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1465872381391},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1465872381392},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1465872381392},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ecd6b77afaeeb5b8674e5a62f2ab204004082fab","modified":1465872381393},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1465872381393},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1465872381414},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465872381463},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465872381463},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465872381464},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465872381465},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465872381465},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465872381466},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1465872381471},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1465872381472},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1465872381473},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1465872381478},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1465872381477},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1465872381484},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1465872381484},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1465872381486},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1465872381639},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1465872381774},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1465872381776},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1465872381551},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1465872381517},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1465872381626},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1465872381784},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1465872381337},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4f7dfc2826a95a0d571976d9084b7e7175d99b0f","modified":1465872381341},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1465872381342},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1465872381338},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1465872381338},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1465872381339},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1465872381340},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1465872381340},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1465872381343},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1465872381343},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1465872381344},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1465872381345},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1465872381347},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1465872381347},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1465872381348},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1465872381349},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1465872381349},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1465872381350},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1465872381351},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1465872381351},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"758d64ad65f718537ab5bfe5592a626abc40987e","modified":1465872381352},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1465872381352},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ec23bb0dacd150588d871e177bb69ad4d35b2307","modified":1465872381353},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1465872381354},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"70407054dbb5180c69e50ea2655d32835494394e","modified":1465872381355},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1465872381356},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1465872381356},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1465872381357},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1465872381357},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1465872381358},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1465872381359},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"99c4b7d1459569cda394c733845d368008a180bf","modified":1465872381359},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1465872381361},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1465872381362},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1465872381363},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1465872381364},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1465872381364},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1465872381366},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1465872381365},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1465872381367},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1465872381367},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1465872381368},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1465872381385},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465872381467},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1465872381468},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1465872381469},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1465872381470},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1465872381470},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1465872381468},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1465872381564},{"_id":"source/img/3.jpg","hash":"6fedbd33722bfa225714020cac3a0dc959ecbe4b","modified":1465872380225},{"_id":"source/img/4.jpg","hash":"39a4de4757a664bc8037c1c0f06b07fb08471928","modified":1465872380716},{"_id":"source/img/2.jpg","hash":"ed51490bf3eb63a261de74886d43694623fff3b1","modified":1465872379859},{"_id":"source/img/1.jpg","hash":"1ee536df019f16546a28515c962ecc0c2e8604e0","modified":1465872379539},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1465872381561},{"_id":"public/categories/index.html","hash":"8a6606f2f62f95b00ebca4db9c592a609c447e26","modified":1465874600541},{"_id":"public/tags/index.html","hash":"f843d8e2ed2188f13244b106ae999954eb203e14","modified":1465874600541},{"_id":"public/2016/06/12/svm/index.html","hash":"4c1a4d8482b53cef4fa4c7d3505735fe82a1685d","modified":1465874600542},{"_id":"public/2016/05/27/mergeSort/index.html","hash":"84d3a184945afa71386f0f0f88dee8a876421bfe","modified":1465874600542},{"_id":"public/2016/05/26/heapSort/index.html","hash":"00c58578b479fa42969d7010e14764df55f0627d","modified":1465874600542},{"_id":"public/2016/04/27/部署到git上面时报错/index.html","hash":"e7b84e3ce35accb8309d5010cd5c417a3f60422c","modified":1465874600542},{"_id":"public/2016/04/27/gitignore配置/index.html","hash":"960a79a0d1a651cca4903ab80b64547765cee6be","modified":1465874600542},{"_id":"public/2016/04/26/配置Hexo/index.html","hash":"0f9c153cf2d874f7db71e60bcb7c80c3a21950d9","modified":1465874600543},{"_id":"public/2014/10/18/关门山/index.html","hash":"0f09b76becf305fa8a9f47d11ce148faebf49e37","modified":1465874600543},{"_id":"public/categories/学习笔记/index.html","hash":"cc72a14250184bef331d84f01e2cacc0de24c57c","modified":1465874600543},{"_id":"public/categories/学习笔记/page/2/index.html","hash":"376c8ad7795c9029a9a820a69e69993957a9dd83","modified":1465874600543},{"_id":"public/categories/学习笔记/前端学习/index.html","hash":"f1f56e2a2ed2e8372471f2cf858a81a10e6ad263","modified":1465874600543},{"_id":"public/categories/学习笔记/数据结构/index.html","hash":"f28a1ed66eb52a487fca17e66145ad87b16da583","modified":1465874600543},{"_id":"public/categories/学习笔记/git学习/index.html","hash":"b755c4979888d228b1668a71a7a500d61da27e9c","modified":1465874600543},{"_id":"public/categories/随手日记/index.html","hash":"9dad389041f166a25ce931ad78f843f597e1d86f","modified":1465874600543},{"_id":"public/categories/学习笔记/数据库/index.html","hash":"1e0b09957ec325be6ac47e86de0bf37eea4d387f","modified":1465874600544},{"_id":"public/categories/学习笔记/hexo学习/index.html","hash":"dee0d8d24671b6c86c5fa41f6e334bfd01ebf1f1","modified":1465874600544},{"_id":"public/archives/page/2/index.html","hash":"3c68e8fb577e709a762b707bbd906c71a5177204","modified":1465874600544},{"_id":"public/archives/2014/index.html","hash":"eaf6bf6f608e5898fac3b56b03c805bb187601ef","modified":1465874600544},{"_id":"public/archives/2014/10/index.html","hash":"88723fa46446fcacd80292859f3347f73c806c76","modified":1465874600544},{"_id":"public/archives/2016/page/2/index.html","hash":"5f2e60a681b4bd4ad14bfb20ecee9f16420f4a85","modified":1465874600544},{"_id":"public/archives/2016/03/index.html","hash":"82009017ee3d935aec238e298297c38573462324","modified":1465874600544},{"_id":"public/archives/2016/04/index.html","hash":"6434cdd30489115dd582d589e465c34aec7b737c","modified":1465874600544},{"_id":"public/archives/2016/06/index.html","hash":"5edf4b7711707ee2c200c4bbc050ecff56902083","modified":1465874600544},{"_id":"public/tags/BFC/index.html","hash":"6b480a9d52be138c7fccf198d18024114f66a08c","modified":1465874600545},{"_id":"public/tags/css3/index.html","hash":"4256b2567711debe7f0affbeda23d544b55cebce","modified":1465874600545},{"_id":"public/tags/css3多列布局/index.html","hash":"df840582df84f127f59133c6555fe6dfc7a83fac","modified":1465874600545},{"_id":"public/tags/数据结构/index.html","hash":"12d4b754a907f9fa097a8cd1c49e573ad28ef947","modified":1465874600545},{"_id":"public/tags/二叉树遍历/index.html","hash":"9ff30cc1e29d61f0a24ff77013a70915671fe6c3","modified":1465874600545},{"_id":"public/tags/css3选择器/index.html","hash":"60c45667d62021b7a2226a7854dbc55384b2c463","modified":1465874600545},{"_id":"public/tags/git/index.html","hash":"ad25dace141dc5e866af46cb478fd26f0536d681","modified":1465874600545},{"_id":"public/tags/gitignore配置/index.html","hash":"d52a655b7515c41d5da5d29e32a075ab9a1dc003","modified":1465874600545},{"_id":"public/tags/FlexBox/index.html","hash":"61423abf6a5de16bf727cc66c95eb00fdf9d60fb","modified":1465874600545},{"_id":"public/tags/排序算法/index.html","hash":"1fe40dfffe8da14e9884dfd996c8841ede3ee2f8","modified":1465874600546},{"_id":"public/tags/html标签/index.html","hash":"64196f5e0e61dce3990f6c2ad394b20caf84b612","modified":1465874600546},{"_id":"public/tags/html5/index.html","hash":"3419b787fd43afe4f3d47da4b7d26c1a730fdf79","modified":1465874600546},{"_id":"public/tags/pushState/index.html","hash":"67024b325c4bd1802f3ff5e51234aebdd19d6e7e","modified":1465874600546},{"_id":"public/tags/css3-transition/index.html","hash":"5cbc3de2f73ecb750ffd6b8656b0177d5971440b","modified":1465874600546},{"_id":"public/tags/旅游日记/index.html","hash":"4e89d735263792e49649c34863b9aad84f1d458a","modified":1465874600546},{"_id":"public/tags/随笔/index.html","hash":"316c35025e29e323eaee4f0de824251b0bf85b48","modified":1465874600546},{"_id":"public/tags/数据库/index.html","hash":"d45b788dff5f3604e237321661008fd4db02e0f7","modified":1465874600546},{"_id":"public/tags/hexo部署/index.html","hash":"d818229b2291161310e77238b61fd195aa857390","modified":1465874600547},{"_id":"public/tags/hexo/index.html","hash":"e92a6e0163f97aaa8755eb1e53d171407bd125b6","modified":1465874600548},{"_id":"public/tags/hexo配置/index.html","hash":"2534123d81a6207cb6ed2b7119a2f8b76be54783","modified":1465874600548},{"_id":"public/2016/06/14/bt/index.html","hash":"d2f41cd5ed2677713745599993000f58560a893a","modified":1465874600548},{"_id":"public/2016/05/24/思考/index.html","hash":"9a5cff0a1cf95f96c731439f4392b43920eb245a","modified":1465874600548},{"_id":"public/2016/05/24/数据库/index.html","hash":"a3527696d8e4b9787c70645716a0e40455ddfb72","modified":1465874600548},{"_id":"public/2016/05/18/CSS3多列布局/index.html","hash":"b26a892eb9c1914b6b6f2f3dae8bc3c4bf18cb1d","modified":1465874600548},{"_id":"public/2016/05/17/BFC/index.html","hash":"5b186f36f73867b2efc478ff7044b1982e3f6aee","modified":1465874600548},{"_id":"public/2016/05/13/flex/index.html","hash":"af4d9d299a303a05e4fe575b6bc48e623dec7134","modified":1465874600548},{"_id":"public/2016/05/06/html标签/index.html","hash":"bd52cce9863bd316d3c53734db6246523812de69","modified":1465874600549},{"_id":"public/2016/05/05/transition/index.html","hash":"aa83aee00dd544f2fe72fff3b6b6c2ab9777f7ab","modified":1465874600549},{"_id":"public/2016/05/03/css3选择器整理/index.html","hash":"4166c3bb38abaa49e99fd3c7a42b4a9bb081957b","modified":1465874600549},{"_id":"public/2016/03/29/pushstate/index.html","hash":"7db781575cf5fb25e87995b7d91357751a89df62","modified":1465874600549},{"_id":"public/archives/index.html","hash":"dc9df1e0a5a6703e85e49ffde47fb1995fa32004","modified":1465874600549},{"_id":"public/archives/2016/index.html","hash":"e072440e21b37f45011a26aaa9b3caa404eb7b69","modified":1465874600550},{"_id":"public/archives/2016/05/index.html","hash":"7e2078d18fdabea9737d475833fb6538642b04e3","modified":1465874600550},{"_id":"public/index.html","hash":"801a7518dc185ca6e844137d6b74381deee9596a","modified":1465874600550},{"_id":"public/page/2/index.html","hash":"b698f213712b030a8d0f81e5b2c271e34ca9beec","modified":1465874600550},{"_id":"public/CNAME","hash":"526ec2e5b043b2bccf894db6e7ec7e8d1b5f07a9","modified":1465874600591},{"_id":"public/img/flex/1.jpg","hash":"e29ffb5f65f40b3eddf545582c0e86631bbb0fce","modified":1465874600591},{"_id":"public/img/flex/3.jpg","hash":"00520c0855634ca4a12f66a4949d0916a0a84ef8","modified":1465874600591},{"_id":"public/img/flex/2.jpg","hash":"3846a7211365e4007b1ae30ca18f940513569ccb","modified":1465874600591},{"_id":"public/img/flex/4.jpg","hash":"8ec29b5f3380801ab3c76ccebc579e2bcbf5bec7","modified":1465874600591},{"_id":"public/img/flex/5.jpg","hash":"09390cdaaa31e944970f3c8757f4bdfe203649ce","modified":1465874600591},{"_id":"public/img/flex/6.jpg","hash":"57168956bfe6f9ddeba2428d7b6ac3dcbaf1c7cc","modified":1465874600591},{"_id":"public/img/flex/7.jpg","hash":"eaeeb9c69a9d0c79e3c41370e6fc057517799962","modified":1465874600591},{"_id":"public/img/flex/8.jpg","hash":"f83a7c1d4f6696cb40830da32493261e844591a1","modified":1465874600592},{"_id":"public/img/flex/9.jpg","hash":"02afb6cd53c1ceb2dcd715de3f8a2e318f7cb49c","modified":1465874600592},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1465874600592},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1465874600592},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1465874600592},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1465874600592},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1465874600592},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1465874600592},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1465874600592},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465874600593},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465874600593},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1465874600593},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1465874600593},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1465874600593},{"_id":"public/uploads/zhudi.jpg","hash":"b4d438b5b8d6b69d2fc8458bbac13b2563680b0e","modified":1465874600593},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1465874600593},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1465874600593},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465874600593},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465874600593},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465874600593},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465874600594},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465874600594},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465874600594},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1465874600594},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1465874600594},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465874600594},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1465874602045},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1465874602053},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1465874602055},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1465874602090},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1465874602090},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1465874602090},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1465874602090},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1465874602090},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1465874602090},{"_id":"public/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1465874602091},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1465874602091},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1465874602091},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1465874602091},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1465874602091},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1465874602091},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1465874602091},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1465874602091},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1465874602092},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1465874602092},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1465874602092},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1465874602092},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1465874602092},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1465874602092},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1465874602092},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1465874602093},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1465874602093},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1465874602093},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465874602093},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1465874602093},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465874602093},{"_id":"public/css/main.css","hash":"f041cacfffdde071df02c95fe66e7742424467b1","modified":1465874602093},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1465874602094},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1465874602094},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1465874602094},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1465874602094},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1465874602094},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1465874602094},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1465874602094},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1465874602095},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1465874602095},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1465874602099},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1465874602147},{"_id":"public/img/3.jpg","hash":"6fedbd33722bfa225714020cac3a0dc959ecbe4b","modified":1465874602194},{"_id":"public/img/4.jpg","hash":"39a4de4757a664bc8037c1c0f06b07fb08471928","modified":1465874602194},{"_id":"public/img/2.jpg","hash":"ed51490bf3eb63a261de74886d43694623fff3b1","modified":1465874602214},{"_id":"public/img/1.jpg","hash":"1ee536df019f16546a28515c962ecc0c2e8604e0","modified":1465874602221}],"Category":[{"name":"学习笔记","_id":"cipevvwze0006ogsakalt94mz"},{"name":"前端学习","parent":"cipevvwze0006ogsakalt94mz","_id":"cipevvx0p000kogsa71mulab4"},{"name":"数据挖掘","parent":"cipevvwze0006ogsakalt94mz","_id":"cipevvx0x000pogsakjxu365v"},{"name":"数据结构","parent":"cipevvwze0006ogsakalt94mz","_id":"cipevvx15000wogsaq7i65d1s"},{"name":"git学习","parent":"cipevvwze0006ogsakalt94mz","_id":"cipevvx2g001gogsa65663syo"},{"name":"随手日记","_id":"cipevvx2x0021ogsa20fxz9pd"},{"name":"数据库","parent":"cipevvwze0006ogsakalt94mz","_id":"cipevvx34002bogsahjaiqca7"},{"name":"hexo学习","parent":"cipevvwze0006ogsakalt94mz","_id":"cipevvx36002gogsazgy4ztru"}],"Data":[],"Page":[{"title":"categories","date":"2016-05-05T08:57:12.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-05-05 16:57:12\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-06-14T02:46:19.532Z","path":"categories/index.html","layout":"page","_id":"cipevvwyt0001ogsadv31aq3f","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-05-05T08:24:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-05 16:24:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-06-14T02:46:20.730Z","path":"tags/index.html","layout":"page","_id":"cipevvwz20003ogsab4a4s54f","content":"","excerpt":"","more":""}],"Post":[{"title":"css3动画","_content":"","source":"_drafts/css3动画.md","raw":"---\ntitle: css3动画\ntags:\n---\n","slug":"css3动画","published":0,"date":"2016-06-14T02:46:19.512Z","updated":"2016-06-14T02:46:19.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvwyd0000ogsaldsxpojp","content":"","excerpt":"","more":""},{"title":"决策树算法学习","date":"2016-04-28T06:20:45.000Z","_content":"\n  今天主要从以下几个方面学习决策树算法：\n  1. 决策树算法的原理\n  2. 决策树算法的优缺点\n  3. 常用的决策树算法\n  4. 分裂属性的判定\n  5. 模型的误差\n  6. 决策树算法的剪枝策略\n \n\n<!-- more -->\n\n## 决策树算法原理\n\n  传统的数据分类操作通常有以下两个步骤\n\n## 决策树算法的优缺点\n### 决策树算法的优点\n1. 使用者不需要\n### 决策树算法的缺点\n1. \n\n## 常用决策树算法\n## 最佳分类属性的判定\n## 模型的误差\n一般情况下，我们会把数据分成训练数据集合测试数据集，通过训练数据集训练模型，然后通过测试数据集测试模型。模型在训练数据上的误差叫训练误差，模型在测试数据上的误差成为泛化误差，泛化误差是模型在未知记录上的期望误差。一个好的模型应该有低训练误差和低泛化误差。\n一种最常见的情况是，模型在训练数据集上误差小，但是泛化误差大，常称为模型的过度拟合。导致模型过度拟合的原因主要有以下两点：\n1. 噪声；\n2. 样本缺乏代表性；\n为解决模型的过度拟合问题，我们经常使用对决策树后剪枝的方法，这样需要我们在建立模型的过程中，尽量建立一棵大树，然后基于数据的支持度和业务的理解对树进行剪枝。\n## 决策树剪枝策略","source":"_drafts/决策树算法学习.md","raw":"---\ntitle: 决策树算法学习\ndate: 2016-04-28 14:20:45\ntags: \n  - 数据挖掘\ncategories:\n  - 学习笔记\n  - 数据挖掘\n---\n\n  今天主要从以下几个方面学习决策树算法：\n  1. 决策树算法的原理\n  2. 决策树算法的优缺点\n  3. 常用的决策树算法\n  4. 分裂属性的判定\n  5. 模型的误差\n  6. 决策树算法的剪枝策略\n \n\n<!-- more -->\n\n## 决策树算法原理\n\n  传统的数据分类操作通常有以下两个步骤\n\n## 决策树算法的优缺点\n### 决策树算法的优点\n1. 使用者不需要\n### 决策树算法的缺点\n1. \n\n## 常用决策树算法\n## 最佳分类属性的判定\n## 模型的误差\n一般情况下，我们会把数据分成训练数据集合测试数据集，通过训练数据集训练模型，然后通过测试数据集测试模型。模型在训练数据上的误差叫训练误差，模型在测试数据上的误差成为泛化误差，泛化误差是模型在未知记录上的期望误差。一个好的模型应该有低训练误差和低泛化误差。\n一种最常见的情况是，模型在训练数据集上误差小，但是泛化误差大，常称为模型的过度拟合。导致模型过度拟合的原因主要有以下两点：\n1. 噪声；\n2. 样本缺乏代表性；\n为解决模型的过度拟合问题，我们经常使用对决策树后剪枝的方法，这样需要我们在建立模型的过程中，尽量建立一棵大树，然后基于数据的支持度和业务的理解对树进行剪枝。\n## 决策树剪枝策略","slug":"决策树算法学习","published":0,"updated":"2016-06-14T02:46:19.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvwyw0002ogsagx8akv37","content":"<p>  今天主要从以下几个方面学习决策树算法：</p>\n<ol>\n<li>决策树算法的原理</li>\n<li>决策树算法的优缺点</li>\n<li>常用的决策树算法</li>\n<li>分裂属性的判定</li>\n<li>模型的误差</li>\n<li>决策树算法的剪枝策略</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"决策树算法原理\"><a href=\"#决策树算法原理\" class=\"headerlink\" title=\"决策树算法原理\"></a>决策树算法原理</h2><p>  传统的数据分类操作通常有以下两个步骤</p>\n<h2 id=\"决策树算法的优缺点\"><a href=\"#决策树算法的优缺点\" class=\"headerlink\" title=\"决策树算法的优缺点\"></a>决策树算法的优缺点</h2><h3 id=\"决策树算法的优点\"><a href=\"#决策树算法的优点\" class=\"headerlink\" title=\"决策树算法的优点\"></a>决策树算法的优点</h3><ol>\n<li>使用者不需要<h3 id=\"决策树算法的缺点\"><a href=\"#决策树算法的缺点\" class=\"headerlink\" title=\"决策树算法的缺点\"></a>决策树算法的缺点</h3></li>\n<li></li>\n</ol>\n<h2 id=\"常用决策树算法\"><a href=\"#常用决策树算法\" class=\"headerlink\" title=\"常用决策树算法\"></a>常用决策树算法</h2><h2 id=\"最佳分类属性的判定\"><a href=\"#最佳分类属性的判定\" class=\"headerlink\" title=\"最佳分类属性的判定\"></a>最佳分类属性的判定</h2><h2 id=\"模型的误差\"><a href=\"#模型的误差\" class=\"headerlink\" title=\"模型的误差\"></a>模型的误差</h2><p>一般情况下，我们会把数据分成训练数据集合测试数据集，通过训练数据集训练模型，然后通过测试数据集测试模型。模型在训练数据上的误差叫训练误差，模型在测试数据上的误差成为泛化误差，泛化误差是模型在未知记录上的期望误差。一个好的模型应该有低训练误差和低泛化误差。<br>一种最常见的情况是，模型在训练数据集上误差小，但是泛化误差大，常称为模型的过度拟合。导致模型过度拟合的原因主要有以下两点：</p>\n<ol>\n<li>噪声；</li>\n<li>样本缺乏代表性；<br>为解决模型的过度拟合问题，我们经常使用对决策树后剪枝的方法，这样需要我们在建立模型的过程中，尽量建立一棵大树，然后基于数据的支持度和业务的理解对树进行剪枝。<h2 id=\"决策树剪枝策略\"><a href=\"#决策树剪枝策略\" class=\"headerlink\" title=\"决策树剪枝策略\"></a>决策树剪枝策略</h2></li>\n</ol>\n","excerpt":"<p>  今天主要从以下几个方面学习决策树算法：</p>\n<ol>\n<li>决策树算法的原理</li>\n<li>决策树算法的优缺点</li>\n<li>常用的决策树算法</li>\n<li>分裂属性的判定</li>\n<li>模型的误差</li>\n<li>决策树算法的剪枝策略</li>\n</ol>","more":"<h2 id=\"决策树算法原理\"><a href=\"#决策树算法原理\" class=\"headerlink\" title=\"决策树算法原理\"></a>决策树算法原理</h2><p>  传统的数据分类操作通常有以下两个步骤</p>\n<h2 id=\"决策树算法的优缺点\"><a href=\"#决策树算法的优缺点\" class=\"headerlink\" title=\"决策树算法的优缺点\"></a>决策树算法的优缺点</h2><h3 id=\"决策树算法的优点\"><a href=\"#决策树算法的优点\" class=\"headerlink\" title=\"决策树算法的优点\"></a>决策树算法的优点</h3><ol>\n<li>使用者不需要<h3 id=\"决策树算法的缺点\"><a href=\"#决策树算法的缺点\" class=\"headerlink\" title=\"决策树算法的缺点\"></a>决策树算法的缺点</h3></li>\n<li></li>\n</ol>\n<h2 id=\"常用决策树算法\"><a href=\"#常用决策树算法\" class=\"headerlink\" title=\"常用决策树算法\"></a>常用决策树算法</h2><h2 id=\"最佳分类属性的判定\"><a href=\"#最佳分类属性的判定\" class=\"headerlink\" title=\"最佳分类属性的判定\"></a>最佳分类属性的判定</h2><h2 id=\"模型的误差\"><a href=\"#模型的误差\" class=\"headerlink\" title=\"模型的误差\"></a>模型的误差</h2><p>一般情况下，我们会把数据分成训练数据集合测试数据集，通过训练数据集训练模型，然后通过测试数据集测试模型。模型在训练数据上的误差叫训练误差，模型在测试数据上的误差成为泛化误差，泛化误差是模型在未知记录上的期望误差。一个好的模型应该有低训练误差和低泛化误差。<br>一种最常见的情况是，模型在训练数据集上误差小，但是泛化误差大，常称为模型的过度拟合。导致模型过度拟合的原因主要有以下两点：</p>\n<ol>\n<li>噪声；</li>\n<li>样本缺乏代表性；<br>为解决模型的过度拟合问题，我们经常使用对决策树后剪枝的方法，这样需要我们在建立模型的过程中，尽量建立一棵大树，然后基于数据的支持度和业务的理解对树进行剪枝。<h2 id=\"决策树剪枝策略\"><a href=\"#决策树剪枝策略\" class=\"headerlink\" title=\"决策树剪枝策略\"></a>决策树剪枝策略</h2></li>\n</ol>"},{"title":"CSS中的BFC","date":"2016-05-17T07:49:22.000Z","_content":"本文主要参考  http://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html\n\n# 什么是BFC\nBFC（Block Formatting Context）块级格式化上下文。W3C定义如下：“浮动，绝对定位元素，inline-blocks, table-cells, table-captions,和overflow的值不为visible的元素，（除了这个值已经被传到了视口的时候）将创建一个新的块级格式化上下文。”\n<!-- more -->\nBFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\n一个BFC是一个HTML盒子并且至少满足下列条件中的任何一个：\n\n1. float的值不为none；\n2. position的值不为static或者relative；（还有absolute和fixed）\n3. display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个；\n4. overflow的值不为visible\n*根元素也会生成一个BFC*\n\n# BFC布局规则\n\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n3. 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n6. 计算BFC的高度时，浮动元素也参与计算\n\n# BFC的用处\n1. BFC中的盒子对齐  \nW3C描述如下：\n在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）。\n（一个盒子的边框会由于浮动而收缩的意思是，如果将float属性的值设置为left或right，元素就会向其父元素的左侧或右侧靠紧，同时默认情况下，盒子的宽度不在伸展，而是根据盒子里面的内容的宽度来确定。）\n所有属于同一个BFC的盒子都左对齐（左至右的格式），他们的左外边框紧贴着包含块的左边框。在最后一个盒子里我们可以看到尽管那里有一个浮动元素（棕色）在它的左边，另一个元素（绿色）仍然紧贴着包含块的左边框。\n2. 使用BFC来防止外边距折叠\n毗邻块盒子的垂直外边距折叠只有他们是在同一BFC时才会发生。如果他们属于不同的BFC，他们之间的外边距将不会折叠。所以通过创建一个新的BFC我们可以防止外边距折叠。\n3. 使用BFC来包含浮动：一个BFC可以包含浮动\n4. 使用BFC来防止文字环绕\n首先解释为什么会产生文字环绕的现象。当一个元素浮动之后，它就会脱离当前的文档流，它后面的盒子会越过它与前一个盒子对齐，在同一个BFC中，后面这个盒子的左边框会与包含框的左边框重合。而这个浮动的盒子会漂浮在后面盒子的上方，后面的盒子的文本行会进行收缩来为浮动元素提供空间。随着文字的增多，超过了浮动元素的高度时，文本行不需要收缩了，就产生了环绕的效果。当给后面盒子创建一个新的BFC后，它左边框变不需要紧挨着包含框，整个盒子收缩而不只是文本行收缩，所以就不会再产生文字环绕的现象。\n\n5. 在多列布局中使用BFC\n\n\t\t.column{\n\t\t    width: 31.33%;\n\t\t    background-color: green;\n\t\t    float: left;\n\t\t    margin: 0 1%;\n\t\t}\n\t\t.column:last-child{\n\t\t    float: none;\n\t\t    overflow: hidden; \n\t\t}\n\n# BFC模式的触发\n\n一个新的BFC可以通过给容器添加任何一个触发BFC的CSS样式，如overflow: scroll, overflow: hidden, display: flex, float: left,或者 display: table来创建。但注意：\n\n1. display:table可能会产生一些问题\n2. overflow:scroll可能会显示不必要的滚动条\n3. float:left将会把元素置于容器的左边，其他元素环绕着它\n4. overflow:hidden将会剪切掉溢出的元素\n","source":"_posts/BFC.md","raw":"---\ntitle: CSS中的BFC\ndate: 2016-05-17 15:49:22\ntags: \n  - BFC\ncategories:\n  - 学习笔记\n  - 前端学习\n---\n本文主要参考  http://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html\n\n# 什么是BFC\nBFC（Block Formatting Context）块级格式化上下文。W3C定义如下：“浮动，绝对定位元素，inline-blocks, table-cells, table-captions,和overflow的值不为visible的元素，（除了这个值已经被传到了视口的时候）将创建一个新的块级格式化上下文。”\n<!-- more -->\nBFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\n一个BFC是一个HTML盒子并且至少满足下列条件中的任何一个：\n\n1. float的值不为none；\n2. position的值不为static或者relative；（还有absolute和fixed）\n3. display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个；\n4. overflow的值不为visible\n*根元素也会生成一个BFC*\n\n# BFC布局规则\n\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n3. 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n6. 计算BFC的高度时，浮动元素也参与计算\n\n# BFC的用处\n1. BFC中的盒子对齐  \nW3C描述如下：\n在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）。\n（一个盒子的边框会由于浮动而收缩的意思是，如果将float属性的值设置为left或right，元素就会向其父元素的左侧或右侧靠紧，同时默认情况下，盒子的宽度不在伸展，而是根据盒子里面的内容的宽度来确定。）\n所有属于同一个BFC的盒子都左对齐（左至右的格式），他们的左外边框紧贴着包含块的左边框。在最后一个盒子里我们可以看到尽管那里有一个浮动元素（棕色）在它的左边，另一个元素（绿色）仍然紧贴着包含块的左边框。\n2. 使用BFC来防止外边距折叠\n毗邻块盒子的垂直外边距折叠只有他们是在同一BFC时才会发生。如果他们属于不同的BFC，他们之间的外边距将不会折叠。所以通过创建一个新的BFC我们可以防止外边距折叠。\n3. 使用BFC来包含浮动：一个BFC可以包含浮动\n4. 使用BFC来防止文字环绕\n首先解释为什么会产生文字环绕的现象。当一个元素浮动之后，它就会脱离当前的文档流，它后面的盒子会越过它与前一个盒子对齐，在同一个BFC中，后面这个盒子的左边框会与包含框的左边框重合。而这个浮动的盒子会漂浮在后面盒子的上方，后面的盒子的文本行会进行收缩来为浮动元素提供空间。随着文字的增多，超过了浮动元素的高度时，文本行不需要收缩了，就产生了环绕的效果。当给后面盒子创建一个新的BFC后，它左边框变不需要紧挨着包含框，整个盒子收缩而不只是文本行收缩，所以就不会再产生文字环绕的现象。\n\n5. 在多列布局中使用BFC\n\n\t\t.column{\n\t\t    width: 31.33%;\n\t\t    background-color: green;\n\t\t    float: left;\n\t\t    margin: 0 1%;\n\t\t}\n\t\t.column:last-child{\n\t\t    float: none;\n\t\t    overflow: hidden; \n\t\t}\n\n# BFC模式的触发\n\n一个新的BFC可以通过给容器添加任何一个触发BFC的CSS样式，如overflow: scroll, overflow: hidden, display: flex, float: left,或者 display: table来创建。但注意：\n\n1. display:table可能会产生一些问题\n2. overflow:scroll可能会显示不必要的滚动条\n3. float:left将会把元素置于容器的左边，其他元素环绕着它\n4. overflow:hidden将会剪切掉溢出的元素\n","slug":"BFC","published":1,"updated":"2016-06-14T02:46:19.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvwz60004ogsaju63r406","content":"<p>本文主要参考  <a href=\"http://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html\" target=\"_blank\" rel=\"external\">http://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html</a></p>\n<h1 id=\"什么是BFC\"><a href=\"#什么是BFC\" class=\"headerlink\" title=\"什么是BFC\"></a>什么是BFC</h1><p>BFC（Block Formatting Context）块级格式化上下文。W3C定义如下：“浮动，绝对定位元素，inline-blocks, table-cells, table-captions,和overflow的值不为visible的元素，（除了这个值已经被传到了视口的时候）将创建一个新的块级格式化上下文。”<br><a id=\"more\"></a><br>BFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。<br>一个BFC是一个HTML盒子并且至少满足下列条件中的任何一个：</p>\n<ol>\n<li>float的值不为none；</li>\n<li>position的值不为static或者relative；（还有absolute和fixed）</li>\n<li>display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个；</li>\n<li>overflow的值不为visible<br><em>根元素也会生成一个BFC</em></li>\n</ol>\n<h1 id=\"BFC布局规则\"><a href=\"#BFC布局规则\" class=\"headerlink\" title=\"BFC布局规则\"></a>BFC布局规则</h1><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>\n<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算</li>\n</ol>\n<h1 id=\"BFC的用处\"><a href=\"#BFC的用处\" class=\"headerlink\" title=\"BFC的用处\"></a>BFC的用处</h1><ol>\n<li>BFC中的盒子对齐<br>W3C描述如下：<br>在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）。<br>（一个盒子的边框会由于浮动而收缩的意思是，如果将float属性的值设置为left或right，元素就会向其父元素的左侧或右侧靠紧，同时默认情况下，盒子的宽度不在伸展，而是根据盒子里面的内容的宽度来确定。）<br>所有属于同一个BFC的盒子都左对齐（左至右的格式），他们的左外边框紧贴着包含块的左边框。在最后一个盒子里我们可以看到尽管那里有一个浮动元素（棕色）在它的左边，另一个元素（绿色）仍然紧贴着包含块的左边框。</li>\n<li>使用BFC来防止外边距折叠<br>毗邻块盒子的垂直外边距折叠只有他们是在同一BFC时才会发生。如果他们属于不同的BFC，他们之间的外边距将不会折叠。所以通过创建一个新的BFC我们可以防止外边距折叠。</li>\n<li>使用BFC来包含浮动：一个BFC可以包含浮动</li>\n<li><p>使用BFC来防止文字环绕<br>首先解释为什么会产生文字环绕的现象。当一个元素浮动之后，它就会脱离当前的文档流，它后面的盒子会越过它与前一个盒子对齐，在同一个BFC中，后面这个盒子的左边框会与包含框的左边框重合。而这个浮动的盒子会漂浮在后面盒子的上方，后面的盒子的文本行会进行收缩来为浮动元素提供空间。随着文字的增多，超过了浮动元素的高度时，文本行不需要收缩了，就产生了环绕的效果。当给后面盒子创建一个新的BFC后，它左边框变不需要紧挨着包含框，整个盒子收缩而不只是文本行收缩，所以就不会再产生文字环绕的现象。</p>\n</li>\n<li><p>在多列布局中使用BFC</p>\n<pre><code>.column{\n    width: 31.33%;\n    background-color: green;\n    float: left;\n    margin: 0 1%;\n}\n.column:last-child{\n    float: none;\n    overflow: hidden; \n}\n</code></pre></li>\n</ol>\n<h1 id=\"BFC模式的触发\"><a href=\"#BFC模式的触发\" class=\"headerlink\" title=\"BFC模式的触发\"></a>BFC模式的触发</h1><p>一个新的BFC可以通过给容器添加任何一个触发BFC的CSS样式，如overflow: scroll, overflow: hidden, display: flex, float: left,或者 display: table来创建。但注意：</p>\n<ol>\n<li>display:table可能会产生一些问题</li>\n<li>overflow:scroll可能会显示不必要的滚动条</li>\n<li>float:left将会把元素置于容器的左边，其他元素环绕着它</li>\n<li>overflow:hidden将会剪切掉溢出的元素</li>\n</ol>\n","excerpt":"<p>本文主要参考  <a href=\"http://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html\">http://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html</a></p>\n<h1 id=\"什么是BFC\"><a href=\"#什么是BFC\" class=\"headerlink\" title=\"什么是BFC\"></a>什么是BFC</h1><p>BFC（Block Formatting Context）块级格式化上下文。W3C定义如下：“浮动，绝对定位元素，inline-blocks, table-cells, table-captions,和overflow的值不为visible的元素，（除了这个值已经被传到了视口的时候）将创建一个新的块级格式化上下文。”<br>","more":"<br>BFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。<br>一个BFC是一个HTML盒子并且至少满足下列条件中的任何一个：</p>\n<ol>\n<li>float的值不为none；</li>\n<li>position的值不为static或者relative；（还有absolute和fixed）</li>\n<li>display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个；</li>\n<li>overflow的值不为visible<br><em>根元素也会生成一个BFC</em></li>\n</ol>\n<h1 id=\"BFC布局规则\"><a href=\"#BFC布局规则\" class=\"headerlink\" title=\"BFC布局规则\"></a>BFC布局规则</h1><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>\n<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算</li>\n</ol>\n<h1 id=\"BFC的用处\"><a href=\"#BFC的用处\" class=\"headerlink\" title=\"BFC的用处\"></a>BFC的用处</h1><ol>\n<li>BFC中的盒子对齐<br>W3C描述如下：<br>在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）。<br>（一个盒子的边框会由于浮动而收缩的意思是，如果将float属性的值设置为left或right，元素就会向其父元素的左侧或右侧靠紧，同时默认情况下，盒子的宽度不在伸展，而是根据盒子里面的内容的宽度来确定。）<br>所有属于同一个BFC的盒子都左对齐（左至右的格式），他们的左外边框紧贴着包含块的左边框。在最后一个盒子里我们可以看到尽管那里有一个浮动元素（棕色）在它的左边，另一个元素（绿色）仍然紧贴着包含块的左边框。</li>\n<li>使用BFC来防止外边距折叠<br>毗邻块盒子的垂直外边距折叠只有他们是在同一BFC时才会发生。如果他们属于不同的BFC，他们之间的外边距将不会折叠。所以通过创建一个新的BFC我们可以防止外边距折叠。</li>\n<li>使用BFC来包含浮动：一个BFC可以包含浮动</li>\n<li><p>使用BFC来防止文字环绕<br>首先解释为什么会产生文字环绕的现象。当一个元素浮动之后，它就会脱离当前的文档流，它后面的盒子会越过它与前一个盒子对齐，在同一个BFC中，后面这个盒子的左边框会与包含框的左边框重合。而这个浮动的盒子会漂浮在后面盒子的上方，后面的盒子的文本行会进行收缩来为浮动元素提供空间。随着文字的增多，超过了浮动元素的高度时，文本行不需要收缩了，就产生了环绕的效果。当给后面盒子创建一个新的BFC后，它左边框变不需要紧挨着包含框，整个盒子收缩而不只是文本行收缩，所以就不会再产生文字环绕的现象。</p>\n</li>\n<li><p>在多列布局中使用BFC</p>\n<pre><code>.column{\n    width: 31.33%;\n    background-color: green;\n    float: left;\n    margin: 0 1%;\n}\n.column:last-child{\n    float: none;\n    overflow: hidden; \n}\n</code></pre></li>\n</ol>\n<h1 id=\"BFC模式的触发\"><a href=\"#BFC模式的触发\" class=\"headerlink\" title=\"BFC模式的触发\"></a>BFC模式的触发</h1><p>一个新的BFC可以通过给容器添加任何一个触发BFC的CSS样式，如overflow: scroll, overflow: hidden, display: flex, float: left,或者 display: table来创建。但注意：</p>\n<ol>\n<li>display:table可能会产生一些问题</li>\n<li>overflow:scroll可能会显示不必要的滚动条</li>\n<li>float:left将会把元素置于容器的左边，其他元素环绕着它</li>\n<li>overflow:hidden将会剪切掉溢出的元素</li>\n</ol>"},{"title":"css3变形","date":"2016-05-05T08:17:55.000Z","_content":"","source":"_drafts/css3变形.md","raw":"---\ntitle: css3变形\ntags:\n  - css3变形\n  - css3\ncategories:\n  - 学习笔记\ndate: 2016-05-05 16:17:55\n---\n","slug":"css3变形","published":0,"updated":"2016-06-14T02:46:19.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvwzf0007ogsa15s944n2","content":"","excerpt":"","more":""},{"title":"CSS3多列布局","date":"2016-05-18T09:21:45.000Z","_content":"# 主要属性\n## 1 break-after、break-before、break-inside\n描述页面、列或者区域形成一个盒子后的中断行为（即是否中断以及如何中断），如果没有形成一个盒子，这个实行将会被忽略。\n每一个可能的断点（即每一个元素的边界）都是受三个属性的影响：前一个元素的break-after值，下一个元素的break-before值，以包含元素的break-inside值。\n<!-- more -->\n规定断点要遵循以下的规则：\n1. 如果三个值中的任何一个值是强制中断值，即left, right, page, column 或者region，这个值具有优先级，如果有多个强制型的中断值同时出现，那么在流中最后一个出现的值生效。（即break-before的值的优先级高于break-after, break-after的优先级高于break-inside）\n2. 这三个值中的任意一个是避免中断的值，即avoid, avoid-page, avoid-region, avoid-column，那么应用的地方就不会被中断。\n\n一旦应用了强制中断，当需要的时候可以添加软中断，但是不能应用在一个使用了aviod值的元素边界上。\n\n\tInitial value\tauto\n\tApplies to\tblock-level elements\n\tInherited\tno\n\tMedia\tpaged\n\tComputed value\tas specified\n\tAnimatable\tno\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n### values\n\n\tauto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region\n\n## 2 columns-count\ncolumn-count属性描述元素列的个数。\n\n\tInitial value\tauto\n\tApplies to\tnon-replaced block elements (except table elements), table-cell or inline-block elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tas specified\n\tAnimatable\tyes, as an integer\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n## 3 column-fill\ncolumn-fill属性描述内容是如何被分配到各列中的。\n### values\n\n\tauto | balance\nbalance:每行高度相同。\nauto:只占据内容需要的空间。\n\n\tInitial value\tbalance\n\tApplies to\tmulticol elements\n\tInherited\tno\n\tMedia\tvisual, but, in continuous media, has no effect in overflow columns\n\tComputed value\tas specified\n\tAnimatable\tno\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n## 4 column-gap\n描述列之间的间距。\n### values\n\n\t<length> | normal\nnormal:浏览器默认间距\n\n\tInitial value\tnormal\n\tApplies to\tmulticol elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tthe absolute length or the keyword normal\n\tAnimatable\tyes, as a length\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n## 5 column-row\n在多列布局中column-row指定指定列之间的分割线，是 column-rule-width, column-rule-style and column-rule-color.的简写形式。\n\n\tInitial value\tas each of the properties of the shorthand:\n\tcolumn-rule-width: medium\n\tcolumn-rule-style: none\n\tcolumn-rule-color: currentColor\n\tApplies to\tmulticol elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tas each of the properties of the shorthand:\n\tcolumn-rule-color: If the value is translucent, the computed value will be the rgba() corresponding one. If it isn't, it will be the rgb() corresponding one. The transparent keyword maps to rgba(0,0,0,0).\n\tcolumn-rule-style: as specified\n\tcolumn-rule-width: the absolute length; 0 if the column-rule-style is none or hidden\n\tAnimatable\tas each of the properties of the shorthand:\n\tcolumn-rule-color: yes, as a color\n\tcolumn-rule-style: no\n\tcolumn-rule-width: yes, as a length\n\tCanonical order\torder of appearance in the formal grammar of the values\n### values\n\n\t\t<'column-rule-width'>\n\t\t<length>|thin|medium|thick\n\t\t<'column-rule-style'>\n\t\tnone | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n\t\t<'column-rule-color'>\n\t\tIs a <color> value.\n\n*取值相当于border*\n\n## 6 column-span\n当一个元素的column-span属性被设置为all时，它可以让这个元素跨越所有列，当一个元素跨越超过一个列时，这个元素叫spanning element。\n\n\tInitial value\tnone\n\tApplies to\tin-flow block-level elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tas specified\n\tAnimatable\tno\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n\n### values\n\tnone | all\n如：\n\n\th1, h2 {\n\t  column-span: all;\n\t}\n## 7 column-width\ncolumn-width在没有column-count的情况下用来计算应该有多少列。比如容器的宽度为500px，column-gap为0，column-width设为400，则只能显示一列，且列的实际宽度为500px。如果column-width设为250px,则显示两列，每列宽度为250px。这时候将column-count设为1则显示一列，设为2显示两列，设为3还是显示两列。（所以应该是每列的最小宽度）\n## 8 columns\ncolumn-width，column-count的缩写\n\n\tInitial value\tas each of the properties of the shorthand:\n\tcolumn-width: auto\n\tcolumn-count: auto\n\tApplies to\tnon-replaced block elements (except table elements), table-cell or inline-block elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tas each of the properties of the shorthand:\n\tcolumn-width: the absolute length, zero or larger\n\tcolumn-count: as specified\n\tAnimatable\tas each of the properties of the shorthand:\n\tcolumn-width: yes, as a length\n\tcolumn-count: yes, as an integer\n\tCanonical order\torder of appearance in the formal grammar of the values\n\n<'column-width'> || <'column-count'>\n\n演示 http://slygg.cn/shly/IFE/task_12/index.html","source":"_posts/CSS3多列布局.md","raw":"---\ntitle: CSS3多列布局\ndate: 2016-05-18 17:21:45\ntags: \n  - css3\n  - css3多列布局\ncategories:\n  - 学习笔记\n  - 前端学习\n---\n# 主要属性\n## 1 break-after、break-before、break-inside\n描述页面、列或者区域形成一个盒子后的中断行为（即是否中断以及如何中断），如果没有形成一个盒子，这个实行将会被忽略。\n每一个可能的断点（即每一个元素的边界）都是受三个属性的影响：前一个元素的break-after值，下一个元素的break-before值，以包含元素的break-inside值。\n<!-- more -->\n规定断点要遵循以下的规则：\n1. 如果三个值中的任何一个值是强制中断值，即left, right, page, column 或者region，这个值具有优先级，如果有多个强制型的中断值同时出现，那么在流中最后一个出现的值生效。（即break-before的值的优先级高于break-after, break-after的优先级高于break-inside）\n2. 这三个值中的任意一个是避免中断的值，即avoid, avoid-page, avoid-region, avoid-column，那么应用的地方就不会被中断。\n\n一旦应用了强制中断，当需要的时候可以添加软中断，但是不能应用在一个使用了aviod值的元素边界上。\n\n\tInitial value\tauto\n\tApplies to\tblock-level elements\n\tInherited\tno\n\tMedia\tpaged\n\tComputed value\tas specified\n\tAnimatable\tno\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n### values\n\n\tauto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region\n\n## 2 columns-count\ncolumn-count属性描述元素列的个数。\n\n\tInitial value\tauto\n\tApplies to\tnon-replaced block elements (except table elements), table-cell or inline-block elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tas specified\n\tAnimatable\tyes, as an integer\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n## 3 column-fill\ncolumn-fill属性描述内容是如何被分配到各列中的。\n### values\n\n\tauto | balance\nbalance:每行高度相同。\nauto:只占据内容需要的空间。\n\n\tInitial value\tbalance\n\tApplies to\tmulticol elements\n\tInherited\tno\n\tMedia\tvisual, but, in continuous media, has no effect in overflow columns\n\tComputed value\tas specified\n\tAnimatable\tno\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n## 4 column-gap\n描述列之间的间距。\n### values\n\n\t<length> | normal\nnormal:浏览器默认间距\n\n\tInitial value\tnormal\n\tApplies to\tmulticol elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tthe absolute length or the keyword normal\n\tAnimatable\tyes, as a length\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n## 5 column-row\n在多列布局中column-row指定指定列之间的分割线，是 column-rule-width, column-rule-style and column-rule-color.的简写形式。\n\n\tInitial value\tas each of the properties of the shorthand:\n\tcolumn-rule-width: medium\n\tcolumn-rule-style: none\n\tcolumn-rule-color: currentColor\n\tApplies to\tmulticol elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tas each of the properties of the shorthand:\n\tcolumn-rule-color: If the value is translucent, the computed value will be the rgba() corresponding one. If it isn't, it will be the rgb() corresponding one. The transparent keyword maps to rgba(0,0,0,0).\n\tcolumn-rule-style: as specified\n\tcolumn-rule-width: the absolute length; 0 if the column-rule-style is none or hidden\n\tAnimatable\tas each of the properties of the shorthand:\n\tcolumn-rule-color: yes, as a color\n\tcolumn-rule-style: no\n\tcolumn-rule-width: yes, as a length\n\tCanonical order\torder of appearance in the formal grammar of the values\n### values\n\n\t\t<'column-rule-width'>\n\t\t<length>|thin|medium|thick\n\t\t<'column-rule-style'>\n\t\tnone | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n\t\t<'column-rule-color'>\n\t\tIs a <color> value.\n\n*取值相当于border*\n\n## 6 column-span\n当一个元素的column-span属性被设置为all时，它可以让这个元素跨越所有列，当一个元素跨越超过一个列时，这个元素叫spanning element。\n\n\tInitial value\tnone\n\tApplies to\tin-flow block-level elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tas specified\n\tAnimatable\tno\n\tCanonical order\tthe unique non-ambiguous order defined by the formal grammar\n\n### values\n\tnone | all\n如：\n\n\th1, h2 {\n\t  column-span: all;\n\t}\n## 7 column-width\ncolumn-width在没有column-count的情况下用来计算应该有多少列。比如容器的宽度为500px，column-gap为0，column-width设为400，则只能显示一列，且列的实际宽度为500px。如果column-width设为250px,则显示两列，每列宽度为250px。这时候将column-count设为1则显示一列，设为2显示两列，设为3还是显示两列。（所以应该是每列的最小宽度）\n## 8 columns\ncolumn-width，column-count的缩写\n\n\tInitial value\tas each of the properties of the shorthand:\n\tcolumn-width: auto\n\tcolumn-count: auto\n\tApplies to\tnon-replaced block elements (except table elements), table-cell or inline-block elements\n\tInherited\tno\n\tMedia\tvisual\n\tComputed value\tas each of the properties of the shorthand:\n\tcolumn-width: the absolute length, zero or larger\n\tcolumn-count: as specified\n\tAnimatable\tas each of the properties of the shorthand:\n\tcolumn-width: yes, as a length\n\tcolumn-count: yes, as an integer\n\tCanonical order\torder of appearance in the formal grammar of the values\n\n<'column-width'> || <'column-count'>\n\n演示 http://slygg.cn/shly/IFE/task_12/index.html","slug":"CSS3多列布局","published":1,"updated":"2016-06-14T02:46:19.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvwzj0008ogsas3iaxrtk","content":"<h1 id=\"主要属性\"><a href=\"#主要属性\" class=\"headerlink\" title=\"主要属性\"></a>主要属性</h1><h2 id=\"1-break-after、break-before、break-inside\"><a href=\"#1-break-after、break-before、break-inside\" class=\"headerlink\" title=\"1 break-after、break-before、break-inside\"></a>1 break-after、break-before、break-inside</h2><p>描述页面、列或者区域形成一个盒子后的中断行为（即是否中断以及如何中断），如果没有形成一个盒子，这个实行将会被忽略。<br>每一个可能的断点（即每一个元素的边界）都是受三个属性的影响：前一个元素的break-after值，下一个元素的break-before值，以包含元素的break-inside值。<br><a id=\"more\"></a><br>规定断点要遵循以下的规则：</p>\n<ol>\n<li>如果三个值中的任何一个值是强制中断值，即left, right, page, column 或者region，这个值具有优先级，如果有多个强制型的中断值同时出现，那么在流中最后一个出现的值生效。（即break-before的值的优先级高于break-after, break-after的优先级高于break-inside）</li>\n<li>这三个值中的任意一个是避免中断的值，即avoid, avoid-page, avoid-region, avoid-column，那么应用的地方就不会被中断。</li>\n</ol>\n<p>一旦应用了强制中断，当需要的时候可以添加软中断，但是不能应用在一个使用了aviod值的元素边界上。</p>\n<pre><code>Initial value    auto\nApplies to    block-level elements\nInherited    no\nMedia    paged\nComputed value    as specified\nAnimatable    no\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h3 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>auto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region\n</code></pre><h2 id=\"2-columns-count\"><a href=\"#2-columns-count\" class=\"headerlink\" title=\"2 columns-count\"></a>2 columns-count</h2><p>column-count属性描述元素列的个数。</p>\n<pre><code>Initial value    auto\nApplies to    non-replaced block elements (except table elements), table-cell or inline-block elements\nInherited    no\nMedia    visual\nComputed value    as specified\nAnimatable    yes, as an integer\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h2 id=\"3-column-fill\"><a href=\"#3-column-fill\" class=\"headerlink\" title=\"3 column-fill\"></a>3 column-fill</h2><p>column-fill属性描述内容是如何被分配到各列中的。</p>\n<h3 id=\"values-1\"><a href=\"#values-1\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>auto | balance\n</code></pre><p>balance:每行高度相同。<br>auto:只占据内容需要的空间。</p>\n<pre><code>Initial value    balance\nApplies to    multicol elements\nInherited    no\nMedia    visual, but, in continuous media, has no effect in overflow columns\nComputed value    as specified\nAnimatable    no\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h2 id=\"4-column-gap\"><a href=\"#4-column-gap\" class=\"headerlink\" title=\"4 column-gap\"></a>4 column-gap</h2><p>描述列之间的间距。</p>\n<h3 id=\"values-2\"><a href=\"#values-2\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>&lt;length&gt; | normal\n</code></pre><p>normal:浏览器默认间距</p>\n<pre><code>Initial value    normal\nApplies to    multicol elements\nInherited    no\nMedia    visual\nComputed value    the absolute length or the keyword normal\nAnimatable    yes, as a length\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h2 id=\"5-column-row\"><a href=\"#5-column-row\" class=\"headerlink\" title=\"5 column-row\"></a>5 column-row</h2><p>在多列布局中column-row指定指定列之间的分割线，是 column-rule-width, column-rule-style and column-rule-color.的简写形式。</p>\n<pre><code>Initial value    as each of the properties of the shorthand:\ncolumn-rule-width: medium\ncolumn-rule-style: none\ncolumn-rule-color: currentColor\nApplies to    multicol elements\nInherited    no\nMedia    visual\nComputed value    as each of the properties of the shorthand:\ncolumn-rule-color: If the value is translucent, the computed value will be the rgba() corresponding one. If it isn&apos;t, it will be the rgb() corresponding one. The transparent keyword maps to rgba(0,0,0,0).\ncolumn-rule-style: as specified\ncolumn-rule-width: the absolute length; 0 if the column-rule-style is none or hidden\nAnimatable    as each of the properties of the shorthand:\ncolumn-rule-color: yes, as a color\ncolumn-rule-style: no\ncolumn-rule-width: yes, as a length\nCanonical order    order of appearance in the formal grammar of the values\n</code></pre><h3 id=\"values-3\"><a href=\"#values-3\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>&lt;&apos;column-rule-width&apos;&gt;\n&lt;length&gt;|thin|medium|thick\n&lt;&apos;column-rule-style&apos;&gt;\nnone | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n&lt;&apos;column-rule-color&apos;&gt;\nIs a &lt;color&gt; value.\n</code></pre><p><em>取值相当于border</em></p>\n<h2 id=\"6-column-span\"><a href=\"#6-column-span\" class=\"headerlink\" title=\"6 column-span\"></a>6 column-span</h2><p>当一个元素的column-span属性被设置为all时，它可以让这个元素跨越所有列，当一个元素跨越超过一个列时，这个元素叫spanning element。</p>\n<pre><code>Initial value    none\nApplies to    in-flow block-level elements\nInherited    no\nMedia    visual\nComputed value    as specified\nAnimatable    no\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h3 id=\"values-4\"><a href=\"#values-4\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>none | all\n</code></pre><p>如：</p>\n<pre><code>h1, h2 {\n  column-span: all;\n}\n</code></pre><h2 id=\"7-column-width\"><a href=\"#7-column-width\" class=\"headerlink\" title=\"7 column-width\"></a>7 column-width</h2><p>column-width在没有column-count的情况下用来计算应该有多少列。比如容器的宽度为500px，column-gap为0，column-width设为400，则只能显示一列，且列的实际宽度为500px。如果column-width设为250px,则显示两列，每列宽度为250px。这时候将column-count设为1则显示一列，设为2显示两列，设为3还是显示两列。（所以应该是每列的最小宽度）</p>\n<h2 id=\"8-columns\"><a href=\"#8-columns\" class=\"headerlink\" title=\"8 columns\"></a>8 columns</h2><p>column-width，column-count的缩写</p>\n<pre><code>Initial value    as each of the properties of the shorthand:\ncolumn-width: auto\ncolumn-count: auto\nApplies to    non-replaced block elements (except table elements), table-cell or inline-block elements\nInherited    no\nMedia    visual\nComputed value    as each of the properties of the shorthand:\ncolumn-width: the absolute length, zero or larger\ncolumn-count: as specified\nAnimatable    as each of the properties of the shorthand:\ncolumn-width: yes, as a length\ncolumn-count: yes, as an integer\nCanonical order    order of appearance in the formal grammar of the values\n</code></pre><p>&lt;’column-width’&gt; || &lt;’column-count’&gt;</p>\n<p>演示 <a href=\"http://slygg.cn/shly/IFE/task_12/index.html\" target=\"_blank\" rel=\"external\">http://slygg.cn/shly/IFE/task_12/index.html</a></p>\n","excerpt":"<h1 id=\"主要属性\"><a href=\"#主要属性\" class=\"headerlink\" title=\"主要属性\"></a>主要属性</h1><h2 id=\"1-break-after、break-before、break-inside\"><a href=\"#1-break-after、break-before、break-inside\" class=\"headerlink\" title=\"1 break-after、break-before、break-inside\"></a>1 break-after、break-before、break-inside</h2><p>描述页面、列或者区域形成一个盒子后的中断行为（即是否中断以及如何中断），如果没有形成一个盒子，这个实行将会被忽略。<br>每一个可能的断点（即每一个元素的边界）都是受三个属性的影响：前一个元素的break-after值，下一个元素的break-before值，以包含元素的break-inside值。<br>","more":"<br>规定断点要遵循以下的规则：</p>\n<ol>\n<li>如果三个值中的任何一个值是强制中断值，即left, right, page, column 或者region，这个值具有优先级，如果有多个强制型的中断值同时出现，那么在流中最后一个出现的值生效。（即break-before的值的优先级高于break-after, break-after的优先级高于break-inside）</li>\n<li>这三个值中的任意一个是避免中断的值，即avoid, avoid-page, avoid-region, avoid-column，那么应用的地方就不会被中断。</li>\n</ol>\n<p>一旦应用了强制中断，当需要的时候可以添加软中断，但是不能应用在一个使用了aviod值的元素边界上。</p>\n<pre><code>Initial value    auto\nApplies to    block-level elements\nInherited    no\nMedia    paged\nComputed value    as specified\nAnimatable    no\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h3 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>auto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region\n</code></pre><h2 id=\"2-columns-count\"><a href=\"#2-columns-count\" class=\"headerlink\" title=\"2 columns-count\"></a>2 columns-count</h2><p>column-count属性描述元素列的个数。</p>\n<pre><code>Initial value    auto\nApplies to    non-replaced block elements (except table elements), table-cell or inline-block elements\nInherited    no\nMedia    visual\nComputed value    as specified\nAnimatable    yes, as an integer\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h2 id=\"3-column-fill\"><a href=\"#3-column-fill\" class=\"headerlink\" title=\"3 column-fill\"></a>3 column-fill</h2><p>column-fill属性描述内容是如何被分配到各列中的。</p>\n<h3 id=\"values-1\"><a href=\"#values-1\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>auto | balance\n</code></pre><p>balance:每行高度相同。<br>auto:只占据内容需要的空间。</p>\n<pre><code>Initial value    balance\nApplies to    multicol elements\nInherited    no\nMedia    visual, but, in continuous media, has no effect in overflow columns\nComputed value    as specified\nAnimatable    no\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h2 id=\"4-column-gap\"><a href=\"#4-column-gap\" class=\"headerlink\" title=\"4 column-gap\"></a>4 column-gap</h2><p>描述列之间的间距。</p>\n<h3 id=\"values-2\"><a href=\"#values-2\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>&lt;length&gt; | normal\n</code></pre><p>normal:浏览器默认间距</p>\n<pre><code>Initial value    normal\nApplies to    multicol elements\nInherited    no\nMedia    visual\nComputed value    the absolute length or the keyword normal\nAnimatable    yes, as a length\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h2 id=\"5-column-row\"><a href=\"#5-column-row\" class=\"headerlink\" title=\"5 column-row\"></a>5 column-row</h2><p>在多列布局中column-row指定指定列之间的分割线，是 column-rule-width, column-rule-style and column-rule-color.的简写形式。</p>\n<pre><code>Initial value    as each of the properties of the shorthand:\ncolumn-rule-width: medium\ncolumn-rule-style: none\ncolumn-rule-color: currentColor\nApplies to    multicol elements\nInherited    no\nMedia    visual\nComputed value    as each of the properties of the shorthand:\ncolumn-rule-color: If the value is translucent, the computed value will be the rgba() corresponding one. If it isn&apos;t, it will be the rgb() corresponding one. The transparent keyword maps to rgba(0,0,0,0).\ncolumn-rule-style: as specified\ncolumn-rule-width: the absolute length; 0 if the column-rule-style is none or hidden\nAnimatable    as each of the properties of the shorthand:\ncolumn-rule-color: yes, as a color\ncolumn-rule-style: no\ncolumn-rule-width: yes, as a length\nCanonical order    order of appearance in the formal grammar of the values\n</code></pre><h3 id=\"values-3\"><a href=\"#values-3\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>&lt;&apos;column-rule-width&apos;&gt;\n&lt;length&gt;|thin|medium|thick\n&lt;&apos;column-rule-style&apos;&gt;\nnone | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n&lt;&apos;column-rule-color&apos;&gt;\nIs a &lt;color&gt; value.\n</code></pre><p><em>取值相当于border</em></p>\n<h2 id=\"6-column-span\"><a href=\"#6-column-span\" class=\"headerlink\" title=\"6 column-span\"></a>6 column-span</h2><p>当一个元素的column-span属性被设置为all时，它可以让这个元素跨越所有列，当一个元素跨越超过一个列时，这个元素叫spanning element。</p>\n<pre><code>Initial value    none\nApplies to    in-flow block-level elements\nInherited    no\nMedia    visual\nComputed value    as specified\nAnimatable    no\nCanonical order    the unique non-ambiguous order defined by the formal grammar\n</code></pre><h3 id=\"values-4\"><a href=\"#values-4\" class=\"headerlink\" title=\"values\"></a>values</h3><pre><code>none | all\n</code></pre><p>如：</p>\n<pre><code>h1, h2 {\n  column-span: all;\n}\n</code></pre><h2 id=\"7-column-width\"><a href=\"#7-column-width\" class=\"headerlink\" title=\"7 column-width\"></a>7 column-width</h2><p>column-width在没有column-count的情况下用来计算应该有多少列。比如容器的宽度为500px，column-gap为0，column-width设为400，则只能显示一列，且列的实际宽度为500px。如果column-width设为250px,则显示两列，每列宽度为250px。这时候将column-count设为1则显示一列，设为2显示两列，设为3还是显示两列。（所以应该是每列的最小宽度）</p>\n<h2 id=\"8-columns\"><a href=\"#8-columns\" class=\"headerlink\" title=\"8 columns\"></a>8 columns</h2><p>column-width，column-count的缩写</p>\n<pre><code>Initial value    as each of the properties of the shorthand:\ncolumn-width: auto\ncolumn-count: auto\nApplies to    non-replaced block elements (except table elements), table-cell or inline-block elements\nInherited    no\nMedia    visual\nComputed value    as each of the properties of the shorthand:\ncolumn-width: the absolute length, zero or larger\ncolumn-count: as specified\nAnimatable    as each of the properties of the shorthand:\ncolumn-width: yes, as a length\ncolumn-count: yes, as an integer\nCanonical order    order of appearance in the formal grammar of the values\n</code></pre><p>&lt;’column-width’&gt; || &lt;’column-count’&gt;</p>\n<p>演示 <a href=\"http://slygg.cn/shly/IFE/task_12/index.html\">http://slygg.cn/shly/IFE/task_12/index.html</a></p>"},{"title":"二叉树遍历java版（递归与非递归）","date":"2016-06-14T02:50:34.000Z","_content":"今天复习了一下二叉树的遍历，包括递归与非递归形式，记录一下\n首先定义一个简单的二叉树结构，包括节点的值与左子节点和右子节点\n<!-- more -->\n\tpublic class TreeNode {\n\t\tint value;\n\t\tTreeNode left,right;\n\t\tpublic TreeNode(int value, TreeNode left, TreeNode right) {\n\t\t\tthis.value = value;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t}\n\t}\n下面是递归方式实现的，首先是先序遍历\n\n\tpublic void preOrder(TreeNode root) {\n\t\t\tif (root != null) {\n\t\t\t\tSystem.out.print(root.value);\n\t\t\t\tpreOrder(root.left);\n\t\t\t\tpreOrder(root.right);\n\t\t\t}\n\t\t}\n\n中序遍历\n\n\tpublic void inOrder(TreeNode root) {\n\t\t\tif (root != null) {\n\t\t\t\tinOrder(root.left);\n\t\t\t\tSystem.out.print(root.value);\n\t\t\t\tinOrder(root.right);\n\t\t\t}\n\t\t}\n\n后序遍历\n\npublic void postOrder(TreeNode root) {\n\t\tif (root != null) {\n\t\t\tpostOrder(root.left);\n\t\t\tpostOrder(root.right);\n\t\t\tSystem.out.print(root.value);\n\t\t}\n\t}\n\n递归的形式比较简单，就是调整三行代码的顺序，下面来看非递归的实现。首先是先序遍历\n\n\tpublic void preOrder1(TreeNode root) {\n\t\t\tStack<TreeNode> stack = new Stack<TreeNode>();\n\t\t\tif (root != null) {\n\t\t\t\tstack.add(root);\n\t\t\t\twhile (!stack.isEmpty()) {\n\t\t\t\t\tTreeNode p = stack.pop();\n\t\t\t\t\tSystem.out.print(p.value);\n\t\t\t\t\tif (p.right != null) {\n\t\t\t\t\t\tstack.add(p.right);\n\t\t\t\t\t}\n\t\t\t\t\tif (p.left != null) {\n\t\t\t\t\t\tstack.add(p.left);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n先序遍历是先遍历根节点，首先将根节点压入栈底，然后弹出，弹出时要记得输出。看当前根节点是否有右子节点，有则压入右子节点，为什么要先压入右子节点呢，原因是栈是先进后出，我们要先弹出左子节点，故要先压入右子节点。然后在看有没有左子节点，有则压入，现在栈里面有两个个节点，依次是左子节点和右子节点，这个时候弹出左子节点，将左子节点视为根节点，继续重复上面过程，左子节点都弹出之后在弹出右子节点，将右子节点视为根节点，继续重复以上步骤。\n\n下面看中序遍历的非递归形式\n\n\tpublic void inOrder1(TreeNode root) {\n\t\t\tStack<TreeNode> stack = new Stack<TreeNode>();\n\t\t\twhile (root != null || !stack.isEmpty()) {\n\t\t\t\tif (root != null) {\n\t\t\t\t\tstack.push(root);\n\t\t\t\t\troot = root.left;\n\t\t\t\t}else {\n\t\t\t\t\troot = stack.pop();\n\t\t\t\t\tSystem.out.print(root.value);\n\t\t\t\t\troot = root.right;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n最后是后序遍历的非递归形式\n\n\tpublic void postOrder1(TreeNode root) {\n\t\t\tStack<TreeNode> stack = new Stack<TreeNode>();\n\t\t    Stack<TreeNode> output = new Stack<TreeNode>();\n\t\t    TreeNode node = root;\n\t\t    while (node != null || !stack.empty()) {\n\t\t      if (node != null) {\n\t\t        output.push(node);\n\t\t        stack.push(node);\t\t\t\t\n\t\t        node = node.right;\n\t\t      } else {\n\t\t        node = stack.pop();\t\t\t\t\n\t\t        node = node.left;\n\t\t      }\n\t\t    }\n\t\t    while (output.size() > 0) {\n\t\t    \tSystem.out.print(output.pop().value);\n\t\t    }\n\t\t}\n\n","source":"_posts/bt.md","raw":"---\ntitle: 二叉树遍历java版（递归与非递归）\ndate: 2016-06-14 10:50:34\ntags: \n  - 数据结构\n  - 二叉树遍历\ncategories:\n  - 学习笔记\n  - 数据结构\n---\n今天复习了一下二叉树的遍历，包括递归与非递归形式，记录一下\n首先定义一个简单的二叉树结构，包括节点的值与左子节点和右子节点\n<!-- more -->\n\tpublic class TreeNode {\n\t\tint value;\n\t\tTreeNode left,right;\n\t\tpublic TreeNode(int value, TreeNode left, TreeNode right) {\n\t\t\tthis.value = value;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t}\n\t}\n下面是递归方式实现的，首先是先序遍历\n\n\tpublic void preOrder(TreeNode root) {\n\t\t\tif (root != null) {\n\t\t\t\tSystem.out.print(root.value);\n\t\t\t\tpreOrder(root.left);\n\t\t\t\tpreOrder(root.right);\n\t\t\t}\n\t\t}\n\n中序遍历\n\n\tpublic void inOrder(TreeNode root) {\n\t\t\tif (root != null) {\n\t\t\t\tinOrder(root.left);\n\t\t\t\tSystem.out.print(root.value);\n\t\t\t\tinOrder(root.right);\n\t\t\t}\n\t\t}\n\n后序遍历\n\npublic void postOrder(TreeNode root) {\n\t\tif (root != null) {\n\t\t\tpostOrder(root.left);\n\t\t\tpostOrder(root.right);\n\t\t\tSystem.out.print(root.value);\n\t\t}\n\t}\n\n递归的形式比较简单，就是调整三行代码的顺序，下面来看非递归的实现。首先是先序遍历\n\n\tpublic void preOrder1(TreeNode root) {\n\t\t\tStack<TreeNode> stack = new Stack<TreeNode>();\n\t\t\tif (root != null) {\n\t\t\t\tstack.add(root);\n\t\t\t\twhile (!stack.isEmpty()) {\n\t\t\t\t\tTreeNode p = stack.pop();\n\t\t\t\t\tSystem.out.print(p.value);\n\t\t\t\t\tif (p.right != null) {\n\t\t\t\t\t\tstack.add(p.right);\n\t\t\t\t\t}\n\t\t\t\t\tif (p.left != null) {\n\t\t\t\t\t\tstack.add(p.left);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n先序遍历是先遍历根节点，首先将根节点压入栈底，然后弹出，弹出时要记得输出。看当前根节点是否有右子节点，有则压入右子节点，为什么要先压入右子节点呢，原因是栈是先进后出，我们要先弹出左子节点，故要先压入右子节点。然后在看有没有左子节点，有则压入，现在栈里面有两个个节点，依次是左子节点和右子节点，这个时候弹出左子节点，将左子节点视为根节点，继续重复上面过程，左子节点都弹出之后在弹出右子节点，将右子节点视为根节点，继续重复以上步骤。\n\n下面看中序遍历的非递归形式\n\n\tpublic void inOrder1(TreeNode root) {\n\t\t\tStack<TreeNode> stack = new Stack<TreeNode>();\n\t\t\twhile (root != null || !stack.isEmpty()) {\n\t\t\t\tif (root != null) {\n\t\t\t\t\tstack.push(root);\n\t\t\t\t\troot = root.left;\n\t\t\t\t}else {\n\t\t\t\t\troot = stack.pop();\n\t\t\t\t\tSystem.out.print(root.value);\n\t\t\t\t\troot = root.right;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n最后是后序遍历的非递归形式\n\n\tpublic void postOrder1(TreeNode root) {\n\t\t\tStack<TreeNode> stack = new Stack<TreeNode>();\n\t\t    Stack<TreeNode> output = new Stack<TreeNode>();\n\t\t    TreeNode node = root;\n\t\t    while (node != null || !stack.empty()) {\n\t\t      if (node != null) {\n\t\t        output.push(node);\n\t\t        stack.push(node);\t\t\t\t\n\t\t        node = node.right;\n\t\t      } else {\n\t\t        node = stack.pop();\t\t\t\t\n\t\t        node = node.left;\n\t\t      }\n\t\t    }\n\t\t    while (output.size() > 0) {\n\t\t    \tSystem.out.print(output.pop().value);\n\t\t    }\n\t\t}\n\n","slug":"bt","published":1,"updated":"2016-06-14T03:10:58.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvwzo000aogsa8plajw9x","content":"<p>今天复习了一下二叉树的遍历，包括递归与非递归形式，记录一下<br>首先定义一个简单的二叉树结构，包括节点的值与左子节点和右子节点<br><a id=\"more\"></a><br>    public class TreeNode {<br>        int value;<br>        TreeNode left,right;<br>        public TreeNode(int value, TreeNode left, TreeNode right) {<br>            this.value = value;<br>            this.left = left;<br>            this.right = right;<br>        }<br>    }<br>下面是递归方式实现的，首先是先序遍历</p>\n<pre><code>public void preOrder(TreeNode root) {\n        if (root != null) {\n            System.out.print(root.value);\n            preOrder(root.left);\n            preOrder(root.right);\n        }\n    }\n</code></pre><p>中序遍历</p>\n<pre><code>public void inOrder(TreeNode root) {\n        if (root != null) {\n            inOrder(root.left);\n            System.out.print(root.value);\n            inOrder(root.right);\n        }\n    }\n</code></pre><p>后序遍历</p>\n<p>public void postOrder(TreeNode root) {<br>        if (root != null) {<br>            postOrder(root.left);<br>            postOrder(root.right);<br>            System.out.print(root.value);<br>        }<br>    }</p>\n<p>递归的形式比较简单，就是调整三行代码的顺序，下面来看非递归的实现。首先是先序遍历</p>\n<pre><code>public void preOrder1(TreeNode root) {\n        Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();\n        if (root != null) {\n            stack.add(root);\n            while (!stack.isEmpty()) {\n                TreeNode p = stack.pop();\n                System.out.print(p.value);\n                if (p.right != null) {\n                    stack.add(p.right);\n                }\n                if (p.left != null) {\n                    stack.add(p.left);\n                }\n            }\n        }\n    }\n</code></pre><p>先序遍历是先遍历根节点，首先将根节点压入栈底，然后弹出，弹出时要记得输出。看当前根节点是否有右子节点，有则压入右子节点，为什么要先压入右子节点呢，原因是栈是先进后出，我们要先弹出左子节点，故要先压入右子节点。然后在看有没有左子节点，有则压入，现在栈里面有两个个节点，依次是左子节点和右子节点，这个时候弹出左子节点，将左子节点视为根节点，继续重复上面过程，左子节点都弹出之后在弹出右子节点，将右子节点视为根节点，继续重复以上步骤。</p>\n<p>下面看中序遍历的非递归形式</p>\n<pre><code>public void inOrder1(TreeNode root) {\n        Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();\n        while (root != null || !stack.isEmpty()) {\n            if (root != null) {\n                stack.push(root);\n                root = root.left;\n            }else {\n                root = stack.pop();\n                System.out.print(root.value);\n                root = root.right;\n            }\n        }\n    }\n</code></pre><p>最后是后序遍历的非递归形式</p>\n<pre><code>public void postOrder1(TreeNode root) {\n        Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();\n        Stack&lt;TreeNode&gt; output = new Stack&lt;TreeNode&gt;();\n        TreeNode node = root;\n        while (node != null || !stack.empty()) {\n          if (node != null) {\n            output.push(node);\n            stack.push(node);                \n            node = node.right;\n          } else {\n            node = stack.pop();                \n            node = node.left;\n          }\n        }\n        while (output.size() &gt; 0) {\n            System.out.print(output.pop().value);\n        }\n    }\n</code></pre>","excerpt":"<p>今天复习了一下二叉树的遍历，包括递归与非递归形式，记录一下<br>首先定义一个简单的二叉树结构，包括节点的值与左子节点和右子节点<br>","more":"<br>    public class TreeNode {<br>        int value;<br>        TreeNode left,right;<br>        public TreeNode(int value, TreeNode left, TreeNode right) {<br>            this.value = value;<br>            this.left = left;<br>            this.right = right;<br>        }<br>    }<br>下面是递归方式实现的，首先是先序遍历</p>\n<pre><code>public void preOrder(TreeNode root) {\n        if (root != null) {\n            System.out.print(root.value);\n            preOrder(root.left);\n            preOrder(root.right);\n        }\n    }\n</code></pre><p>中序遍历</p>\n<pre><code>public void inOrder(TreeNode root) {\n        if (root != null) {\n            inOrder(root.left);\n            System.out.print(root.value);\n            inOrder(root.right);\n        }\n    }\n</code></pre><p>后序遍历</p>\n<p>public void postOrder(TreeNode root) {<br>        if (root != null) {<br>            postOrder(root.left);<br>            postOrder(root.right);<br>            System.out.print(root.value);<br>        }<br>    }</p>\n<p>递归的形式比较简单，就是调整三行代码的顺序，下面来看非递归的实现。首先是先序遍历</p>\n<pre><code>public void preOrder1(TreeNode root) {\n        Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();\n        if (root != null) {\n            stack.add(root);\n            while (!stack.isEmpty()) {\n                TreeNode p = stack.pop();\n                System.out.print(p.value);\n                if (p.right != null) {\n                    stack.add(p.right);\n                }\n                if (p.left != null) {\n                    stack.add(p.left);\n                }\n            }\n        }\n    }\n</code></pre><p>先序遍历是先遍历根节点，首先将根节点压入栈底，然后弹出，弹出时要记得输出。看当前根节点是否有右子节点，有则压入右子节点，为什么要先压入右子节点呢，原因是栈是先进后出，我们要先弹出左子节点，故要先压入右子节点。然后在看有没有左子节点，有则压入，现在栈里面有两个个节点，依次是左子节点和右子节点，这个时候弹出左子节点，将左子节点视为根节点，继续重复上面过程，左子节点都弹出之后在弹出右子节点，将右子节点视为根节点，继续重复以上步骤。</p>\n<p>下面看中序遍历的非递归形式</p>\n<pre><code>public void inOrder1(TreeNode root) {\n        Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();\n        while (root != null || !stack.isEmpty()) {\n            if (root != null) {\n                stack.push(root);\n                root = root.left;\n            }else {\n                root = stack.pop();\n                System.out.print(root.value);\n                root = root.right;\n            }\n        }\n    }\n</code></pre><p>最后是后序遍历的非递归形式</p>\n<pre><code>public void postOrder1(TreeNode root) {\n        Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();\n        Stack&lt;TreeNode&gt; output = new Stack&lt;TreeNode&gt;();\n        TreeNode node = root;\n        while (node != null || !stack.empty()) {\n          if (node != null) {\n            output.push(node);\n            stack.push(node);                \n            node = node.right;\n          } else {\n            node = stack.pop();                \n            node = node.left;\n          }\n        }\n        while (output.size() &gt; 0) {\n            System.out.print(output.pop().value);\n        }\n    }\n</code></pre>"},{"title":"css3选择器整理","date":"2016-05-03T08:17:58.000Z","_content":"### 一 基本选择器（基本兼容所有浏览器）\n\n通配选择器 *\n元素选择器 E\n类选择器 .class\nID选择器 #id\n组群选择器\n<!-- more -->\n### 二 层次选择器\n\nE F 后代选择器 （基本兼容所有浏览器）\nE>F 子选择器 （ie7+）\nE+F 相邻兄弟选择器（ie7+）\nE~F 通用选择器匹配位于元素E之后的所有F元素（ie7+）\n\n### 三 伪类选择器\n\n1. 动态伪类选择器:link,:visited,:hover,:active, :focus\n2. 目标伪类选择器:target\n3. 语言伪类选择器E:lang(language)（ie8+）\n4. UI元素状态伪类选择器E:checked E:enabled E:disabled（ie9+）\n5. 结构伪类选择器（ie9+）\n\n 5.1 E:first-child\n 5.2 E:last-child\n 5.3 E:root在html文档中始终为html\n 5.4 E F:nth-child(n) n的起始值为1 F的父元素的第二个子元素\n 5.5 E F:nth-last-child(n)\n 5.6 E:nth-of-type(n)选择父元素内具有指定类型的第n个E元素\n 5.7 E:nth-of-type(n)选择父元素内具有指定类型的倒数第n个E元素\n 5.8 E:first-of-type\n 5.9 E:last-of-type\n 5.10 E:empty\n 5.11 E:only-child父元素只包含一个子元素，且该子元素匹配E元素\n 5.12 E:only-of-type父元素只包含一个同类型的子元素，且该子元素匹配E元素\n\n6. 否定伪类选择器:not()(ie9+)\n\n### 四 伪元素\n\n:first-line,:first-letter,:before,:after，为了与伪类进行区分，CSS3中对此进行了调整，由单冒号变成了双冒号，\n\n::first-line,::first-letter,::before,::after另外新增加了一个伪元素::selection，用于匹配突出显示的文本。\n\n::selection仅接收两个属性 background和color。 ie系列中只有ie9支持，FireFox需要加上其私有属性-moz\n\n如：\n\n\t\t::selection{\n\t\tbackground-color:red;\n\t\tcolor:#FFFFFF;\n\t\t}\n\t\t::-moz-selection{\n\t\tbackground-color:red;\n\t\tcolor:#FFFFFF;\n\t\t}\n\n\n### 五  属性选择器（ie7+）\n\nE[attr]具有attr属性的元素\nE[attr = val]\nE[attr |= val]具有val或者以val-开头\nE[attr ~= val] attr有多个空格分隔的值其中一个为val\nE[attr*=val]attr的任意位置包含了val\nE[attr^=val]属性值以val开头\nE[attr$=val]属性以val结尾\n选择器优先级：\n\n !important>内联>id>class>tag\n\n组合使用选择器的情况下，选择器的权重计算方式为：\n\n标签的权重为1，class的权重为10，id的权重为100\n\n如\n\n\t\tdiv //权重为1\n\t\t.A  //权重为10\n\t\t#A //权重为100\n\t\tdiv.A //权重为11\n相同权重的情况下后面定义的样式会覆盖前面定义的样式，但与html中class的定义的先后无关。如\n\n\t\t<div>\n\t\t    <p class = \"B A\">这里面是文字</p>\n\t\t</div>\n\t\t.A{\n\t\tcolor:red;}\n\t\t.B{\n\t\tcolor:blue;\n\t\t}\n这时因为B的样式信息比A后定义，所以样式信息B会覆盖样式信息A，所以p中的文字会显示为蓝色。与AB在class中定义的顺序无关。\n","source":"_posts/css3选择器整理.md","raw":"---\ntitle: css3选择器整理\ndate: 2016-05-03 16:17:58\ntags: \n  - css3\n  - css3选择器\ncategories:\n  - 学习笔记\n  - 前端学习\n---\n### 一 基本选择器（基本兼容所有浏览器）\n\n通配选择器 *\n元素选择器 E\n类选择器 .class\nID选择器 #id\n组群选择器\n<!-- more -->\n### 二 层次选择器\n\nE F 后代选择器 （基本兼容所有浏览器）\nE>F 子选择器 （ie7+）\nE+F 相邻兄弟选择器（ie7+）\nE~F 通用选择器匹配位于元素E之后的所有F元素（ie7+）\n\n### 三 伪类选择器\n\n1. 动态伪类选择器:link,:visited,:hover,:active, :focus\n2. 目标伪类选择器:target\n3. 语言伪类选择器E:lang(language)（ie8+）\n4. UI元素状态伪类选择器E:checked E:enabled E:disabled（ie9+）\n5. 结构伪类选择器（ie9+）\n\n 5.1 E:first-child\n 5.2 E:last-child\n 5.3 E:root在html文档中始终为html\n 5.4 E F:nth-child(n) n的起始值为1 F的父元素的第二个子元素\n 5.5 E F:nth-last-child(n)\n 5.6 E:nth-of-type(n)选择父元素内具有指定类型的第n个E元素\n 5.7 E:nth-of-type(n)选择父元素内具有指定类型的倒数第n个E元素\n 5.8 E:first-of-type\n 5.9 E:last-of-type\n 5.10 E:empty\n 5.11 E:only-child父元素只包含一个子元素，且该子元素匹配E元素\n 5.12 E:only-of-type父元素只包含一个同类型的子元素，且该子元素匹配E元素\n\n6. 否定伪类选择器:not()(ie9+)\n\n### 四 伪元素\n\n:first-line,:first-letter,:before,:after，为了与伪类进行区分，CSS3中对此进行了调整，由单冒号变成了双冒号，\n\n::first-line,::first-letter,::before,::after另外新增加了一个伪元素::selection，用于匹配突出显示的文本。\n\n::selection仅接收两个属性 background和color。 ie系列中只有ie9支持，FireFox需要加上其私有属性-moz\n\n如：\n\n\t\t::selection{\n\t\tbackground-color:red;\n\t\tcolor:#FFFFFF;\n\t\t}\n\t\t::-moz-selection{\n\t\tbackground-color:red;\n\t\tcolor:#FFFFFF;\n\t\t}\n\n\n### 五  属性选择器（ie7+）\n\nE[attr]具有attr属性的元素\nE[attr = val]\nE[attr |= val]具有val或者以val-开头\nE[attr ~= val] attr有多个空格分隔的值其中一个为val\nE[attr*=val]attr的任意位置包含了val\nE[attr^=val]属性值以val开头\nE[attr$=val]属性以val结尾\n选择器优先级：\n\n !important>内联>id>class>tag\n\n组合使用选择器的情况下，选择器的权重计算方式为：\n\n标签的权重为1，class的权重为10，id的权重为100\n\n如\n\n\t\tdiv //权重为1\n\t\t.A  //权重为10\n\t\t#A //权重为100\n\t\tdiv.A //权重为11\n相同权重的情况下后面定义的样式会覆盖前面定义的样式，但与html中class的定义的先后无关。如\n\n\t\t<div>\n\t\t    <p class = \"B A\">这里面是文字</p>\n\t\t</div>\n\t\t.A{\n\t\tcolor:red;}\n\t\t.B{\n\t\tcolor:blue;\n\t\t}\n这时因为B的样式信息比A后定义，所以样式信息B会覆盖样式信息A，所以p中的文字会显示为蓝色。与AB在class中定义的顺序无关。\n","slug":"css3选择器整理","published":1,"updated":"2016-06-14T02:46:19.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx03000dogsad9ib6r6q","content":"<h3 id=\"一-基本选择器（基本兼容所有浏览器）\"><a href=\"#一-基本选择器（基本兼容所有浏览器）\" class=\"headerlink\" title=\"一 基本选择器（基本兼容所有浏览器）\"></a>一 基本选择器（基本兼容所有浏览器）</h3><p>通配选择器 *<br>元素选择器 E<br>类选择器 .class<br>ID选择器 #id<br>组群选择器<br><a id=\"more\"></a></p>\n<h3 id=\"二-层次选择器\"><a href=\"#二-层次选择器\" class=\"headerlink\" title=\"二 层次选择器\"></a>二 层次选择器</h3><p>E F 后代选择器 （基本兼容所有浏览器）<br>E&gt;F 子选择器 （ie7+）<br>E+F 相邻兄弟选择器（ie7+）<br>E~F 通用选择器匹配位于元素E之后的所有F元素（ie7+）</p>\n<h3 id=\"三-伪类选择器\"><a href=\"#三-伪类选择器\" class=\"headerlink\" title=\"三 伪类选择器\"></a>三 伪类选择器</h3><ol>\n<li>动态伪类选择器:link,:visited,:hover,:active, :focus</li>\n<li>目标伪类选择器:target</li>\n<li>语言伪类选择器E:lang(language)（ie8+）</li>\n<li>UI元素状态伪类选择器E:checked E:enabled E:disabled（ie9+）</li>\n<li><p>结构伪类选择器（ie9+）</p>\n<p>5.1 E:first-child<br>5.2 E:last-child<br>5.3 E:root在html文档中始终为html<br>5.4 E F:nth-child(n) n的起始值为1 F的父元素的第二个子元素<br>5.5 E F:nth-last-child(n)<br>5.6 E:nth-of-type(n)选择父元素内具有指定类型的第n个E元素<br>5.7 E:nth-of-type(n)选择父元素内具有指定类型的倒数第n个E元素<br>5.8 E:first-of-type<br>5.9 E:last-of-type<br>5.10 E:empty<br>5.11 E:only-child父元素只包含一个子元素，且该子元素匹配E元素<br>5.12 E:only-of-type父元素只包含一个同类型的子元素，且该子元素匹配E元素</p>\n</li>\n<li><p>否定伪类选择器:not()(ie9+)</p>\n</li>\n</ol>\n<h3 id=\"四-伪元素\"><a href=\"#四-伪元素\" class=\"headerlink\" title=\"四 伪元素\"></a>四 伪元素</h3><p>:first-line,:first-letter,:before,:after，为了与伪类进行区分，CSS3中对此进行了调整，由单冒号变成了双冒号，</p>\n<p>::first-line,::first-letter,::before,::after另外新增加了一个伪元素::selection，用于匹配突出显示的文本。</p>\n<p>::selection仅接收两个属性 background和color。 ie系列中只有ie9支持，FireFox需要加上其私有属性-moz</p>\n<p>如：</p>\n<pre><code>::selection{\nbackground-color:red;\ncolor:#FFFFFF;\n}\n::-moz-selection{\nbackground-color:red;\ncolor:#FFFFFF;\n}\n</code></pre><h3 id=\"五-属性选择器（ie7-）\"><a href=\"#五-属性选择器（ie7-）\" class=\"headerlink\" title=\"五  属性选择器（ie7+）\"></a>五  属性选择器（ie7+）</h3><p>E[attr]具有attr属性的元素<br>E[attr = val]<br>E[attr |= val]具有val或者以val-开头<br>E[attr ~= val] attr有多个空格分隔的值其中一个为val<br>E[attr*=val]attr的任意位置包含了val<br>E[attr^=val]属性值以val开头<br>E[attr$=val]属性以val结尾<br>选择器优先级：</p>\n<p> !important&gt;内联&gt;id&gt;class&gt;tag</p>\n<p>组合使用选择器的情况下，选择器的权重计算方式为：</p>\n<p>标签的权重为1，class的权重为10，id的权重为100</p>\n<p>如</p>\n<pre><code>div //权重为1\n.A  //权重为10\n#A //权重为100\ndiv.A //权重为11\n</code></pre><p>相同权重的情况下后面定义的样式会覆盖前面定义的样式，但与html中class的定义的先后无关。如</p>\n<pre><code>&lt;div&gt;\n    &lt;p class = &quot;B A&quot;&gt;这里面是文字&lt;/p&gt;\n&lt;/div&gt;\n.A{\ncolor:red;}\n.B{\ncolor:blue;\n}\n</code></pre><p>这时因为B的样式信息比A后定义，所以样式信息B会覆盖样式信息A，所以p中的文字会显示为蓝色。与AB在class中定义的顺序无关。</p>\n","excerpt":"<h3 id=\"一-基本选择器（基本兼容所有浏览器）\"><a href=\"#一-基本选择器（基本兼容所有浏览器）\" class=\"headerlink\" title=\"一 基本选择器（基本兼容所有浏览器）\"></a>一 基本选择器（基本兼容所有浏览器）</h3><p>通配选择器 *<br>元素选择器 E<br>类选择器 .class<br>ID选择器 #id<br>组群选择器<br>","more":"</p>\n<h3 id=\"二-层次选择器\"><a href=\"#二-层次选择器\" class=\"headerlink\" title=\"二 层次选择器\"></a>二 层次选择器</h3><p>E F 后代选择器 （基本兼容所有浏览器）<br>E&gt;F 子选择器 （ie7+）<br>E+F 相邻兄弟选择器（ie7+）<br>E~F 通用选择器匹配位于元素E之后的所有F元素（ie7+）</p>\n<h3 id=\"三-伪类选择器\"><a href=\"#三-伪类选择器\" class=\"headerlink\" title=\"三 伪类选择器\"></a>三 伪类选择器</h3><ol>\n<li>动态伪类选择器:link,:visited,:hover,:active, :focus</li>\n<li>目标伪类选择器:target</li>\n<li>语言伪类选择器E:lang(language)（ie8+）</li>\n<li>UI元素状态伪类选择器E:checked E:enabled E:disabled（ie9+）</li>\n<li><p>结构伪类选择器（ie9+）</p>\n<p>5.1 E:first-child<br>5.2 E:last-child<br>5.3 E:root在html文档中始终为html<br>5.4 E F:nth-child(n) n的起始值为1 F的父元素的第二个子元素<br>5.5 E F:nth-last-child(n)<br>5.6 E:nth-of-type(n)选择父元素内具有指定类型的第n个E元素<br>5.7 E:nth-of-type(n)选择父元素内具有指定类型的倒数第n个E元素<br>5.8 E:first-of-type<br>5.9 E:last-of-type<br>5.10 E:empty<br>5.11 E:only-child父元素只包含一个子元素，且该子元素匹配E元素<br>5.12 E:only-of-type父元素只包含一个同类型的子元素，且该子元素匹配E元素</p>\n</li>\n<li><p>否定伪类选择器:not()(ie9+)</p>\n</li>\n</ol>\n<h3 id=\"四-伪元素\"><a href=\"#四-伪元素\" class=\"headerlink\" title=\"四 伪元素\"></a>四 伪元素</h3><p>:first-line,:first-letter,:before,:after，为了与伪类进行区分，CSS3中对此进行了调整，由单冒号变成了双冒号，</p>\n<p>::first-line,::first-letter,::before,::after另外新增加了一个伪元素::selection，用于匹配突出显示的文本。</p>\n<p>::selection仅接收两个属性 background和color。 ie系列中只有ie9支持，FireFox需要加上其私有属性-moz</p>\n<p>如：</p>\n<pre><code>::selection{\nbackground-color:red;\ncolor:#FFFFFF;\n}\n::-moz-selection{\nbackground-color:red;\ncolor:#FFFFFF;\n}\n</code></pre><h3 id=\"五-属性选择器（ie7-）\"><a href=\"#五-属性选择器（ie7-）\" class=\"headerlink\" title=\"五  属性选择器（ie7+）\"></a>五  属性选择器（ie7+）</h3><p>E[attr]具有attr属性的元素<br>E[attr = val]<br>E[attr |= val]具有val或者以val-开头<br>E[attr ~= val] attr有多个空格分隔的值其中一个为val<br>E[attr*=val]attr的任意位置包含了val<br>E[attr^=val]属性值以val开头<br>E[attr$=val]属性以val结尾<br>选择器优先级：</p>\n<p> !important&gt;内联&gt;id&gt;class&gt;tag</p>\n<p>组合使用选择器的情况下，选择器的权重计算方式为：</p>\n<p>标签的权重为1，class的权重为10，id的权重为100</p>\n<p>如</p>\n<pre><code>div //权重为1\n.A  //权重为10\n#A //权重为100\ndiv.A //权重为11\n</code></pre><p>相同权重的情况下后面定义的样式会覆盖前面定义的样式，但与html中class的定义的先后无关。如</p>\n<pre><code>&lt;div&gt;\n    &lt;p class = &quot;B A&quot;&gt;这里面是文字&lt;/p&gt;\n&lt;/div&gt;\n.A{\ncolor:red;}\n.B{\ncolor:blue;\n}\n</code></pre><p>这时因为B的样式信息比A后定义，所以样式信息B会覆盖样式信息A，所以p中的文字会显示为蓝色。与AB在class中定义的顺序无关。</p>"},{"title":".gitignore配置","date":"2016-04-27T14:37:18.000Z","_content":"  首先，windows下，在根目录下创建一个文件***.gitignore.***,注意末尾还有个点。但是保存之后系统会自动重命名为***.gitignore。这个文件创建的目的就是告诉Git哪些文件不需要被添加到版本管理中。下面简要介绍下文件的配置规则：\n  <!-- more -->\n  1. 以斜杠“/”开头表示目录；\n  2. 以星号“*”通配多个字符；\n  3. 以问号“?”通配单个字符\n  4. 以方括号“[]”包含单个字符的匹配列表；\n  5. 以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；\n","source":"_posts/gitignore配置.md","raw":"---\ntitle: .gitignore配置\ndate: 2016-04-27 22:37:18\ntags: \n  - git\n  - gitignore配置\ncategories:\n  - 学习笔记\n  - git学习\n---\n  首先，windows下，在根目录下创建一个文件***.gitignore.***,注意末尾还有个点。但是保存之后系统会自动重命名为***.gitignore。这个文件创建的目的就是告诉Git哪些文件不需要被添加到版本管理中。下面简要介绍下文件的配置规则：\n  <!-- more -->\n  1. 以斜杠“/”开头表示目录；\n  2. 以星号“*”通配多个字符；\n  3. 以问号“?”通配单个字符\n  4. 以方括号“[]”包含单个字符的匹配列表；\n  5. 以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；\n","slug":"gitignore配置","published":1,"updated":"2016-06-14T02:46:19.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx09000eogsa7ac5gqju","content":"<p>  首先，windows下，在根目录下创建一个文件<strong><em>.gitignore.</em></strong>,注意末尾还有个点。但是保存之后系统会自动重命名为<em>*</em>.gitignore。这个文件创建的目的就是告诉Git哪些文件不需要被添加到版本管理中。下面简要介绍下文件的配置规则：<br>  <a id=\"more\"></a></p>\n<ol>\n<li>以斜杠“/”开头表示目录；</li>\n<li>以星号“*”通配多个字符；</li>\n<li>以问号“?”通配单个字符</li>\n<li>以方括号“[]”包含单个字符的匹配列表；</li>\n<li>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</li>\n</ol>\n","excerpt":"<p>  首先，windows下，在根目录下创建一个文件<strong><em>.gitignore.</em></strong>,注意末尾还有个点。但是保存之后系统会自动重命名为<em>*</em>.gitignore。这个文件创建的目的就是告诉Git哪些文件不需要被添加到版本管理中。下面简要介绍下文件的配置规则：<br>","more":"</p>\n<ol>\n<li>以斜杠“/”开头表示目录；</li>\n<li>以星号“*”通配多个字符；</li>\n<li>以问号“?”通配单个字符</li>\n<li>以方括号“[]”包含单个字符的匹配列表；</li>\n<li>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</li>\n</ol>"},{"title":"FlexBox学习笔记","date":"2016-05-13T07:41:17.000Z","_content":"Flex的出现是为了解决布局问题，使用flex布局很灵活，容器子元素的排列方式，对齐方式，显示顺序等都可以很方便的指定。目前处于非正式标准，但是新的浏览器基本上都支持。\n<!-- more -->\nFlexBox是一个布局模块，不是一个简单的布局属性，它包含父元素和子元素的属性。flex布局主要依赖于flex direction。\n## 主要术语\n\n1. 主轴、主轴方向(main axis |main dimension)：用户代理沿着一个伸缩容器的主轴配置伸缩项目，主轴是主轴方向的延伸。\n2. 主轴起点、主轴终点(main-start |main-end)：伸缩项目的配置从容器的主轴起点边开始，往主轴终点边结束。\n3. 主轴长度、主轴长度属性(main size |main size property)：伸缩项目的在主轴方向的宽度或高度就是项目的主轴长度，伸缩项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。\n4. 侧轴、侧轴方向(cross axis |cross dimension)：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。\n5. 侧轴起点、侧轴终点(cross-start |cross-end)：填满项目的伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。\n6. 侧轴长度、侧轴长度属性(cross size |cross size property)：伸缩项目的在侧轴方向的宽度或高度就是项目的侧轴长度，伸缩项目的侧轴长度属性是\"width\"或\"height\"属性，由哪一个对着侧轴方向决定。\n\n## 主要属性\n\n1. display(flex container)\n\n\t\tdisplay: other values | flex | inline-flex;\n2. flex-direction(flex container)\n\n\t\tflex-direction: row | row-reverse | column | column-reverse\n3. order（flex items）\n默认情况下，伸缩项目是按照文档流出现先后顺序排列。然而，“order”属性可以控制伸缩项目在他们的伸缩容器出现的顺序。\n\n\t\torder: <integer> \n4. flex-wrap（flex container）\n这个主要用来定义伸缩容器里是单行还是多行显示，侧轴的方向决定了新行堆放的方向。\n\n\t\tflex-wrap: nowrap | wrap | wrap-reverse\n5. flex-flow（flex container）\n这个是“flex-direction”和“flex-wrap”属性的缩写版本。同时定义了伸缩容器的主轴和侧轴。其默认值为“row nowrap”。\n\n\t\tflex-flow: <‘flex-direction’> || <‘flex-wrap’>\n6. justify-content（flex container）\n这个是用来定义伸缩项目沿着主轴线的对齐方式。当一行上的所有伸缩项目都不能伸缩或可伸缩但是已经达到其最大长度时，这一属性才会对多余的空间进行分配。当项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制。\n\n\t\tjustify-content: flex-start | flex-end | center | space-between | space-around;\n7. align-content（flex container）\n这个属性主要用来调准伸缩行在伸缩容器里的对齐方式。类似于伸缩项目在主轴上使用“justify-content”一样。（侧轴方向的对齐方式）*容器内必须有多行的项目，该属性才能渲染出效果*。\n\n\t\talign-content: flex-start | flex-end | center | space-between | space-around | stretch;\n8. align-items（flex container）\n\n\t\talign-items: flex-start | flex-end | center | baseline | stretch\n9. align-self（flex items）\n用来在单独的伸缩项目上覆写默认的对齐方式。\n\n\t\talign-self: auto | flex-start | flex-end | center | baseline | stretch;\n10. flex-grow（flex items）\n根据需要用来定义伸缩项目的扩展能力。它接受一个不带单位的值做为一个*比例*。主要用来决定伸缩容器剩余空间按比例应扩展多少空间。\n\n\t\tflex-grow: <number>; /* default 0 */\n如果所有伸缩项目的“flex-grow”设置了“1”，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了“flex-grow”值为“2”，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的两倍。\n11. flex-shrink(flex items)\n根据需要用来定义伸缩项目收缩的能力。负值无效。\n\n\t\tflex-shrink: <number>; /* default 1 */\n12. flex-basis（flex items）\n这个用来设置伸缩基准值，剩余的空间按比率进行伸缩。\n\n\t\tflex-basis: <length> | auto; /* default auto */\n如果设置为“0”，不考虑剩余空白空间。如果设置为自动，则按照flex-grow值分配剩余空白空间。\n13. flex（flex items）\n这是“flex-grow”、“flex-shrink”和“flex-basis”三个属性的缩写。其中第二个和第三个参数（flex-shrink、flex-basis）是可选参数。默认值为“0 1 auto”。\n\n\t\tflex: none | [ <'flex-grow'> <'flex-shrink'>|| <'flex-basis'> ]\n\n## 实例讲解\n\n这几个都是对齐方式，为了方便演示，\n1. 先将几个box设置为长宽各不相同，在没有设置布局方式的时候，盒子应该从上往下依次排列。\n\n\t\t.box-5{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t}\n\t\t.box-6{\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t}\n\t\t.box-7{\n\t\t\twidth: 300px;\n\t\t\theight: 300px;\n\t\t}\n\t\t.box-8{\n\t\t\twidth: 400px;\n\t\t\theight: 400px;\n\t\t}\n\t\t.container_1{\n\t\t\twidth: 2000px;\n\t\t\theight: 800px;\n\t\t\tborder: 1px solid #00F;\n\t\t}\n2. 将父元素的布局方式设为display:flex之后，子元素的四个盒子显示到同一排，如图。因为如果没有设置其他的属性，flexbox布局方式中默认flex-direction为row，即从左向右的方式排列。justify-content默认为flex-start，即向一行的起始位置靠齐。因为flexdirection为从左向右，则box应该向左靠齐。\n![flex](/img/flex/2.jpg)\n3. 改变父元素的justify-content，如改为center，我们看一下布局会变为什么样子。可以看到盒子整体在父元素中居中。\n![justify-content](/img/flex/3.jpg)\n4. 接下来设置下order。\n\n\t\tdiv.box-5{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\torder: 1;\n\t\t}\n\t\tdiv.box-6{\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\torder: 5;\n\t\t}\n\t\tdiv.box-7{\n\t\t\twidth: 300px;\n\t\t\theight: 300px;\n\t\t\torder: 3;\n\t\t}\n\t\tdiv.box-8{\n\t\t\twidth: 400px;\n\t\t\theight: 400px;\n\t\t\torder: -1;\n\t\t}\n结果如图。\n![order](/img/flex/4.jpg)\n可见，order按大小排序，负数也可以。\n5. 使用align-items,设置为align-items: flex-end，box的显示方式如图。可见align-items设置的是各行元素间的对齐方式。\n![align-items](/img/flex/5.jpg)\n6. 接下来我们对单独的一个box设置align-self属性，如\n\n\t\tdiv.box-8{\n\t\t\twidth: 400px;\n\t\t\theight: 400px;\n\t\t\torder: -1;\n\t\t\talign-self: flex-start;\n\t\t}\n结果如图，很明显align-self属性设置的是单独的一个box的对齐方式。\n![align-self](/img/flex/6.jpg)\n7. 设置其中一个box的flex-grow为1，则这个box将忽略本身的width属性，占满父元素剩下的全部空间，可以用于自适应布局中，如图。\n![flex-grow](/img/flex/7.jpg)\n将所有的box的flex-grow都设为1，则将剩余空间的宽度分为4分，然后分别加到各个盒子上。\n8. flex-basis，当为数值时与width类似，会覆盖元素本身的width。设为其他数值，就相当于元素的宽度在这个值得基础上加，如剩余空间为100，四个box的flex-grow都设为1，假如原来四个盒子的flex-basis均为30px,则现在各个盒子的宽度均为55px。\n9. flex-shrink\n该属性来设置，当父元素的宽度小于所有子元素的宽度的和时（即子元素会超出父元素），子元素如何缩小自己的宽度的。\nflex-shrink的默认值为1，当父元素的宽度小于所有子元素的宽度的和时，子元素的宽度会减小。值越大，减小的越厉害。如果值为0，表示不减小。\n\n\t\tdiv.container_2{\n\t\t\twidth: 1000px;\n\t\t\theight: 800px;\n\t\t\tborder: 1px solid #00F;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-content: flex-end;\n\t\t\talign-items: flex-end;\n\t\t}\n\t\tdiv.box-9{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 100px;\n\t\t}\n\t\tdiv.box-10{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 200px;\n\t\t}\n\t\tdiv.box-11{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 300px;\n\t\t}\n\t\tdiv.box-12{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 400px;\n\t\t}\n因为默认为1，则四个box收缩相同的宽度，不会溢出，且收缩之后box的宽度还相同。如图。\n![flex-basis](/img/flex/8.jpg)\n下面改一下各个box的flex-shrink值\n\t\tdiv.box-9{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 100px;\n\t\t\tflex-shrink: 1;\n\t\t}\n\t\tdiv.box-10{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 200px;\n\t\t\tflex-shrink: 2;\n\t\t}\n\t\tdiv.box-11{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 300px;\n\t\t\tflex-shrink: 3;\n\t\t}\n\t\tdiv.box-12{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 400px;\n\t\t\tflex-shrink: 4;\n\t\t}\n则盒子将按照1/(1+2+3+4),2/(1+2+3+4),3/(1+2+3+4),4/(1+2+3+4)的比例缩小。如图。\n![flex-basis](/img/flex/9.jpg)\n演示链接\nhttp://shly.github.io/shly/IFE/task_10/index.html","source":"_posts/flex.md","raw":"---\ntitle: FlexBox学习笔记\ndate: 2016-05-13 15:41:17\ntags: \n  - css3\n  - FlexBox\ncategories:\n  - 学习笔记\n  - 前端学习\n---\nFlex的出现是为了解决布局问题，使用flex布局很灵活，容器子元素的排列方式，对齐方式，显示顺序等都可以很方便的指定。目前处于非正式标准，但是新的浏览器基本上都支持。\n<!-- more -->\nFlexBox是一个布局模块，不是一个简单的布局属性，它包含父元素和子元素的属性。flex布局主要依赖于flex direction。\n## 主要术语\n\n1. 主轴、主轴方向(main axis |main dimension)：用户代理沿着一个伸缩容器的主轴配置伸缩项目，主轴是主轴方向的延伸。\n2. 主轴起点、主轴终点(main-start |main-end)：伸缩项目的配置从容器的主轴起点边开始，往主轴终点边结束。\n3. 主轴长度、主轴长度属性(main size |main size property)：伸缩项目的在主轴方向的宽度或高度就是项目的主轴长度，伸缩项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。\n4. 侧轴、侧轴方向(cross axis |cross dimension)：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。\n5. 侧轴起点、侧轴终点(cross-start |cross-end)：填满项目的伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。\n6. 侧轴长度、侧轴长度属性(cross size |cross size property)：伸缩项目的在侧轴方向的宽度或高度就是项目的侧轴长度，伸缩项目的侧轴长度属性是\"width\"或\"height\"属性，由哪一个对着侧轴方向决定。\n\n## 主要属性\n\n1. display(flex container)\n\n\t\tdisplay: other values | flex | inline-flex;\n2. flex-direction(flex container)\n\n\t\tflex-direction: row | row-reverse | column | column-reverse\n3. order（flex items）\n默认情况下，伸缩项目是按照文档流出现先后顺序排列。然而，“order”属性可以控制伸缩项目在他们的伸缩容器出现的顺序。\n\n\t\torder: <integer> \n4. flex-wrap（flex container）\n这个主要用来定义伸缩容器里是单行还是多行显示，侧轴的方向决定了新行堆放的方向。\n\n\t\tflex-wrap: nowrap | wrap | wrap-reverse\n5. flex-flow（flex container）\n这个是“flex-direction”和“flex-wrap”属性的缩写版本。同时定义了伸缩容器的主轴和侧轴。其默认值为“row nowrap”。\n\n\t\tflex-flow: <‘flex-direction’> || <‘flex-wrap’>\n6. justify-content（flex container）\n这个是用来定义伸缩项目沿着主轴线的对齐方式。当一行上的所有伸缩项目都不能伸缩或可伸缩但是已经达到其最大长度时，这一属性才会对多余的空间进行分配。当项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制。\n\n\t\tjustify-content: flex-start | flex-end | center | space-between | space-around;\n7. align-content（flex container）\n这个属性主要用来调准伸缩行在伸缩容器里的对齐方式。类似于伸缩项目在主轴上使用“justify-content”一样。（侧轴方向的对齐方式）*容器内必须有多行的项目，该属性才能渲染出效果*。\n\n\t\talign-content: flex-start | flex-end | center | space-between | space-around | stretch;\n8. align-items（flex container）\n\n\t\talign-items: flex-start | flex-end | center | baseline | stretch\n9. align-self（flex items）\n用来在单独的伸缩项目上覆写默认的对齐方式。\n\n\t\talign-self: auto | flex-start | flex-end | center | baseline | stretch;\n10. flex-grow（flex items）\n根据需要用来定义伸缩项目的扩展能力。它接受一个不带单位的值做为一个*比例*。主要用来决定伸缩容器剩余空间按比例应扩展多少空间。\n\n\t\tflex-grow: <number>; /* default 0 */\n如果所有伸缩项目的“flex-grow”设置了“1”，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了“flex-grow”值为“2”，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的两倍。\n11. flex-shrink(flex items)\n根据需要用来定义伸缩项目收缩的能力。负值无效。\n\n\t\tflex-shrink: <number>; /* default 1 */\n12. flex-basis（flex items）\n这个用来设置伸缩基准值，剩余的空间按比率进行伸缩。\n\n\t\tflex-basis: <length> | auto; /* default auto */\n如果设置为“0”，不考虑剩余空白空间。如果设置为自动，则按照flex-grow值分配剩余空白空间。\n13. flex（flex items）\n这是“flex-grow”、“flex-shrink”和“flex-basis”三个属性的缩写。其中第二个和第三个参数（flex-shrink、flex-basis）是可选参数。默认值为“0 1 auto”。\n\n\t\tflex: none | [ <'flex-grow'> <'flex-shrink'>|| <'flex-basis'> ]\n\n## 实例讲解\n\n这几个都是对齐方式，为了方便演示，\n1. 先将几个box设置为长宽各不相同，在没有设置布局方式的时候，盒子应该从上往下依次排列。\n\n\t\t.box-5{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t}\n\t\t.box-6{\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t}\n\t\t.box-7{\n\t\t\twidth: 300px;\n\t\t\theight: 300px;\n\t\t}\n\t\t.box-8{\n\t\t\twidth: 400px;\n\t\t\theight: 400px;\n\t\t}\n\t\t.container_1{\n\t\t\twidth: 2000px;\n\t\t\theight: 800px;\n\t\t\tborder: 1px solid #00F;\n\t\t}\n2. 将父元素的布局方式设为display:flex之后，子元素的四个盒子显示到同一排，如图。因为如果没有设置其他的属性，flexbox布局方式中默认flex-direction为row，即从左向右的方式排列。justify-content默认为flex-start，即向一行的起始位置靠齐。因为flexdirection为从左向右，则box应该向左靠齐。\n![flex](/img/flex/2.jpg)\n3. 改变父元素的justify-content，如改为center，我们看一下布局会变为什么样子。可以看到盒子整体在父元素中居中。\n![justify-content](/img/flex/3.jpg)\n4. 接下来设置下order。\n\n\t\tdiv.box-5{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\torder: 1;\n\t\t}\n\t\tdiv.box-6{\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\torder: 5;\n\t\t}\n\t\tdiv.box-7{\n\t\t\twidth: 300px;\n\t\t\theight: 300px;\n\t\t\torder: 3;\n\t\t}\n\t\tdiv.box-8{\n\t\t\twidth: 400px;\n\t\t\theight: 400px;\n\t\t\torder: -1;\n\t\t}\n结果如图。\n![order](/img/flex/4.jpg)\n可见，order按大小排序，负数也可以。\n5. 使用align-items,设置为align-items: flex-end，box的显示方式如图。可见align-items设置的是各行元素间的对齐方式。\n![align-items](/img/flex/5.jpg)\n6. 接下来我们对单独的一个box设置align-self属性，如\n\n\t\tdiv.box-8{\n\t\t\twidth: 400px;\n\t\t\theight: 400px;\n\t\t\torder: -1;\n\t\t\talign-self: flex-start;\n\t\t}\n结果如图，很明显align-self属性设置的是单独的一个box的对齐方式。\n![align-self](/img/flex/6.jpg)\n7. 设置其中一个box的flex-grow为1，则这个box将忽略本身的width属性，占满父元素剩下的全部空间，可以用于自适应布局中，如图。\n![flex-grow](/img/flex/7.jpg)\n将所有的box的flex-grow都设为1，则将剩余空间的宽度分为4分，然后分别加到各个盒子上。\n8. flex-basis，当为数值时与width类似，会覆盖元素本身的width。设为其他数值，就相当于元素的宽度在这个值得基础上加，如剩余空间为100，四个box的flex-grow都设为1，假如原来四个盒子的flex-basis均为30px,则现在各个盒子的宽度均为55px。\n9. flex-shrink\n该属性来设置，当父元素的宽度小于所有子元素的宽度的和时（即子元素会超出父元素），子元素如何缩小自己的宽度的。\nflex-shrink的默认值为1，当父元素的宽度小于所有子元素的宽度的和时，子元素的宽度会减小。值越大，减小的越厉害。如果值为0，表示不减小。\n\n\t\tdiv.container_2{\n\t\t\twidth: 1000px;\n\t\t\theight: 800px;\n\t\t\tborder: 1px solid #00F;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-content: flex-end;\n\t\t\talign-items: flex-end;\n\t\t}\n\t\tdiv.box-9{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 100px;\n\t\t}\n\t\tdiv.box-10{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 200px;\n\t\t}\n\t\tdiv.box-11{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 300px;\n\t\t}\n\t\tdiv.box-12{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 400px;\n\t\t}\n因为默认为1，则四个box收缩相同的宽度，不会溢出，且收缩之后box的宽度还相同。如图。\n![flex-basis](/img/flex/8.jpg)\n下面改一下各个box的flex-shrink值\n\t\tdiv.box-9{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 100px;\n\t\t\tflex-shrink: 1;\n\t\t}\n\t\tdiv.box-10{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 200px;\n\t\t\tflex-shrink: 2;\n\t\t}\n\t\tdiv.box-11{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 300px;\n\t\t\tflex-shrink: 3;\n\t\t}\n\t\tdiv.box-12{\n\t\t\tflex-basis: 300px;\n\t\t\theight: 400px;\n\t\t\tflex-shrink: 4;\n\t\t}\n则盒子将按照1/(1+2+3+4),2/(1+2+3+4),3/(1+2+3+4),4/(1+2+3+4)的比例缩小。如图。\n![flex-basis](/img/flex/9.jpg)\n演示链接\nhttp://shly.github.io/shly/IFE/task_10/index.html","slug":"flex","published":1,"updated":"2016-06-14T02:46:19.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx0j000iogsanzgterx5","content":"<p>Flex的出现是为了解决布局问题，使用flex布局很灵活，容器子元素的排列方式，对齐方式，显示顺序等都可以很方便的指定。目前处于非正式标准，但是新的浏览器基本上都支持。<br><a id=\"more\"></a><br>FlexBox是一个布局模块，不是一个简单的布局属性，它包含父元素和子元素的属性。flex布局主要依赖于flex direction。</p>\n<h2 id=\"主要术语\"><a href=\"#主要术语\" class=\"headerlink\" title=\"主要术语\"></a>主要术语</h2><ol>\n<li>主轴、主轴方向(main axis |main dimension)：用户代理沿着一个伸缩容器的主轴配置伸缩项目，主轴是主轴方向的延伸。</li>\n<li>主轴起点、主轴终点(main-start |main-end)：伸缩项目的配置从容器的主轴起点边开始，往主轴终点边结束。</li>\n<li>主轴长度、主轴长度属性(main size |main size property)：伸缩项目的在主轴方向的宽度或高度就是项目的主轴长度，伸缩项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。</li>\n<li>侧轴、侧轴方向(cross axis |cross dimension)：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。</li>\n<li>侧轴起点、侧轴终点(cross-start |cross-end)：填满项目的伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。</li>\n<li>侧轴长度、侧轴长度属性(cross size |cross size property)：伸缩项目的在侧轴方向的宽度或高度就是项目的侧轴长度，伸缩项目的侧轴长度属性是”width”或”height”属性，由哪一个对着侧轴方向决定。</li>\n</ol>\n<h2 id=\"主要属性\"><a href=\"#主要属性\" class=\"headerlink\" title=\"主要属性\"></a>主要属性</h2><ol>\n<li><p>display(flex container)</p>\n<pre><code>display: other values | flex | inline-flex;\n</code></pre></li>\n<li><p>flex-direction(flex container)</p>\n<pre><code>flex-direction: row | row-reverse | column | column-reverse\n</code></pre></li>\n<li><p>order（flex items）<br>默认情况下，伸缩项目是按照文档流出现先后顺序排列。然而，“order”属性可以控制伸缩项目在他们的伸缩容器出现的顺序。</p>\n<pre><code>order: &lt;integer&gt; \n</code></pre></li>\n<li><p>flex-wrap（flex container）<br>这个主要用来定义伸缩容器里是单行还是多行显示，侧轴的方向决定了新行堆放的方向。</p>\n<pre><code>flex-wrap: nowrap | wrap | wrap-reverse\n</code></pre></li>\n<li><p>flex-flow（flex container）<br>这个是“flex-direction”和“flex-wrap”属性的缩写版本。同时定义了伸缩容器的主轴和侧轴。其默认值为“row nowrap”。</p>\n<pre><code>flex-flow: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;\n</code></pre></li>\n<li><p>justify-content（flex container）<br>这个是用来定义伸缩项目沿着主轴线的对齐方式。当一行上的所有伸缩项目都不能伸缩或可伸缩但是已经达到其最大长度时，这一属性才会对多余的空间进行分配。当项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制。</p>\n<pre><code>justify-content: flex-start | flex-end | center | space-between | space-around;\n</code></pre></li>\n<li><p>align-content（flex container）<br>这个属性主要用来调准伸缩行在伸缩容器里的对齐方式。类似于伸缩项目在主轴上使用“justify-content”一样。（侧轴方向的对齐方式）<em>容器内必须有多行的项目，该属性才能渲染出效果</em>。</p>\n<pre><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n</code></pre></li>\n<li><p>align-items（flex container）</p>\n<pre><code>align-items: flex-start | flex-end | center | baseline | stretch\n</code></pre></li>\n<li><p>align-self（flex items）<br>用来在单独的伸缩项目上覆写默认的对齐方式。</p>\n<pre><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;\n</code></pre></li>\n<li><p>flex-grow（flex items）<br>根据需要用来定义伸缩项目的扩展能力。它接受一个不带单位的值做为一个<em>比例</em>。主要用来决定伸缩容器剩余空间按比例应扩展多少空间。</p>\n<pre><code>flex-grow: &lt;number&gt;; /* default 0 */\n</code></pre><p>如果所有伸缩项目的“flex-grow”设置了“1”，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了“flex-grow”值为“2”，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的两倍。</p>\n</li>\n<li><p>flex-shrink(flex items)<br>根据需要用来定义伸缩项目收缩的能力。负值无效。</p>\n<pre><code>flex-shrink: &lt;number&gt;; /* default 1 */\n</code></pre></li>\n<li><p>flex-basis（flex items）<br>这个用来设置伸缩基准值，剩余的空间按比率进行伸缩。</p>\n<pre><code>flex-basis: &lt;length&gt; | auto; /* default auto */\n</code></pre><p>如果设置为“0”，不考虑剩余空白空间。如果设置为自动，则按照flex-grow值分配剩余空白空间。</p>\n</li>\n<li><p>flex（flex items）<br>这是“flex-grow”、“flex-shrink”和“flex-basis”三个属性的缩写。其中第二个和第三个参数（flex-shrink、flex-basis）是可选参数。默认值为“0 1 auto”。</p>\n<pre><code>flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;|| &lt;&apos;flex-basis&apos;&gt; ]\n</code></pre></li>\n</ol>\n<h2 id=\"实例讲解\"><a href=\"#实例讲解\" class=\"headerlink\" title=\"实例讲解\"></a>实例讲解</h2><p>这几个都是对齐方式，为了方便演示，</p>\n<ol>\n<li><p>先将几个box设置为长宽各不相同，在没有设置布局方式的时候，盒子应该从上往下依次排列。</p>\n<pre><code>.box-5{\n    width: 100px;\n    height: 100px;\n}\n.box-6{\n    width: 200px;\n    height: 200px;\n}\n.box-7{\n    width: 300px;\n    height: 300px;\n}\n.box-8{\n    width: 400px;\n    height: 400px;\n}\n.container_1{\n    width: 2000px;\n    height: 800px;\n    border: 1px solid #00F;\n}\n</code></pre></li>\n<li>将父元素的布局方式设为display:flex之后，子元素的四个盒子显示到同一排，如图。因为如果没有设置其他的属性，flexbox布局方式中默认flex-direction为row，即从左向右的方式排列。justify-content默认为flex-start，即向一行的起始位置靠齐。因为flexdirection为从左向右，则box应该向左靠齐。<br><img src=\"/img/flex/2.jpg\" alt=\"flex\"></li>\n<li>改变父元素的justify-content，如改为center，我们看一下布局会变为什么样子。可以看到盒子整体在父元素中居中。<br><img src=\"/img/flex/3.jpg\" alt=\"justify-content\"></li>\n<li><p>接下来设置下order。</p>\n<pre><code>div.box-5{\n    width: 100px;\n    height: 100px;\n    order: 1;\n}\ndiv.box-6{\n    width: 200px;\n    height: 200px;\n    order: 5;\n}\ndiv.box-7{\n    width: 300px;\n    height: 300px;\n    order: 3;\n}\ndiv.box-8{\n    width: 400px;\n    height: 400px;\n    order: -1;\n}\n</code></pre><p>结果如图。<br><img src=\"/img/flex/4.jpg\" alt=\"order\"><br>可见，order按大小排序，负数也可以。</p>\n</li>\n<li>使用align-items,设置为align-items: flex-end，box的显示方式如图。可见align-items设置的是各行元素间的对齐方式。<br><img src=\"/img/flex/5.jpg\" alt=\"align-items\"></li>\n<li><p>接下来我们对单独的一个box设置align-self属性，如</p>\n<pre><code>div.box-8{\n    width: 400px;\n    height: 400px;\n    order: -1;\n    align-self: flex-start;\n}\n</code></pre><p>结果如图，很明显align-self属性设置的是单独的一个box的对齐方式。<br><img src=\"/img/flex/6.jpg\" alt=\"align-self\"></p>\n</li>\n<li>设置其中一个box的flex-grow为1，则这个box将忽略本身的width属性，占满父元素剩下的全部空间，可以用于自适应布局中，如图。<br><img src=\"/img/flex/7.jpg\" alt=\"flex-grow\"><br>将所有的box的flex-grow都设为1，则将剩余空间的宽度分为4分，然后分别加到各个盒子上。</li>\n<li>flex-basis，当为数值时与width类似，会覆盖元素本身的width。设为其他数值，就相当于元素的宽度在这个值得基础上加，如剩余空间为100，四个box的flex-grow都设为1，假如原来四个盒子的flex-basis均为30px,则现在各个盒子的宽度均为55px。</li>\n<li><p>flex-shrink<br>该属性来设置，当父元素的宽度小于所有子元素的宽度的和时（即子元素会超出父元素），子元素如何缩小自己的宽度的。<br>flex-shrink的默认值为1，当父元素的宽度小于所有子元素的宽度的和时，子元素的宽度会减小。值越大，减小的越厉害。如果值为0，表示不减小。</p>\n<pre><code>div.container_2{\n    width: 1000px;\n    height: 800px;\n    border: 1px solid #00F;\n    display: flex;\n    justify-content: center;\n    align-content: flex-end;\n    align-items: flex-end;\n}\ndiv.box-9{\n    flex-basis: 300px;\n    height: 100px;\n}\ndiv.box-10{\n    flex-basis: 300px;\n    height: 200px;\n}\ndiv.box-11{\n    flex-basis: 300px;\n    height: 300px;\n}\ndiv.box-12{\n    flex-basis: 300px;\n    height: 400px;\n}\n</code></pre><p>因为默认为1，则四个box收缩相同的宽度，不会溢出，且收缩之后box的宽度还相同。如图。<br><img src=\"/img/flex/8.jpg\" alt=\"flex-basis\"><br>下面改一下各个box的flex-shrink值</p>\n<pre><code>div.box-9{\n    flex-basis: 300px;\n    height: 100px;\n    flex-shrink: 1;\n}\ndiv.box-10{\n    flex-basis: 300px;\n    height: 200px;\n    flex-shrink: 2;\n}\ndiv.box-11{\n    flex-basis: 300px;\n    height: 300px;\n    flex-shrink: 3;\n}\ndiv.box-12{\n    flex-basis: 300px;\n    height: 400px;\n    flex-shrink: 4;\n}\n</code></pre><p>则盒子将按照1/(1+2+3+4),2/(1+2+3+4),3/(1+2+3+4),4/(1+2+3+4)的比例缩小。如图。<br><img src=\"/img/flex/9.jpg\" alt=\"flex-basis\"><br>演示链接<br><a href=\"http://shly.github.io/shly/IFE/task_10/index.html\" target=\"_blank\" rel=\"external\">http://shly.github.io/shly/IFE/task_10/index.html</a></p>\n</li>\n</ol>\n","excerpt":"<p>Flex的出现是为了解决布局问题，使用flex布局很灵活，容器子元素的排列方式，对齐方式，显示顺序等都可以很方便的指定。目前处于非正式标准，但是新的浏览器基本上都支持。<br>","more":"<br>FlexBox是一个布局模块，不是一个简单的布局属性，它包含父元素和子元素的属性。flex布局主要依赖于flex direction。</p>\n<h2 id=\"主要术语\"><a href=\"#主要术语\" class=\"headerlink\" title=\"主要术语\"></a>主要术语</h2><ol>\n<li>主轴、主轴方向(main axis |main dimension)：用户代理沿着一个伸缩容器的主轴配置伸缩项目，主轴是主轴方向的延伸。</li>\n<li>主轴起点、主轴终点(main-start |main-end)：伸缩项目的配置从容器的主轴起点边开始，往主轴终点边结束。</li>\n<li>主轴长度、主轴长度属性(main size |main size property)：伸缩项目的在主轴方向的宽度或高度就是项目的主轴长度，伸缩项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。</li>\n<li>侧轴、侧轴方向(cross axis |cross dimension)：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。</li>\n<li>侧轴起点、侧轴终点(cross-start |cross-end)：填满项目的伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。</li>\n<li>侧轴长度、侧轴长度属性(cross size |cross size property)：伸缩项目的在侧轴方向的宽度或高度就是项目的侧轴长度，伸缩项目的侧轴长度属性是”width”或”height”属性，由哪一个对着侧轴方向决定。</li>\n</ol>\n<h2 id=\"主要属性\"><a href=\"#主要属性\" class=\"headerlink\" title=\"主要属性\"></a>主要属性</h2><ol>\n<li><p>display(flex container)</p>\n<pre><code>display: other values | flex | inline-flex;\n</code></pre></li>\n<li><p>flex-direction(flex container)</p>\n<pre><code>flex-direction: row | row-reverse | column | column-reverse\n</code></pre></li>\n<li><p>order（flex items）<br>默认情况下，伸缩项目是按照文档流出现先后顺序排列。然而，“order”属性可以控制伸缩项目在他们的伸缩容器出现的顺序。</p>\n<pre><code>order: &lt;integer&gt; \n</code></pre></li>\n<li><p>flex-wrap（flex container）<br>这个主要用来定义伸缩容器里是单行还是多行显示，侧轴的方向决定了新行堆放的方向。</p>\n<pre><code>flex-wrap: nowrap | wrap | wrap-reverse\n</code></pre></li>\n<li><p>flex-flow（flex container）<br>这个是“flex-direction”和“flex-wrap”属性的缩写版本。同时定义了伸缩容器的主轴和侧轴。其默认值为“row nowrap”。</p>\n<pre><code>flex-flow: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;\n</code></pre></li>\n<li><p>justify-content（flex container）<br>这个是用来定义伸缩项目沿着主轴线的对齐方式。当一行上的所有伸缩项目都不能伸缩或可伸缩但是已经达到其最大长度时，这一属性才会对多余的空间进行分配。当项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制。</p>\n<pre><code>justify-content: flex-start | flex-end | center | space-between | space-around;\n</code></pre></li>\n<li><p>align-content（flex container）<br>这个属性主要用来调准伸缩行在伸缩容器里的对齐方式。类似于伸缩项目在主轴上使用“justify-content”一样。（侧轴方向的对齐方式）<em>容器内必须有多行的项目，该属性才能渲染出效果</em>。</p>\n<pre><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n</code></pre></li>\n<li><p>align-items（flex container）</p>\n<pre><code>align-items: flex-start | flex-end | center | baseline | stretch\n</code></pre></li>\n<li><p>align-self（flex items）<br>用来在单独的伸缩项目上覆写默认的对齐方式。</p>\n<pre><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;\n</code></pre></li>\n<li><p>flex-grow（flex items）<br>根据需要用来定义伸缩项目的扩展能力。它接受一个不带单位的值做为一个<em>比例</em>。主要用来决定伸缩容器剩余空间按比例应扩展多少空间。</p>\n<pre><code>flex-grow: &lt;number&gt;; /* default 0 */\n</code></pre><p>如果所有伸缩项目的“flex-grow”设置了“1”，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了“flex-grow”值为“2”，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的两倍。</p>\n</li>\n<li><p>flex-shrink(flex items)<br>根据需要用来定义伸缩项目收缩的能力。负值无效。</p>\n<pre><code>flex-shrink: &lt;number&gt;; /* default 1 */\n</code></pre></li>\n<li><p>flex-basis（flex items）<br>这个用来设置伸缩基准值，剩余的空间按比率进行伸缩。</p>\n<pre><code>flex-basis: &lt;length&gt; | auto; /* default auto */\n</code></pre><p>如果设置为“0”，不考虑剩余空白空间。如果设置为自动，则按照flex-grow值分配剩余空白空间。</p>\n</li>\n<li><p>flex（flex items）<br>这是“flex-grow”、“flex-shrink”和“flex-basis”三个属性的缩写。其中第二个和第三个参数（flex-shrink、flex-basis）是可选参数。默认值为“0 1 auto”。</p>\n<pre><code>flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;|| &lt;&apos;flex-basis&apos;&gt; ]\n</code></pre></li>\n</ol>\n<h2 id=\"实例讲解\"><a href=\"#实例讲解\" class=\"headerlink\" title=\"实例讲解\"></a>实例讲解</h2><p>这几个都是对齐方式，为了方便演示，</p>\n<ol>\n<li><p>先将几个box设置为长宽各不相同，在没有设置布局方式的时候，盒子应该从上往下依次排列。</p>\n<pre><code>.box-5{\n    width: 100px;\n    height: 100px;\n}\n.box-6{\n    width: 200px;\n    height: 200px;\n}\n.box-7{\n    width: 300px;\n    height: 300px;\n}\n.box-8{\n    width: 400px;\n    height: 400px;\n}\n.container_1{\n    width: 2000px;\n    height: 800px;\n    border: 1px solid #00F;\n}\n</code></pre></li>\n<li>将父元素的布局方式设为display:flex之后，子元素的四个盒子显示到同一排，如图。因为如果没有设置其他的属性，flexbox布局方式中默认flex-direction为row，即从左向右的方式排列。justify-content默认为flex-start，即向一行的起始位置靠齐。因为flexdirection为从左向右，则box应该向左靠齐。<br><img src=\"/img/flex/2.jpg\" alt=\"flex\"></li>\n<li>改变父元素的justify-content，如改为center，我们看一下布局会变为什么样子。可以看到盒子整体在父元素中居中。<br><img src=\"/img/flex/3.jpg\" alt=\"justify-content\"></li>\n<li><p>接下来设置下order。</p>\n<pre><code>div.box-5{\n    width: 100px;\n    height: 100px;\n    order: 1;\n}\ndiv.box-6{\n    width: 200px;\n    height: 200px;\n    order: 5;\n}\ndiv.box-7{\n    width: 300px;\n    height: 300px;\n    order: 3;\n}\ndiv.box-8{\n    width: 400px;\n    height: 400px;\n    order: -1;\n}\n</code></pre><p>结果如图。<br><img src=\"/img/flex/4.jpg\" alt=\"order\"><br>可见，order按大小排序，负数也可以。</p>\n</li>\n<li>使用align-items,设置为align-items: flex-end，box的显示方式如图。可见align-items设置的是各行元素间的对齐方式。<br><img src=\"/img/flex/5.jpg\" alt=\"align-items\"></li>\n<li><p>接下来我们对单独的一个box设置align-self属性，如</p>\n<pre><code>div.box-8{\n    width: 400px;\n    height: 400px;\n    order: -1;\n    align-self: flex-start;\n}\n</code></pre><p>结果如图，很明显align-self属性设置的是单独的一个box的对齐方式。<br><img src=\"/img/flex/6.jpg\" alt=\"align-self\"></p>\n</li>\n<li>设置其中一个box的flex-grow为1，则这个box将忽略本身的width属性，占满父元素剩下的全部空间，可以用于自适应布局中，如图。<br><img src=\"/img/flex/7.jpg\" alt=\"flex-grow\"><br>将所有的box的flex-grow都设为1，则将剩余空间的宽度分为4分，然后分别加到各个盒子上。</li>\n<li>flex-basis，当为数值时与width类似，会覆盖元素本身的width。设为其他数值，就相当于元素的宽度在这个值得基础上加，如剩余空间为100，四个box的flex-grow都设为1，假如原来四个盒子的flex-basis均为30px,则现在各个盒子的宽度均为55px。</li>\n<li><p>flex-shrink<br>该属性来设置，当父元素的宽度小于所有子元素的宽度的和时（即子元素会超出父元素），子元素如何缩小自己的宽度的。<br>flex-shrink的默认值为1，当父元素的宽度小于所有子元素的宽度的和时，子元素的宽度会减小。值越大，减小的越厉害。如果值为0，表示不减小。</p>\n<pre><code>div.container_2{\n    width: 1000px;\n    height: 800px;\n    border: 1px solid #00F;\n    display: flex;\n    justify-content: center;\n    align-content: flex-end;\n    align-items: flex-end;\n}\ndiv.box-9{\n    flex-basis: 300px;\n    height: 100px;\n}\ndiv.box-10{\n    flex-basis: 300px;\n    height: 200px;\n}\ndiv.box-11{\n    flex-basis: 300px;\n    height: 300px;\n}\ndiv.box-12{\n    flex-basis: 300px;\n    height: 400px;\n}\n</code></pre><p>因为默认为1，则四个box收缩相同的宽度，不会溢出，且收缩之后box的宽度还相同。如图。<br><img src=\"/img/flex/8.jpg\" alt=\"flex-basis\"><br>下面改一下各个box的flex-shrink值</p>\n<pre><code>div.box-9{\n    flex-basis: 300px;\n    height: 100px;\n    flex-shrink: 1;\n}\ndiv.box-10{\n    flex-basis: 300px;\n    height: 200px;\n    flex-shrink: 2;\n}\ndiv.box-11{\n    flex-basis: 300px;\n    height: 300px;\n    flex-shrink: 3;\n}\ndiv.box-12{\n    flex-basis: 300px;\n    height: 400px;\n    flex-shrink: 4;\n}\n</code></pre><p>则盒子将按照1/(1+2+3+4),2/(1+2+3+4),3/(1+2+3+4),4/(1+2+3+4)的比例缩小。如图。<br><img src=\"/img/flex/9.jpg\" alt=\"flex-basis\"><br>演示链接<br><a href=\"http://shly.github.io/shly/IFE/task_10/index.html\">http://shly.github.io/shly/IFE/task_10/index.html</a></p>\n</li>\n</ol>"},{"title":"heapSort","date":"2016-05-26T03:06:29.000Z","_content":"java堆排，记录一下。（选择排序，时间复杂度O(n*logn),不稳定排序）\n\n\tpublic void heapSort(int[] arr) {\n\t\t\tint arrLength = arr.length;\n\t\t\tfor(int i = 0;i<arrLength-1;i++){\n\t\t\t\tint lastIndex = arrLength-1-i;\n\t\t\t\tbuildMaxHeap(arr,lastIndex);\n\t\t\t\tswap(arr,0,lastIndex);\n\t\t\t}\n\t\t}\n\t\tpublic void buildMaxHeap(int[] arr,int lastIndex){\n\t\t\tfor(int i = (lastIndex-1)/2;i>=0;i--){\n\t\t\t\tint k = i;\n\t\t\t\twhile(k*2+1<=lastIndex){\n\t\t\t\t\tint biggerIndex = 2*k+1;\n\t\t\t\t\tif(biggerIndex<lastIndex){\n\t\t\t\t\t\tif(arr[biggerIndex]<arr[biggerIndex+1]){\n\t\t\t\t\t\t\tbiggerIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(arr[k]<arr[biggerIndex]){\n\t\t\t\t\t\tswap(arr,k,biggerIndex);\n\t\t\t\t\t\tk = biggerIndex;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n其他排序算法见 https://github.com/shly/datastructure","source":"_posts/heapSort.md","raw":"---\ntitle: heapSort\ndate: 2016-05-26 11:06:29\ntags: \n  - 排序算法\ncategories:\n  - 学习笔记\n  - 数据结构\n---\njava堆排，记录一下。（选择排序，时间复杂度O(n*logn),不稳定排序）\n\n\tpublic void heapSort(int[] arr) {\n\t\t\tint arrLength = arr.length;\n\t\t\tfor(int i = 0;i<arrLength-1;i++){\n\t\t\t\tint lastIndex = arrLength-1-i;\n\t\t\t\tbuildMaxHeap(arr,lastIndex);\n\t\t\t\tswap(arr,0,lastIndex);\n\t\t\t}\n\t\t}\n\t\tpublic void buildMaxHeap(int[] arr,int lastIndex){\n\t\t\tfor(int i = (lastIndex-1)/2;i>=0;i--){\n\t\t\t\tint k = i;\n\t\t\t\twhile(k*2+1<=lastIndex){\n\t\t\t\t\tint biggerIndex = 2*k+1;\n\t\t\t\t\tif(biggerIndex<lastIndex){\n\t\t\t\t\t\tif(arr[biggerIndex]<arr[biggerIndex+1]){\n\t\t\t\t\t\t\tbiggerIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(arr[k]<arr[biggerIndex]){\n\t\t\t\t\t\tswap(arr,k,biggerIndex);\n\t\t\t\t\t\tk = biggerIndex;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n其他排序算法见 https://github.com/shly/datastructure","slug":"heapSort","published":1,"updated":"2016-06-14T02:46:19.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx0m000jogsa93bttysd","content":"<p>java堆排，记录一下。（选择排序，时间复杂度O(n*logn),不稳定排序）</p>\n<pre><code>public void heapSort(int[] arr) {\n        int arrLength = arr.length;\n        for(int i = 0;i&lt;arrLength-1;i++){\n            int lastIndex = arrLength-1-i;\n            buildMaxHeap(arr,lastIndex);\n            swap(arr,0,lastIndex);\n        }\n    }\n    public void buildMaxHeap(int[] arr,int lastIndex){\n        for(int i = (lastIndex-1)/2;i&gt;=0;i--){\n            int k = i;\n            while(k*2+1&lt;=lastIndex){\n                int biggerIndex = 2*k+1;\n                if(biggerIndex&lt;lastIndex){\n                    if(arr[biggerIndex]&lt;arr[biggerIndex+1]){\n                        biggerIndex++;\n                    }\n                }\n                if(arr[k]&lt;arr[biggerIndex]){\n                    swap(arr,k,biggerIndex);\n                    k = biggerIndex;\n                }else{\n                    break;\n                }\n            }\n        }\n    }\n</code></pre><p>其他排序算法见 <a href=\"https://github.com/shly/datastructure\" target=\"_blank\" rel=\"external\">https://github.com/shly/datastructure</a></p>\n","excerpt":"","more":"<p>java堆排，记录一下。（选择排序，时间复杂度O(n*logn),不稳定排序）</p>\n<pre><code>public void heapSort(int[] arr) {\n        int arrLength = arr.length;\n        for(int i = 0;i&lt;arrLength-1;i++){\n            int lastIndex = arrLength-1-i;\n            buildMaxHeap(arr,lastIndex);\n            swap(arr,0,lastIndex);\n        }\n    }\n    public void buildMaxHeap(int[] arr,int lastIndex){\n        for(int i = (lastIndex-1)/2;i&gt;=0;i--){\n            int k = i;\n            while(k*2+1&lt;=lastIndex){\n                int biggerIndex = 2*k+1;\n                if(biggerIndex&lt;lastIndex){\n                    if(arr[biggerIndex]&lt;arr[biggerIndex+1]){\n                        biggerIndex++;\n                    }\n                }\n                if(arr[k]&lt;arr[biggerIndex]){\n                    swap(arr,k,biggerIndex);\n                    k = biggerIndex;\n                }else{\n                    break;\n                }\n            }\n        }\n    }\n</code></pre><p>其他排序算法见 <a href=\"https://github.com/shly/datastructure\">https://github.com/shly/datastructure</a></p>\n"},{"title":"html标签学习","date":"2016-05-06T02:36:02.000Z","_content":"# a标签\n## 属性\n1. href\n2. target \n规定在何处打开新链接。\n3. media\n 属性规定目标URL是为什么媒介/设备优化的。可接受多个值。且只能在href属性存在时使用。\n   *html5 中的新属性*\n   <!--more-->\n4. download\n 规定被下载的超链接目标。只有firefox和Chrome支持。\n *html5新属性*。\n\t\t<a download=\"filename\"> \nfilename 为下载之后文件的名字。没有指定filename时只下载不重命名。\n5. type\n 规定被链接文档的MIMI类型。\n*html5新属性*\n6. hreflang\n 规定被链接文档的语言。仅在使用href属性时才使用。和 lang 属性不同的是，hreflang 属性不会指定标签中的内容所使用的语言，而是指定被 href 属性调用的文档所使用的语言。\n\\* 主流的浏览器几乎都不支持 hreflang 属性。\n7. rel\n 指定当前文档与被链接文档之间的关系。所有浏览器都支持。尽管浏览器不会以任何方式使用该属性，不过搜索引擎可以利用该属性获得更多有关链接的信息。\n8. rev\n 指定当前文档与被链接文档之间的关系。rel是指定从源文档到目标文档之间的关系，rev指定从目标文档到源文档之间的关系。\n*几乎没有浏览器支持，html 5废除*\n9. charset\n 规定被链接文档的字符集\n*主流的浏览器几乎都不支持 charset 属性。html 5废除*\n10. shape\n 规定链接的形状。只有 Firefox 和 Opera 支持 shape 属性。\n*html 5废除*\n11. coords\n coords 属性与 shape 属性配合，可以规定 object 或 img 元素中链接的尺寸、形状和位置。\n*只有 Firefox 和 Opera 支持 coords 属性。html 5废除*\n12. name\n 描述锚的名称。主流浏览器都支持。id出现之前用的name，后id出现为了保证兼容性而保留。\n*html 5废除*\n\n## 总结\n共12个属性，html 5新添属性有download，media，type三个。html 5 废除属性有charset,coords,name,rev,shape五个，剩下 href,target,rel,hreflang四个。其中hreflang主流浏览器都不支持。\n# abbr标签\n缩写，所有浏览器都支持。\n\n\t\tThe <abbr title=\"People's Republic of China\">PRC</abbr> was founded in 1949.\n# acronym标签\n首字母缩写。所有浏览器支持。html 5 废除，使用abbr代替。\n# address标签\n&lt;address>标签定义文档或文章的作者/拥有者的联系信息。\n如果 &lt;address> 元素位于 &lt;body> 元素内，则它表示文档联系信息。\n如果 &lt;address> 元素位于 &lt;article> 元素内，则它表示文章的联系信息。\n&lt;address> 元素中的文本通常呈现为斜体。大多数浏览器会在 address 元素前后添加折行。\n*所有主流浏览器支持，html 5新添*\n# applet标签\n定义嵌入的java applet。\n*html 5废除，使用object代替。html 4.01中也不赞成使用*\n# area标签\n定义图像映射中的区域。area元素总是嵌套在map标签中。所有主流浏览器都支持。\n&lt;img> 标签中的 usemap 属性与 map 元素 name 属性相关联，创建图像与映射之间的联系。\n&lt;img> 中的 usemap 属性可引用 &lt;map> 中的 id 或 name 属性（由浏览器决定），所以我们需要同时向 &lt;map> 添加 id 和 name 两个属性。\n## 必需属性 \nalt，定义此区域的替换文本。\n## 可选属性\n 1. shape\n定义区域的形状。可选值：圆形（circ 或 circle）、多边形（poly 或 polygon）、矩形（rect 或 rectangle）和default。未规定shape时会假定使用default。意味着该区域会覆盖整个图像。可以识别 shape 属性的 default 值的浏览器，可以提供一个包括全部热点的区域，以用于在超过其他热点定义的范围之外单击的情况。由于区域在 <map> 标签中是采用“先来先得”的顺序，所有必须将默认区域放置在后面。否则，默认区域会覆盖其他的图像映射中出现的所有区域。\n所有浏览器都支持。\n 2. coords\n坐标值，定义可点击区域的坐标。与shape属性配合使用。\n圆形：shape=\"circle\"，coords=\"x,y,z\"\n这里的 x 和 y 定义了圆心的位置（\"0,0\" 是图像左上角的坐标），r 是以像素为单位的圆形半径。\n多边形：shape=\"polygon\"，coords=\"x1,y1,x2,y2,x3,y3,...\"\n每一对 \"x,y\" 坐标都定义了多边形的一个顶点（\"0,0\" 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。\n多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。\n矩形：shape=\"rectangle\"，coords=\"x1,y1,x2,y2\"\n第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，\"0,0\" 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。\n 3. href\nhref 属性规定区域中连接的目标。\n 4. nohref\nnohref 属性规定该区域没有相关的链接。\n 5. target\n\n# article标签\n规定独立的自包含内容。\n一篇文章应该具有其自身的意义。应该有可能独立于站点的其他部分对齐进行分发。\n&lt;article> 元素的潜在来源：\n 论坛帖子\n 报纸文章\n 博客条目\n 用户评论\n*html 5新添*\n# aside标签\n定义其所处内容之外的内容，应该与附近的内容相关。&lt;aside> 的内容可用作文章的侧栏。\n*html 5新添*\n# audio标签\n\t<audio src=\"someaudio.wav\">\n\t您的浏览器不支持 audio 标签。\n\t</audio>\n*Internet Explorer 8 以及更早的版本不支持 &lt;audio> 标签,html 5新添*\n## 属性\n1. autoplay\n2. controls\n3. loop\n4. muted 规定音频输出应该被静音\n5. preload 如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用autoplay则忽略改属性。\n6. src \n\n# b标签\n加粗显示。\n\n根据 HTML5 规范，在没有其他合适标签更合适时，才应该把 &lt;b> 标签作为最后的选项。HTML5 规范声明：应该使用 &lt;h1> - &lt;h6> 来表示标题，使用 &lt;em> 标签来表示强调的文本，应该使用 &lt;strong> 标签来表示重要文本，应该使用 &lt;mark> 标签来表示标注的/突出显示的文本。\n\n# base标签\n## 必须属性\n   href\n## 可选属性\n  target\n\n# basefont\n规定页面上默认的字体和颜色。\n\n\t<basefont color=\"red\" size=\"5\" />\n*只有ie支持*。\n# bdi\nbdi 指的是 bidi 隔离。\n&lt;bdi> 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。\n在发布用户评论或其他您无法完全控制的内容时，该标签很有用。\n## 属性\ndir 取值：ltr,rtl,auto\n*目前只有 Firefox 和 Chrome 支持 &lt;bdi> 标签。html5新添*\n# bdo\nbdo 元素可覆盖默认的文本方向。\n## 可选属性\ndir 取值：ltr,rtl\n","source":"_posts/html标签.md","raw":"---\ntitle: html标签学习\ndate: 2016-05-06 10:36:02\ntags: html标签\ncategories:\n  - 学习笔记\n  - 前端学习\n---\n# a标签\n## 属性\n1. href\n2. target \n规定在何处打开新链接。\n3. media\n 属性规定目标URL是为什么媒介/设备优化的。可接受多个值。且只能在href属性存在时使用。\n   *html5 中的新属性*\n   <!--more-->\n4. download\n 规定被下载的超链接目标。只有firefox和Chrome支持。\n *html5新属性*。\n\t\t<a download=\"filename\"> \nfilename 为下载之后文件的名字。没有指定filename时只下载不重命名。\n5. type\n 规定被链接文档的MIMI类型。\n*html5新属性*\n6. hreflang\n 规定被链接文档的语言。仅在使用href属性时才使用。和 lang 属性不同的是，hreflang 属性不会指定标签中的内容所使用的语言，而是指定被 href 属性调用的文档所使用的语言。\n\\* 主流的浏览器几乎都不支持 hreflang 属性。\n7. rel\n 指定当前文档与被链接文档之间的关系。所有浏览器都支持。尽管浏览器不会以任何方式使用该属性，不过搜索引擎可以利用该属性获得更多有关链接的信息。\n8. rev\n 指定当前文档与被链接文档之间的关系。rel是指定从源文档到目标文档之间的关系，rev指定从目标文档到源文档之间的关系。\n*几乎没有浏览器支持，html 5废除*\n9. charset\n 规定被链接文档的字符集\n*主流的浏览器几乎都不支持 charset 属性。html 5废除*\n10. shape\n 规定链接的形状。只有 Firefox 和 Opera 支持 shape 属性。\n*html 5废除*\n11. coords\n coords 属性与 shape 属性配合，可以规定 object 或 img 元素中链接的尺寸、形状和位置。\n*只有 Firefox 和 Opera 支持 coords 属性。html 5废除*\n12. name\n 描述锚的名称。主流浏览器都支持。id出现之前用的name，后id出现为了保证兼容性而保留。\n*html 5废除*\n\n## 总结\n共12个属性，html 5新添属性有download，media，type三个。html 5 废除属性有charset,coords,name,rev,shape五个，剩下 href,target,rel,hreflang四个。其中hreflang主流浏览器都不支持。\n# abbr标签\n缩写，所有浏览器都支持。\n\n\t\tThe <abbr title=\"People's Republic of China\">PRC</abbr> was founded in 1949.\n# acronym标签\n首字母缩写。所有浏览器支持。html 5 废除，使用abbr代替。\n# address标签\n&lt;address>标签定义文档或文章的作者/拥有者的联系信息。\n如果 &lt;address> 元素位于 &lt;body> 元素内，则它表示文档联系信息。\n如果 &lt;address> 元素位于 &lt;article> 元素内，则它表示文章的联系信息。\n&lt;address> 元素中的文本通常呈现为斜体。大多数浏览器会在 address 元素前后添加折行。\n*所有主流浏览器支持，html 5新添*\n# applet标签\n定义嵌入的java applet。\n*html 5废除，使用object代替。html 4.01中也不赞成使用*\n# area标签\n定义图像映射中的区域。area元素总是嵌套在map标签中。所有主流浏览器都支持。\n&lt;img> 标签中的 usemap 属性与 map 元素 name 属性相关联，创建图像与映射之间的联系。\n&lt;img> 中的 usemap 属性可引用 &lt;map> 中的 id 或 name 属性（由浏览器决定），所以我们需要同时向 &lt;map> 添加 id 和 name 两个属性。\n## 必需属性 \nalt，定义此区域的替换文本。\n## 可选属性\n 1. shape\n定义区域的形状。可选值：圆形（circ 或 circle）、多边形（poly 或 polygon）、矩形（rect 或 rectangle）和default。未规定shape时会假定使用default。意味着该区域会覆盖整个图像。可以识别 shape 属性的 default 值的浏览器，可以提供一个包括全部热点的区域，以用于在超过其他热点定义的范围之外单击的情况。由于区域在 <map> 标签中是采用“先来先得”的顺序，所有必须将默认区域放置在后面。否则，默认区域会覆盖其他的图像映射中出现的所有区域。\n所有浏览器都支持。\n 2. coords\n坐标值，定义可点击区域的坐标。与shape属性配合使用。\n圆形：shape=\"circle\"，coords=\"x,y,z\"\n这里的 x 和 y 定义了圆心的位置（\"0,0\" 是图像左上角的坐标），r 是以像素为单位的圆形半径。\n多边形：shape=\"polygon\"，coords=\"x1,y1,x2,y2,x3,y3,...\"\n每一对 \"x,y\" 坐标都定义了多边形的一个顶点（\"0,0\" 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。\n多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。\n矩形：shape=\"rectangle\"，coords=\"x1,y1,x2,y2\"\n第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，\"0,0\" 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。\n 3. href\nhref 属性规定区域中连接的目标。\n 4. nohref\nnohref 属性规定该区域没有相关的链接。\n 5. target\n\n# article标签\n规定独立的自包含内容。\n一篇文章应该具有其自身的意义。应该有可能独立于站点的其他部分对齐进行分发。\n&lt;article> 元素的潜在来源：\n 论坛帖子\n 报纸文章\n 博客条目\n 用户评论\n*html 5新添*\n# aside标签\n定义其所处内容之外的内容，应该与附近的内容相关。&lt;aside> 的内容可用作文章的侧栏。\n*html 5新添*\n# audio标签\n\t<audio src=\"someaudio.wav\">\n\t您的浏览器不支持 audio 标签。\n\t</audio>\n*Internet Explorer 8 以及更早的版本不支持 &lt;audio> 标签,html 5新添*\n## 属性\n1. autoplay\n2. controls\n3. loop\n4. muted 规定音频输出应该被静音\n5. preload 如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用autoplay则忽略改属性。\n6. src \n\n# b标签\n加粗显示。\n\n根据 HTML5 规范，在没有其他合适标签更合适时，才应该把 &lt;b> 标签作为最后的选项。HTML5 规范声明：应该使用 &lt;h1> - &lt;h6> 来表示标题，使用 &lt;em> 标签来表示强调的文本，应该使用 &lt;strong> 标签来表示重要文本，应该使用 &lt;mark> 标签来表示标注的/突出显示的文本。\n\n# base标签\n## 必须属性\n   href\n## 可选属性\n  target\n\n# basefont\n规定页面上默认的字体和颜色。\n\n\t<basefont color=\"red\" size=\"5\" />\n*只有ie支持*。\n# bdi\nbdi 指的是 bidi 隔离。\n&lt;bdi> 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。\n在发布用户评论或其他您无法完全控制的内容时，该标签很有用。\n## 属性\ndir 取值：ltr,rtl,auto\n*目前只有 Firefox 和 Chrome 支持 &lt;bdi> 标签。html5新添*\n# bdo\nbdo 元素可覆盖默认的文本方向。\n## 可选属性\ndir 取值：ltr,rtl\n","slug":"html标签","published":1,"updated":"2016-06-14T02:46:19.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx0r000mogsa53wbk2nd","content":"<h1 id=\"a标签\"><a href=\"#a标签\" class=\"headerlink\" title=\"a标签\"></a>a标签</h1><h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ol>\n<li>href</li>\n<li>target<br>规定在何处打开新链接。</li>\n<li>media<br>属性规定目标URL是为什么媒介/设备优化的。可接受多个值。且只能在href属性存在时使用。<br><em>html5 中的新属性</em><a id=\"more\"></a></li>\n<li>download<br>规定被下载的超链接目标。只有firefox和Chrome支持。<br><em>html5新属性</em>。<pre><code>&lt;a download=&quot;filename&quot;&gt; \n</code></pre>filename 为下载之后文件的名字。没有指定filename时只下载不重命名。</li>\n<li>type<br>规定被链接文档的MIMI类型。<br><em>html5新属性</em></li>\n<li>hreflang<br>规定被链接文档的语言。仅在使用href属性时才使用。和 lang 属性不同的是，hreflang 属性不会指定标签中的内容所使用的语言，而是指定被 href 属性调用的文档所使用的语言。<br>* 主流的浏览器几乎都不支持 hreflang 属性。</li>\n<li>rel<br>指定当前文档与被链接文档之间的关系。所有浏览器都支持。尽管浏览器不会以任何方式使用该属性，不过搜索引擎可以利用该属性获得更多有关链接的信息。</li>\n<li>rev<br>指定当前文档与被链接文档之间的关系。rel是指定从源文档到目标文档之间的关系，rev指定从目标文档到源文档之间的关系。<br><em>几乎没有浏览器支持，html 5废除</em></li>\n<li>charset<br>规定被链接文档的字符集<br><em>主流的浏览器几乎都不支持 charset 属性。html 5废除</em></li>\n<li>shape<br>规定链接的形状。只有 Firefox 和 Opera 支持 shape 属性。<br><em>html 5废除</em></li>\n<li>coords<br>coords 属性与 shape 属性配合，可以规定 object 或 img 元素中链接的尺寸、形状和位置。<br><em>只有 Firefox 和 Opera 支持 coords 属性。html 5废除</em></li>\n<li>name<br>描述锚的名称。主流浏览器都支持。id出现之前用的name，后id出现为了保证兼容性而保留。<br><em>html 5废除</em></li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>共12个属性，html 5新添属性有download，media，type三个。html 5 废除属性有charset,coords,name,rev,shape五个，剩下 href,target,rel,hreflang四个。其中hreflang主流浏览器都不支持。</p>\n<h1 id=\"abbr标签\"><a href=\"#abbr标签\" class=\"headerlink\" title=\"abbr标签\"></a>abbr标签</h1><p>缩写，所有浏览器都支持。</p>\n<pre><code>The &lt;abbr title=&quot;People&apos;s Republic of China&quot;&gt;PRC&lt;/abbr&gt; was founded in 1949.\n</code></pre><h1 id=\"acronym标签\"><a href=\"#acronym标签\" class=\"headerlink\" title=\"acronym标签\"></a>acronym标签</h1><p>首字母缩写。所有浏览器支持。html 5 废除，使用abbr代替。</p>\n<h1 id=\"address标签\"><a href=\"#address标签\" class=\"headerlink\" title=\"address标签\"></a>address标签</h1><p>&lt;address&gt;标签定义文档或文章的作者/拥有者的联系信息。<br>如果 &lt;address&gt; 元素位于 &lt;body&gt; 元素内，则它表示文档联系信息。<br>如果 &lt;address&gt; 元素位于 &lt;article&gt; 元素内，则它表示文章的联系信息。<br>&lt;address&gt; 元素中的文本通常呈现为斜体。大多数浏览器会在 address 元素前后添加折行。<br><em>所有主流浏览器支持，html 5新添</em></p>\n<h1 id=\"applet标签\"><a href=\"#applet标签\" class=\"headerlink\" title=\"applet标签\"></a>applet标签</h1><p>定义嵌入的java applet。<br><em>html 5废除，使用object代替。html 4.01中也不赞成使用</em></p>\n<h1 id=\"area标签\"><a href=\"#area标签\" class=\"headerlink\" title=\"area标签\"></a>area标签</h1><p>定义图像映射中的区域。area元素总是嵌套在map标签中。所有主流浏览器都支持。<br>&lt;img&gt; 标签中的 usemap 属性与 map 元素 name 属性相关联，创建图像与映射之间的联系。<br>&lt;img&gt; 中的 usemap 属性可引用 &lt;map&gt; 中的 id 或 name 属性（由浏览器决定），所以我们需要同时向 &lt;map&gt; 添加 id 和 name 两个属性。</p>\n<h2 id=\"必需属性\"><a href=\"#必需属性\" class=\"headerlink\" title=\"必需属性\"></a>必需属性</h2><p>alt，定义此区域的替换文本。</p>\n<h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><ol>\n<li>shape<br>定义区域的形状。可选值：圆形（circ 或 circle）、多边形（poly 或 polygon）、矩形（rect 或 rectangle）和default。未规定shape时会假定使用default。意味着该区域会覆盖整个图像。可以识别 shape 属性的 default 值的浏览器，可以提供一个包括全部热点的区域，以用于在超过其他热点定义的范围之外单击的情况。由于区域在 <map> 标签中是采用“先来先得”的顺序，所有必须将默认区域放置在后面。否则，默认区域会覆盖其他的图像映射中出现的所有区域。<br>所有浏览器都支持。</map></li>\n<li>coords<br>坐标值，定义可点击区域的坐标。与shape属性配合使用。<br>圆形：shape=”circle”，coords=”x,y,z”<br>这里的 x 和 y 定义了圆心的位置（”0,0” 是图像左上角的坐标），r 是以像素为单位的圆形半径。<br>多边形：shape=”polygon”，coords=”x1,y1,x2,y2,x3,y3,…”<br>每一对 “x,y” 坐标都定义了多边形的一个顶点（”0,0” 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。<br>多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。<br>矩形：shape=”rectangle”，coords=”x1,y1,x2,y2”<br>第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，”0,0” 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。</li>\n<li>href<br>href 属性规定区域中连接的目标。</li>\n<li>nohref<br>nohref 属性规定该区域没有相关的链接。</li>\n<li>target</li>\n</ol>\n<h1 id=\"article标签\"><a href=\"#article标签\" class=\"headerlink\" title=\"article标签\"></a>article标签</h1><p>规定独立的自包含内容。<br>一篇文章应该具有其自身的意义。应该有可能独立于站点的其他部分对齐进行分发。<br>&lt;article&gt; 元素的潜在来源：<br> 论坛帖子<br> 报纸文章<br> 博客条目<br> 用户评论<br><em>html 5新添</em></p>\n<h1 id=\"aside标签\"><a href=\"#aside标签\" class=\"headerlink\" title=\"aside标签\"></a>aside标签</h1><p>定义其所处内容之外的内容，应该与附近的内容相关。&lt;aside&gt; 的内容可用作文章的侧栏。<br><em>html 5新添</em></p>\n<h1 id=\"audio标签\"><a href=\"#audio标签\" class=\"headerlink\" title=\"audio标签\"></a>audio标签</h1><pre><code>&lt;audio src=&quot;someaudio.wav&quot;&gt;\n您的浏览器不支持 audio 标签。\n&lt;/audio&gt;\n</code></pre><p><em>Internet Explorer 8 以及更早的版本不支持 &lt;audio&gt; 标签,html 5新添</em></p>\n<h2 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ol>\n<li>autoplay</li>\n<li>controls</li>\n<li>loop</li>\n<li>muted 规定音频输出应该被静音</li>\n<li>preload 如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用autoplay则忽略改属性。</li>\n<li>src </li>\n</ol>\n<h1 id=\"b标签\"><a href=\"#b标签\" class=\"headerlink\" title=\"b标签\"></a>b标签</h1><p>加粗显示。</p>\n<p>根据 HTML5 规范，在没有其他合适标签更合适时，才应该把 &lt;b&gt; 标签作为最后的选项。HTML5 规范声明：应该使用 &lt;h1&gt; - &lt;h6&gt; 来表示标题，使用 &lt;em&gt; 标签来表示强调的文本，应该使用 &lt;strong&gt; 标签来表示重要文本，应该使用 &lt;mark&gt; 标签来表示标注的/突出显示的文本。</p>\n<h1 id=\"base标签\"><a href=\"#base标签\" class=\"headerlink\" title=\"base标签\"></a>base标签</h1><h2 id=\"必须属性\"><a href=\"#必须属性\" class=\"headerlink\" title=\"必须属性\"></a>必须属性</h2><p>   href</p>\n<h2 id=\"可选属性-1\"><a href=\"#可选属性-1\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><p>  target</p>\n<h1 id=\"basefont\"><a href=\"#basefont\" class=\"headerlink\" title=\"basefont\"></a>basefont</h1><p>规定页面上默认的字体和颜色。</p>\n<pre><code>&lt;basefont color=&quot;red&quot; size=&quot;5&quot; /&gt;\n</code></pre><p><em>只有ie支持</em>。</p>\n<h1 id=\"bdi\"><a href=\"#bdi\" class=\"headerlink\" title=\"bdi\"></a>bdi</h1><p>bdi 指的是 bidi 隔离。<br>&lt;bdi&gt; 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。<br>在发布用户评论或其他您无法完全控制的内容时，该标签很有用。</p>\n<h2 id=\"属性-2\"><a href=\"#属性-2\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>dir 取值：ltr,rtl,auto<br><em>目前只有 Firefox 和 Chrome 支持 &lt;bdi&gt; 标签。html5新添</em></p>\n<h1 id=\"bdo\"><a href=\"#bdo\" class=\"headerlink\" title=\"bdo\"></a>bdo</h1><p>bdo 元素可覆盖默认的文本方向。</p>\n<h2 id=\"可选属性-2\"><a href=\"#可选属性-2\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><p>dir 取值：ltr,rtl</p>\n","excerpt":"<h1 id=\"a标签\"><a href=\"#a标签\" class=\"headerlink\" title=\"a标签\"></a>a标签</h1><h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ol>\n<li>href</li>\n<li>target<br>规定在何处打开新链接。</li>\n<li>media<br>属性规定目标URL是为什么媒介/设备优化的。可接受多个值。且只能在href属性存在时使用。<br><em>html5 中的新属性</em>","more":"</li>\n<li>download<br>规定被下载的超链接目标。只有firefox和Chrome支持。<br><em>html5新属性</em>。<pre><code>&lt;a download=&quot;filename&quot;&gt; \n</code></pre>filename 为下载之后文件的名字。没有指定filename时只下载不重命名。</li>\n<li>type<br>规定被链接文档的MIMI类型。<br><em>html5新属性</em></li>\n<li>hreflang<br>规定被链接文档的语言。仅在使用href属性时才使用。和 lang 属性不同的是，hreflang 属性不会指定标签中的内容所使用的语言，而是指定被 href 属性调用的文档所使用的语言。<br>* 主流的浏览器几乎都不支持 hreflang 属性。</li>\n<li>rel<br>指定当前文档与被链接文档之间的关系。所有浏览器都支持。尽管浏览器不会以任何方式使用该属性，不过搜索引擎可以利用该属性获得更多有关链接的信息。</li>\n<li>rev<br>指定当前文档与被链接文档之间的关系。rel是指定从源文档到目标文档之间的关系，rev指定从目标文档到源文档之间的关系。<br><em>几乎没有浏览器支持，html 5废除</em></li>\n<li>charset<br>规定被链接文档的字符集<br><em>主流的浏览器几乎都不支持 charset 属性。html 5废除</em></li>\n<li>shape<br>规定链接的形状。只有 Firefox 和 Opera 支持 shape 属性。<br><em>html 5废除</em></li>\n<li>coords<br>coords 属性与 shape 属性配合，可以规定 object 或 img 元素中链接的尺寸、形状和位置。<br><em>只有 Firefox 和 Opera 支持 coords 属性。html 5废除</em></li>\n<li>name<br>描述锚的名称。主流浏览器都支持。id出现之前用的name，后id出现为了保证兼容性而保留。<br><em>html 5废除</em></li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>共12个属性，html 5新添属性有download，media，type三个。html 5 废除属性有charset,coords,name,rev,shape五个，剩下 href,target,rel,hreflang四个。其中hreflang主流浏览器都不支持。</p>\n<h1 id=\"abbr标签\"><a href=\"#abbr标签\" class=\"headerlink\" title=\"abbr标签\"></a>abbr标签</h1><p>缩写，所有浏览器都支持。</p>\n<pre><code>The &lt;abbr title=&quot;People&apos;s Republic of China&quot;&gt;PRC&lt;/abbr&gt; was founded in 1949.\n</code></pre><h1 id=\"acronym标签\"><a href=\"#acronym标签\" class=\"headerlink\" title=\"acronym标签\"></a>acronym标签</h1><p>首字母缩写。所有浏览器支持。html 5 废除，使用abbr代替。</p>\n<h1 id=\"address标签\"><a href=\"#address标签\" class=\"headerlink\" title=\"address标签\"></a>address标签</h1><p>&lt;address&gt;标签定义文档或文章的作者/拥有者的联系信息。<br>如果 &lt;address&gt; 元素位于 &lt;body&gt; 元素内，则它表示文档联系信息。<br>如果 &lt;address&gt; 元素位于 &lt;article&gt; 元素内，则它表示文章的联系信息。<br>&lt;address&gt; 元素中的文本通常呈现为斜体。大多数浏览器会在 address 元素前后添加折行。<br><em>所有主流浏览器支持，html 5新添</em></p>\n<h1 id=\"applet标签\"><a href=\"#applet标签\" class=\"headerlink\" title=\"applet标签\"></a>applet标签</h1><p>定义嵌入的java applet。<br><em>html 5废除，使用object代替。html 4.01中也不赞成使用</em></p>\n<h1 id=\"area标签\"><a href=\"#area标签\" class=\"headerlink\" title=\"area标签\"></a>area标签</h1><p>定义图像映射中的区域。area元素总是嵌套在map标签中。所有主流浏览器都支持。<br>&lt;img&gt; 标签中的 usemap 属性与 map 元素 name 属性相关联，创建图像与映射之间的联系。<br>&lt;img&gt; 中的 usemap 属性可引用 &lt;map&gt; 中的 id 或 name 属性（由浏览器决定），所以我们需要同时向 &lt;map&gt; 添加 id 和 name 两个属性。</p>\n<h2 id=\"必需属性\"><a href=\"#必需属性\" class=\"headerlink\" title=\"必需属性\"></a>必需属性</h2><p>alt，定义此区域的替换文本。</p>\n<h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><ol>\n<li>shape<br>定义区域的形状。可选值：圆形（circ 或 circle）、多边形（poly 或 polygon）、矩形（rect 或 rectangle）和default。未规定shape时会假定使用default。意味着该区域会覆盖整个图像。可以识别 shape 属性的 default 值的浏览器，可以提供一个包括全部热点的区域，以用于在超过其他热点定义的范围之外单击的情况。由于区域在 <map> 标签中是采用“先来先得”的顺序，所有必须将默认区域放置在后面。否则，默认区域会覆盖其他的图像映射中出现的所有区域。<br>所有浏览器都支持。</li>\n<li>coords<br>坐标值，定义可点击区域的坐标。与shape属性配合使用。<br>圆形：shape=”circle”，coords=”x,y,z”<br>这里的 x 和 y 定义了圆心的位置（”0,0” 是图像左上角的坐标），r 是以像素为单位的圆形半径。<br>多边形：shape=”polygon”，coords=”x1,y1,x2,y2,x3,y3,…”<br>每一对 “x,y” 坐标都定义了多边形的一个顶点（”0,0” 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。<br>多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。<br>矩形：shape=”rectangle”，coords=”x1,y1,x2,y2”<br>第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，”0,0” 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。</li>\n<li>href<br>href 属性规定区域中连接的目标。</li>\n<li>nohref<br>nohref 属性规定该区域没有相关的链接。</li>\n<li>target</li>\n</ol>\n<h1 id=\"article标签\"><a href=\"#article标签\" class=\"headerlink\" title=\"article标签\"></a>article标签</h1><p>规定独立的自包含内容。<br>一篇文章应该具有其自身的意义。应该有可能独立于站点的其他部分对齐进行分发。<br>&lt;article&gt; 元素的潜在来源：<br> 论坛帖子<br> 报纸文章<br> 博客条目<br> 用户评论<br><em>html 5新添</em></p>\n<h1 id=\"aside标签\"><a href=\"#aside标签\" class=\"headerlink\" title=\"aside标签\"></a>aside标签</h1><p>定义其所处内容之外的内容，应该与附近的内容相关。&lt;aside&gt; 的内容可用作文章的侧栏。<br><em>html 5新添</em></p>\n<h1 id=\"audio标签\"><a href=\"#audio标签\" class=\"headerlink\" title=\"audio标签\"></a>audio标签</h1><pre><code>&lt;audio src=&quot;someaudio.wav&quot;&gt;\n您的浏览器不支持 audio 标签。\n&lt;/audio&gt;\n</code></pre><p><em>Internet Explorer 8 以及更早的版本不支持 &lt;audio&gt; 标签,html 5新添</em></p>\n<h2 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ol>\n<li>autoplay</li>\n<li>controls</li>\n<li>loop</li>\n<li>muted 规定音频输出应该被静音</li>\n<li>preload 如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用autoplay则忽略改属性。</li>\n<li>src </li>\n</ol>\n<h1 id=\"b标签\"><a href=\"#b标签\" class=\"headerlink\" title=\"b标签\"></a>b标签</h1><p>加粗显示。</p>\n<p>根据 HTML5 规范，在没有其他合适标签更合适时，才应该把 &lt;b&gt; 标签作为最后的选项。HTML5 规范声明：应该使用 &lt;h1&gt; - &lt;h6&gt; 来表示标题，使用 &lt;em&gt; 标签来表示强调的文本，应该使用 &lt;strong&gt; 标签来表示重要文本，应该使用 &lt;mark&gt; 标签来表示标注的/突出显示的文本。</p>\n<h1 id=\"base标签\"><a href=\"#base标签\" class=\"headerlink\" title=\"base标签\"></a>base标签</h1><h2 id=\"必须属性\"><a href=\"#必须属性\" class=\"headerlink\" title=\"必须属性\"></a>必须属性</h2><p>   href</p>\n<h2 id=\"可选属性-1\"><a href=\"#可选属性-1\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><p>  target</p>\n<h1 id=\"basefont\"><a href=\"#basefont\" class=\"headerlink\" title=\"basefont\"></a>basefont</h1><p>规定页面上默认的字体和颜色。</p>\n<pre><code>&lt;basefont color=&quot;red&quot; size=&quot;5&quot; /&gt;\n</code></pre><p><em>只有ie支持</em>。</p>\n<h1 id=\"bdi\"><a href=\"#bdi\" class=\"headerlink\" title=\"bdi\"></a>bdi</h1><p>bdi 指的是 bidi 隔离。<br>&lt;bdi&gt; 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。<br>在发布用户评论或其他您无法完全控制的内容时，该标签很有用。</p>\n<h2 id=\"属性-2\"><a href=\"#属性-2\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>dir 取值：ltr,rtl,auto<br><em>目前只有 Firefox 和 Chrome 支持 &lt;bdi&gt; 标签。html5新添</em></p>\n<h1 id=\"bdo\"><a href=\"#bdo\" class=\"headerlink\" title=\"bdo\"></a>bdo</h1><p>bdo 元素可覆盖默认的文本方向。</p>\n<h2 id=\"可选属性-2\"><a href=\"#可选属性-2\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><p>dir 取值：ltr,rtl</p>"},{"title":"mergeSort","date":"2016-05-27T06:11:55.000Z","_content":"归并排序算法总结（稳定，时间复杂度n*logn）\n\n\tpublic void mergeSort(int[] arr, int left, int right) {\n\t\t\tif(left<right){\n\t\t\t\tint center = (right+left)/2;\n\t\t\t\tmergeSort(arr,left,center);\n\t\t\t\tmergeSort(arr,center+1,right);\n\t\t\t\tmerge(arr,left,right,center);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t/**\n\t\t * 将两个数组进行排序，排序前两个数组有序，排序后依然有序\n\t\t * @param arr 要排序的数组\n\t\t * @param left 左数组第一个元素的索引\n\t\t * @param right 右数组最后一个元素的索引\n\t\t * @param center 左数组最后一个元素的索引，center+1是右数组第一个元素的索引\n\t\t */\n\t\tpublic void merge(int[] arr,int left,int right,int center){\n\t//\t\t与待排序数组等长的临时数组\n\t\t\tint[] temp = new int[arr.length];\n\t//\t\t右侧数组的索引\n\t\t\tint mid = center+1;\n\t//\t\tthird 中间数组的索引\n\t\t\tint third = left;\n\t//\t\t记录左侧数组的第一个元素的索引，用于将临时数组的元素复制到原数组时\n\t\t\tint tmp = left;\n\t\t\twhile(left <= center && mid <= right){\n\t//\t\t\t从两个数组中取出小的放入中间数组\n\t\t\t\tif(arr[left]<=arr[mid]){\n\t\t\t\t\ttemp[third++]=arr[left++];\n\t\t\t\t}else{\n\t\t\t\t\ttemp[third++]=arr[mid++];\n\t\t\t\t}\n\t\t\t}\n\t//\t\t剩余部分依次加入到中间数组\n\t\t\twhile(mid<=right){\n\t\t\t\ttemp[third++]= arr[mid++];\n\t\t\t}\n\t\t\twhile(left<=center){\n\t\t\t\ttemp[third++]= arr[left++];\n\t\t\t}\n\t//\t\t将中间数组的内容复制回原数组\n\t\t\twhile(tmp<=right){\n\t\t\t\tarr[tmp] = temp[tmp++];\n\t\t\t}\n\t\t}","source":"_posts/mergeSort.md","raw":"---\ntitle: mergeSort\ndate: 2016-05-27 14:11:55\ntags: \n  - 排序算法\ncategories:\n  - 学习笔记\n  - 数据结构\n---\n归并排序算法总结（稳定，时间复杂度n*logn）\n\n\tpublic void mergeSort(int[] arr, int left, int right) {\n\t\t\tif(left<right){\n\t\t\t\tint center = (right+left)/2;\n\t\t\t\tmergeSort(arr,left,center);\n\t\t\t\tmergeSort(arr,center+1,right);\n\t\t\t\tmerge(arr,left,right,center);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t/**\n\t\t * 将两个数组进行排序，排序前两个数组有序，排序后依然有序\n\t\t * @param arr 要排序的数组\n\t\t * @param left 左数组第一个元素的索引\n\t\t * @param right 右数组最后一个元素的索引\n\t\t * @param center 左数组最后一个元素的索引，center+1是右数组第一个元素的索引\n\t\t */\n\t\tpublic void merge(int[] arr,int left,int right,int center){\n\t//\t\t与待排序数组等长的临时数组\n\t\t\tint[] temp = new int[arr.length];\n\t//\t\t右侧数组的索引\n\t\t\tint mid = center+1;\n\t//\t\tthird 中间数组的索引\n\t\t\tint third = left;\n\t//\t\t记录左侧数组的第一个元素的索引，用于将临时数组的元素复制到原数组时\n\t\t\tint tmp = left;\n\t\t\twhile(left <= center && mid <= right){\n\t//\t\t\t从两个数组中取出小的放入中间数组\n\t\t\t\tif(arr[left]<=arr[mid]){\n\t\t\t\t\ttemp[third++]=arr[left++];\n\t\t\t\t}else{\n\t\t\t\t\ttemp[third++]=arr[mid++];\n\t\t\t\t}\n\t\t\t}\n\t//\t\t剩余部分依次加入到中间数组\n\t\t\twhile(mid<=right){\n\t\t\t\ttemp[third++]= arr[mid++];\n\t\t\t}\n\t\t\twhile(left<=center){\n\t\t\t\ttemp[third++]= arr[left++];\n\t\t\t}\n\t//\t\t将中间数组的内容复制回原数组\n\t\t\twhile(tmp<=right){\n\t\t\t\tarr[tmp] = temp[tmp++];\n\t\t\t}\n\t\t}","slug":"mergeSort","published":1,"updated":"2016-06-14T02:46:19.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx0v000oogsa3m1u9ogf","content":"<p>归并排序算法总结（稳定，时间复杂度n*logn）</p>\n<pre><code>public void mergeSort(int[] arr, int left, int right) {\n        if(left&lt;right){\n            int center = (right+left)/2;\n            mergeSort(arr,left,center);\n            mergeSort(arr,center+1,right);\n            merge(arr,left,right,center);\n        }\n\n    }\n    /**\n     * 将两个数组进行排序，排序前两个数组有序，排序后依然有序\n     * @param arr 要排序的数组\n     * @param left 左数组第一个元素的索引\n     * @param right 右数组最后一个元素的索引\n     * @param center 左数组最后一个元素的索引，center+1是右数组第一个元素的索引\n     */\n    public void merge(int[] arr,int left,int right,int center){\n//        与待排序数组等长的临时数组\n        int[] temp = new int[arr.length];\n//        右侧数组的索引\n        int mid = center+1;\n//        third 中间数组的索引\n        int third = left;\n//        记录左侧数组的第一个元素的索引，用于将临时数组的元素复制到原数组时\n        int tmp = left;\n        while(left &lt;= center &amp;&amp; mid &lt;= right){\n//            从两个数组中取出小的放入中间数组\n            if(arr[left]&lt;=arr[mid]){\n                temp[third++]=arr[left++];\n            }else{\n                temp[third++]=arr[mid++];\n            }\n        }\n//        剩余部分依次加入到中间数组\n        while(mid&lt;=right){\n            temp[third++]= arr[mid++];\n        }\n        while(left&lt;=center){\n            temp[third++]= arr[left++];\n        }\n//        将中间数组的内容复制回原数组\n        while(tmp&lt;=right){\n            arr[tmp] = temp[tmp++];\n        }\n    }\n</code></pre>","excerpt":"","more":"<p>归并排序算法总结（稳定，时间复杂度n*logn）</p>\n<pre><code>public void mergeSort(int[] arr, int left, int right) {\n        if(left&lt;right){\n            int center = (right+left)/2;\n            mergeSort(arr,left,center);\n            mergeSort(arr,center+1,right);\n            merge(arr,left,right,center);\n        }\n\n    }\n    /**\n     * 将两个数组进行排序，排序前两个数组有序，排序后依然有序\n     * @param arr 要排序的数组\n     * @param left 左数组第一个元素的索引\n     * @param right 右数组最后一个元素的索引\n     * @param center 左数组最后一个元素的索引，center+1是右数组第一个元素的索引\n     */\n    public void merge(int[] arr,int left,int right,int center){\n//        与待排序数组等长的临时数组\n        int[] temp = new int[arr.length];\n//        右侧数组的索引\n        int mid = center+1;\n//        third 中间数组的索引\n        int third = left;\n//        记录左侧数组的第一个元素的索引，用于将临时数组的元素复制到原数组时\n        int tmp = left;\n        while(left &lt;= center &amp;&amp; mid &lt;= right){\n//            从两个数组中取出小的放入中间数组\n            if(arr[left]&lt;=arr[mid]){\n                temp[third++]=arr[left++];\n            }else{\n                temp[third++]=arr[mid++];\n            }\n        }\n//        剩余部分依次加入到中间数组\n        while(mid&lt;=right){\n            temp[third++]= arr[mid++];\n        }\n        while(left&lt;=center){\n            temp[third++]= arr[left++];\n        }\n//        将中间数组的内容复制回原数组\n        while(tmp&lt;=right){\n            arr[tmp] = temp[tmp++];\n        }\n    }\n</code></pre>"},{"title":"history pushState 实现浏览器前进与后退","date":"2016-03-29T08:24:21.000Z","_content":"今天做了个界面需要用到ajax进行页面跳转，当然使用ajax进行页面跳转有它的优点，比如降低服务器压力，缩短用户等待时间等，但是一个很明显的缺点就是浏览器的前进和后退按钮失效了，好在HTML5的history对象的出现比较好的解决了这个问题，所以去网上找一些pushState使用的文章，但是大多数都是只讲原理没有实现的实例，理解起来还是不太容易的。现在将我理解的一些内容说一下，不对的地方欢迎大家指出。\n<!-- more -->\n首先讲一下API：\n首先是方法有两个history.pushState()和history.replaceState()\n事件有一个window.onpopstate\npushState（）方法，接收三个参数\na state object, a title (which is currentlyignored), and (optionally) a URL\n\n其中，state对象保存的是被pushState页面的信息的一个拷贝，也就是说以后你要用到的信息，都可以放到这个对象中。\nurl是可选的，负责改变浏览器的地址栏中显示的url，如果没有指定url，你点击前进后退按钮页面还是会变化，只是浏览器的地址栏上显示的url会一直保持不变。\nreplaceState（）方法，与pushState方法相同，主要用于改变当前历史记录中记录的当前页面的state对象和url信息。\nonpopstate事件,每次点击浏览器的前进和后退按钮，就会触发window的Onpopstate事件。\n最后使用history.state获取当前所在页面的state对象，也就是在上面pushState中保存的。\n\n下面以一个例子具体说明。\n\n首先，我们一般做一个网站，刚进去的首页是没有pathname的，为了让浏览器能够后退到首页，我们对首页的url进行拦截，即改变首页的url。这里面history.replaceState只是改变网页的url地址，不会改变网页内容。这里面的state保存的是你要在将来获取到的任何信息。\n\n\tvar url = “blog/index.html”;\n\n\tvar state = {\n\t    url:url\n\n\t}\n\thistory.replaceState(state,””,\"blog/index.html\");\n\n接下来,当调用ajax使页面内容发送变化之后，我们将这个变化的页面状态保存起来，如\n\n\tvar url = “blog/index.html”;\n\n\tvar state = {\n\n\t      url:url\n\n\t}\n\n\twindow.history.pushState(state,\"\",url);\n\n最后，给window添加监听，当popstate被触发之后，我们通过history.state获取到达页面的信息，通过.操作符获取该页面的信息，如我这里保存了该页面的url，就通过history.state.url获取，然后通过这个url加载页面。\n\n\twindow.addEventListener(\"popstate\",function() {\n\tvar currentUrl = history.state.url;\n\t\t$(\".container\").load(currentUrl +\" #container\");\n\t});\n\n","source":"_posts/pushstate.md","raw":"---\ntitle: history pushState 实现浏览器前进与后退\ndate: 2016-03-29 16:24:21\ntags: \n  - html5\n  - pushState\ncategories:\n  - 学习笔记\n  - 前端学习\n---\n今天做了个界面需要用到ajax进行页面跳转，当然使用ajax进行页面跳转有它的优点，比如降低服务器压力，缩短用户等待时间等，但是一个很明显的缺点就是浏览器的前进和后退按钮失效了，好在HTML5的history对象的出现比较好的解决了这个问题，所以去网上找一些pushState使用的文章，但是大多数都是只讲原理没有实现的实例，理解起来还是不太容易的。现在将我理解的一些内容说一下，不对的地方欢迎大家指出。\n<!-- more -->\n首先讲一下API：\n首先是方法有两个history.pushState()和history.replaceState()\n事件有一个window.onpopstate\npushState（）方法，接收三个参数\na state object, a title (which is currentlyignored), and (optionally) a URL\n\n其中，state对象保存的是被pushState页面的信息的一个拷贝，也就是说以后你要用到的信息，都可以放到这个对象中。\nurl是可选的，负责改变浏览器的地址栏中显示的url，如果没有指定url，你点击前进后退按钮页面还是会变化，只是浏览器的地址栏上显示的url会一直保持不变。\nreplaceState（）方法，与pushState方法相同，主要用于改变当前历史记录中记录的当前页面的state对象和url信息。\nonpopstate事件,每次点击浏览器的前进和后退按钮，就会触发window的Onpopstate事件。\n最后使用history.state获取当前所在页面的state对象，也就是在上面pushState中保存的。\n\n下面以一个例子具体说明。\n\n首先，我们一般做一个网站，刚进去的首页是没有pathname的，为了让浏览器能够后退到首页，我们对首页的url进行拦截，即改变首页的url。这里面history.replaceState只是改变网页的url地址，不会改变网页内容。这里面的state保存的是你要在将来获取到的任何信息。\n\n\tvar url = “blog/index.html”;\n\n\tvar state = {\n\t    url:url\n\n\t}\n\thistory.replaceState(state,””,\"blog/index.html\");\n\n接下来,当调用ajax使页面内容发送变化之后，我们将这个变化的页面状态保存起来，如\n\n\tvar url = “blog/index.html”;\n\n\tvar state = {\n\n\t      url:url\n\n\t}\n\n\twindow.history.pushState(state,\"\",url);\n\n最后，给window添加监听，当popstate被触发之后，我们通过history.state获取到达页面的信息，通过.操作符获取该页面的信息，如我这里保存了该页面的url，就通过history.state.url获取，然后通过这个url加载页面。\n\n\twindow.addEventListener(\"popstate\",function() {\n\tvar currentUrl = history.state.url;\n\t\t$(\".container\").load(currentUrl +\" #container\");\n\t});\n\n","slug":"pushstate","published":1,"updated":"2016-06-14T02:46:19.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx0y000rogsamm3tytx1","content":"<p>今天做了个界面需要用到ajax进行页面跳转，当然使用ajax进行页面跳转有它的优点，比如降低服务器压力，缩短用户等待时间等，但是一个很明显的缺点就是浏览器的前进和后退按钮失效了，好在HTML5的history对象的出现比较好的解决了这个问题，所以去网上找一些pushState使用的文章，但是大多数都是只讲原理没有实现的实例，理解起来还是不太容易的。现在将我理解的一些内容说一下，不对的地方欢迎大家指出。<br><a id=\"more\"></a><br>首先讲一下API：<br>首先是方法有两个history.pushState()和history.replaceState()<br>事件有一个window.onpopstate<br>pushState（）方法，接收三个参数<br>a state object, a title (which is currentlyignored), and (optionally) a URL</p>\n<p>其中，state对象保存的是被pushState页面的信息的一个拷贝，也就是说以后你要用到的信息，都可以放到这个对象中。<br>url是可选的，负责改变浏览器的地址栏中显示的url，如果没有指定url，你点击前进后退按钮页面还是会变化，只是浏览器的地址栏上显示的url会一直保持不变。<br>replaceState（）方法，与pushState方法相同，主要用于改变当前历史记录中记录的当前页面的state对象和url信息。<br>onpopstate事件,每次点击浏览器的前进和后退按钮，就会触发window的Onpopstate事件。<br>最后使用history.state获取当前所在页面的state对象，也就是在上面pushState中保存的。</p>\n<p>下面以一个例子具体说明。</p>\n<p>首先，我们一般做一个网站，刚进去的首页是没有pathname的，为了让浏览器能够后退到首页，我们对首页的url进行拦截，即改变首页的url。这里面history.replaceState只是改变网页的url地址，不会改变网页内容。这里面的state保存的是你要在将来获取到的任何信息。</p>\n<pre><code>var url = “blog/index.html”;\n\nvar state = {\n    url:url\n\n}\nhistory.replaceState(state,””,&quot;blog/index.html&quot;);\n</code></pre><p>接下来,当调用ajax使页面内容发送变化之后，我们将这个变化的页面状态保存起来，如</p>\n<pre><code>var url = “blog/index.html”;\n\nvar state = {\n\n      url:url\n\n}\n\nwindow.history.pushState(state,&quot;&quot;,url);\n</code></pre><p>最后，给window添加监听，当popstate被触发之后，我们通过history.state获取到达页面的信息，通过.操作符获取该页面的信息，如我这里保存了该页面的url，就通过history.state.url获取，然后通过这个url加载页面。</p>\n<pre><code>window.addEventListener(&quot;popstate&quot;,function() {\nvar currentUrl = history.state.url;\n    $(&quot;.container&quot;).load(currentUrl +&quot; #container&quot;);\n});\n</code></pre>","excerpt":"<p>今天做了个界面需要用到ajax进行页面跳转，当然使用ajax进行页面跳转有它的优点，比如降低服务器压力，缩短用户等待时间等，但是一个很明显的缺点就是浏览器的前进和后退按钮失效了，好在HTML5的history对象的出现比较好的解决了这个问题，所以去网上找一些pushState使用的文章，但是大多数都是只讲原理没有实现的实例，理解起来还是不太容易的。现在将我理解的一些内容说一下，不对的地方欢迎大家指出。<br>","more":"<br>首先讲一下API：<br>首先是方法有两个history.pushState()和history.replaceState()<br>事件有一个window.onpopstate<br>pushState（）方法，接收三个参数<br>a state object, a title (which is currentlyignored), and (optionally) a URL</p>\n<p>其中，state对象保存的是被pushState页面的信息的一个拷贝，也就是说以后你要用到的信息，都可以放到这个对象中。<br>url是可选的，负责改变浏览器的地址栏中显示的url，如果没有指定url，你点击前进后退按钮页面还是会变化，只是浏览器的地址栏上显示的url会一直保持不变。<br>replaceState（）方法，与pushState方法相同，主要用于改变当前历史记录中记录的当前页面的state对象和url信息。<br>onpopstate事件,每次点击浏览器的前进和后退按钮，就会触发window的Onpopstate事件。<br>最后使用history.state获取当前所在页面的state对象，也就是在上面pushState中保存的。</p>\n<p>下面以一个例子具体说明。</p>\n<p>首先，我们一般做一个网站，刚进去的首页是没有pathname的，为了让浏览器能够后退到首页，我们对首页的url进行拦截，即改变首页的url。这里面history.replaceState只是改变网页的url地址，不会改变网页内容。这里面的state保存的是你要在将来获取到的任何信息。</p>\n<pre><code>var url = “blog/index.html”;\n\nvar state = {\n    url:url\n\n}\nhistory.replaceState(state,””,&quot;blog/index.html&quot;);\n</code></pre><p>接下来,当调用ajax使页面内容发送变化之后，我们将这个变化的页面状态保存起来，如</p>\n<pre><code>var url = “blog/index.html”;\n\nvar state = {\n\n      url:url\n\n}\n\nwindow.history.pushState(state,&quot;&quot;,url);\n</code></pre><p>最后，给window添加监听，当popstate被触发之后，我们通过history.state获取到达页面的信息，通过.操作符获取该页面的信息，如我这里保存了该页面的url，就通过history.state.url获取，然后通过这个url加载页面。</p>\n<pre><code>window.addEventListener(&quot;popstate&quot;,function() {\nvar currentUrl = history.state.url;\n    $(&quot;.container&quot;).load(currentUrl +&quot; #container&quot;);\n});\n</code></pre>"},{"title":"SVM学习笔记（一）","date":"2016-06-12T03:29:08.000Z","_content":"# 一些基本概念介绍\n1. 线性可分：可以用一条直线将正样本与负样本分隔\n2. 间隔最大化\n2.1 函数间隔：可以表示分类预测的正确性及确信度，\n2.2 几何间隔 \n3. 特征空间：\n4. 特征向量：\n5. 欧氏空间\n6. 希尔伯特空间\n7. 分离超平面：wx+b = 0\n8. 支持向量\n\n# SVM基本介绍\n1. SVM（支持向量机）是一种二类分类模型，基本模型是定义在特征空间上的间隔最大的线性分类器\n2. 包含由简至繁的模型：\n（1）线性可分支持向量机（又称硬间隔支持向量机）\n训练数据线性可分，通过硬间隔最大化学习的线性分类器\n（2）线性支持向量机（又称软间隔支持向量机）\n训练数据近似线性可分，通过软间隔最大化学习的线性分类器\n（3）非线性支持向量机\n训练数据线性不可分，通过使用核技巧和软间隔最大化学习的非线性支持向量机\n","source":"_posts/svm.md","raw":"---\ntitle: SVM学习笔记（一）\ndate: 2016-06-12 11:29:08\ntags:\n---\n# 一些基本概念介绍\n1. 线性可分：可以用一条直线将正样本与负样本分隔\n2. 间隔最大化\n2.1 函数间隔：可以表示分类预测的正确性及确信度，\n2.2 几何间隔 \n3. 特征空间：\n4. 特征向量：\n5. 欧氏空间\n6. 希尔伯特空间\n7. 分离超平面：wx+b = 0\n8. 支持向量\n\n# SVM基本介绍\n1. SVM（支持向量机）是一种二类分类模型，基本模型是定义在特征空间上的间隔最大的线性分类器\n2. 包含由简至繁的模型：\n（1）线性可分支持向量机（又称硬间隔支持向量机）\n训练数据线性可分，通过硬间隔最大化学习的线性分类器\n（2）线性支持向量机（又称软间隔支持向量机）\n训练数据近似线性可分，通过软间隔最大化学习的线性分类器\n（3）非线性支持向量机\n训练数据线性不可分，通过使用核技巧和软间隔最大化学习的非线性支持向量机\n","slug":"svm","published":1,"updated":"2016-06-14T02:46:19.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx12000togsamqocb6sp","content":"<h1 id=\"一些基本概念介绍\"><a href=\"#一些基本概念介绍\" class=\"headerlink\" title=\"一些基本概念介绍\"></a>一些基本概念介绍</h1><ol>\n<li>线性可分：可以用一条直线将正样本与负样本分隔</li>\n<li>间隔最大化<br>2.1 函数间隔：可以表示分类预测的正确性及确信度，<br>2.2 几何间隔 </li>\n<li>特征空间：</li>\n<li>特征向量：</li>\n<li>欧氏空间</li>\n<li>希尔伯特空间</li>\n<li>分离超平面：wx+b = 0</li>\n<li>支持向量</li>\n</ol>\n<h1 id=\"SVM基本介绍\"><a href=\"#SVM基本介绍\" class=\"headerlink\" title=\"SVM基本介绍\"></a>SVM基本介绍</h1><ol>\n<li>SVM（支持向量机）是一种二类分类模型，基本模型是定义在特征空间上的间隔最大的线性分类器</li>\n<li>包含由简至繁的模型：<br>（1）线性可分支持向量机（又称硬间隔支持向量机）<br>训练数据线性可分，通过硬间隔最大化学习的线性分类器<br>（2）线性支持向量机（又称软间隔支持向量机）<br>训练数据近似线性可分，通过软间隔最大化学习的线性分类器<br>（3）非线性支持向量机<br>训练数据线性不可分，通过使用核技巧和软间隔最大化学习的非线性支持向量机</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"一些基本概念介绍\"><a href=\"#一些基本概念介绍\" class=\"headerlink\" title=\"一些基本概念介绍\"></a>一些基本概念介绍</h1><ol>\n<li>线性可分：可以用一条直线将正样本与负样本分隔</li>\n<li>间隔最大化<br>2.1 函数间隔：可以表示分类预测的正确性及确信度，<br>2.2 几何间隔 </li>\n<li>特征空间：</li>\n<li>特征向量：</li>\n<li>欧氏空间</li>\n<li>希尔伯特空间</li>\n<li>分离超平面：wx+b = 0</li>\n<li>支持向量</li>\n</ol>\n<h1 id=\"SVM基本介绍\"><a href=\"#SVM基本介绍\" class=\"headerlink\" title=\"SVM基本介绍\"></a>SVM基本介绍</h1><ol>\n<li>SVM（支持向量机）是一种二类分类模型，基本模型是定义在特征空间上的间隔最大的线性分类器</li>\n<li>包含由简至繁的模型：<br>（1）线性可分支持向量机（又称硬间隔支持向量机）<br>训练数据线性可分，通过硬间隔最大化学习的线性分类器<br>（2）线性支持向量机（又称软间隔支持向量机）<br>训练数据近似线性可分，通过软间隔最大化学习的线性分类器<br>（3）非线性支持向量机<br>训练数据线性不可分，通过使用核技巧和软间隔最大化学习的非线性支持向量机</li>\n</ol>\n"},{"title":"css3中transition用法总结","date":"2016-05-05T05:33:54.000Z","_content":"\n以下内容主要出自《图解CSS3-大漠》\n\n### W3C标准中对transition的描述\nCSS3的transition允许css的属性值在一定的时间区间内平滑的过渡。这种效果可以在鼠标单击，获得焦点，被点击或者对元素的任何改变中触发，并平滑地以动画的效果改变css的属性值。\n<!-- more -->\n### css中创建简单过渡的步骤\n  （1）在默认样式中声明元素的初始状态样式\n  （2）声明过渡元素最终状态样式\n  （3）在默认样式中通过添加过渡函数，添加一些不同的样式。 \n### transition属性主要包含四个属性值\n  （1）transition-property：指定过渡或动态模拟的CSS属性\n  （2）transition-duration：指定完成过渡所需的时间\n  （3）transition-timing-function：指定过渡函数\n  （4）transition-delay:指定过渡开始出现的延迟时间\n### 简写形式\n      transition: <property> <duration> <animation type> <delay>\n### 可以使用过渡的属性\n  （1）颜色属性\n  （2）具有长度值，百分比的属性\n  （3）integer\n  （4）number真实的（浮点型）数值\n  （5）变形系列属性。如rotate(),rotate3d(),scale(),scale3d(),skew(),translate(),translate3d()等\n  （6）reactangle：通过x,y,width,height变形\n  （7）visibility：离散步骤，在0~1范围内\n  （8）阴影\n  （9）渐变\n  （10）paint server(SVG)：只支持下面的情况。从gradient到gradient，以及从color到color\n  （11）space-separated list of above：如果列表有相同的项目数值，则列表每一项按照上面的规则进行变化，否则无变化\n  （12）缩写属性\n### 浏览器兼容性\n  （1）IE 10+（PP3）（平台预览第三版），Firefox4.0~15.0，Chrome4.0~\t20.0，Safari3.1~6.0和Opera10.5~12.0，在使用时需要加上各浏览器的私有属性。\n  （2）IE10+，Firefox16.0+，chrome26.0+，Safari 7.0+，Opera 12.1+支持transition的标准语法。\n  （3）ios Safari 3.2~6.1、Android browser2.1+，Blackberry browser7.0+和chrome for Android 27.0需要添加浏览器前缀-webkit-,Opero mobile 10.0~12.0中需要添加浏览器前缀-o-。\n  （4）ios Safari 7.0+和Firefox for Android 22.0支持transition的标准语法。\n### 开关状态的不同过渡方式\n\t\tinput{\n\t\t\twidth: 200px;\n\t\t\theight: 20px;\n\t\t\tborder: 1px solid #CCC;\n\t\t\ttransition: width 1s;\n\t\t}\n\t\tinput:focus{\n\t\t\twidth: 300px;\n\t\t}\n这样当input获得焦点时和失去焦点时，input宽度的变化都是在1秒内完成的。\n但是如果像下面这样写\n\n\t\tinput{\n\t\t\twidth: 200px;\n\t\t\theight: 20px;\n\t\t\tborder: 1px solid #CCC;\n\t\t\ttransition: width .2s;\n\t\t}\n\t\tinput:focus{\n\t\t\twidth: 300px;\n\t\t\ttransition: width 1s;\n\t\t}\n那么当input获得焦点时，宽度从200px变化到300px是在1s内完成的，失去焦点时宽度从300px变回到200px时则是在0.2s内完成的。\n演示见 http://shly.github.io/shly/IFE/task_12/index.html\n### css过渡的触发\n（1）伪元素触发 :active :focus :checked\n（2）媒体查询触发\n（3）JavaScript触发，给元素添加新的类，向新的类添加过渡如\n\n\t\t.box{\n\t\t\twidth:100px;\n\t\t\theight:100px;\n\t\t\tborder:1px solid #000;\n\t\t\ttransition: width 2s;\n\t\t}\n\t\t.box .on{\n\t\t\twidth:200px;\n\t\t}\n### 启用硬件加速使过渡更流畅\n   以下内容引自：<http://www.cnblogs.com/rubylouvre/p/3471490.html>\n   CSS animations, transforms 以及 transitions不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。\n   现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。\n   例如：\n\n\t\t.cube {\n\t\t   -webkit-transform: translate3d(250px,250px,250px)\n\t\t   rotate3d(250px,250px,250px,-120deg)\n\t\t   scale3d(0.5, 0.5, 0.5);\n\t\t}\n可是在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速。\n虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。例如我们可以用transform: translateZ(0); 来开启硬件加速。\n\n\t\t.cube {\n\t\t   -webkit-transform: translateZ(0);\n\t\t   -moz-transform: translateZ(0);\n\t\t   -ms-transform: translateZ(0);\n\t\t   -o-transform: translateZ(0);\n\t\t   transform: translateZ(0);\n\t\t   /* Other transform properties here */\n\t\t}\n   在 Chrome and Safari中，当我们使用CSS transforms 或者 animations时可能会有页面闪烁的效果，下面的代码可以修复此情况：\n\n\t\t.cube {\n\t\t   -webkit-backface-visibility: hidden;\n\t\t   -moz-backface-visibility: hidden;\n\t\t   -ms-backface-visibility: hidden;\n\t\t   backface-visibility: hidden;\n\t\t \n\t\t   -webkit-perspective: 1000;\n\t\t   -moz-perspective: 1000;\n\t\t   -ms-perspective: 1000;\n\t\t   perspective: 1000;\n\t\t   /* Other transform properties here */\n\t\t}\n   在webkit内核的浏览器中，另一个行之有效的方法是\n\n\t\t.cube {\n\t\t   -webkit-transform: translate3d(0, 0, 0);\n\t\t   -moz-transform: translate3d(0, 0, 0);\n\t\t   -ms-transform: translate3d(0, 0, 0);\n\t\t   transform: translate3d(0, 0, 0);\n\t\t  /* Other transform properties here */\n\t\t}\n原生的移动端应用(Native mobile applications)总是可以很好的运用GPU，这是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用(麦时注：移动端本身资源有限)。\n\n只对我们需要实现动画效果的元素应用以上方法，如果仅仅为了开启硬件加速而随便乱用，那是不明智的。\n小心使用这些方法，如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。","source":"_posts/transition.md","raw":"---\ntitle: css3中transition用法总结\ndate: 2016-05-05 13:33:54\ntags: \n  - css3\n  - css3 transition\ncategories:\n  - 学习笔记\n  - 前端学习\n---\n\n以下内容主要出自《图解CSS3-大漠》\n\n### W3C标准中对transition的描述\nCSS3的transition允许css的属性值在一定的时间区间内平滑的过渡。这种效果可以在鼠标单击，获得焦点，被点击或者对元素的任何改变中触发，并平滑地以动画的效果改变css的属性值。\n<!-- more -->\n### css中创建简单过渡的步骤\n  （1）在默认样式中声明元素的初始状态样式\n  （2）声明过渡元素最终状态样式\n  （3）在默认样式中通过添加过渡函数，添加一些不同的样式。 \n### transition属性主要包含四个属性值\n  （1）transition-property：指定过渡或动态模拟的CSS属性\n  （2）transition-duration：指定完成过渡所需的时间\n  （3）transition-timing-function：指定过渡函数\n  （4）transition-delay:指定过渡开始出现的延迟时间\n### 简写形式\n      transition: <property> <duration> <animation type> <delay>\n### 可以使用过渡的属性\n  （1）颜色属性\n  （2）具有长度值，百分比的属性\n  （3）integer\n  （4）number真实的（浮点型）数值\n  （5）变形系列属性。如rotate(),rotate3d(),scale(),scale3d(),skew(),translate(),translate3d()等\n  （6）reactangle：通过x,y,width,height变形\n  （7）visibility：离散步骤，在0~1范围内\n  （8）阴影\n  （9）渐变\n  （10）paint server(SVG)：只支持下面的情况。从gradient到gradient，以及从color到color\n  （11）space-separated list of above：如果列表有相同的项目数值，则列表每一项按照上面的规则进行变化，否则无变化\n  （12）缩写属性\n### 浏览器兼容性\n  （1）IE 10+（PP3）（平台预览第三版），Firefox4.0~15.0，Chrome4.0~\t20.0，Safari3.1~6.0和Opera10.5~12.0，在使用时需要加上各浏览器的私有属性。\n  （2）IE10+，Firefox16.0+，chrome26.0+，Safari 7.0+，Opera 12.1+支持transition的标准语法。\n  （3）ios Safari 3.2~6.1、Android browser2.1+，Blackberry browser7.0+和chrome for Android 27.0需要添加浏览器前缀-webkit-,Opero mobile 10.0~12.0中需要添加浏览器前缀-o-。\n  （4）ios Safari 7.0+和Firefox for Android 22.0支持transition的标准语法。\n### 开关状态的不同过渡方式\n\t\tinput{\n\t\t\twidth: 200px;\n\t\t\theight: 20px;\n\t\t\tborder: 1px solid #CCC;\n\t\t\ttransition: width 1s;\n\t\t}\n\t\tinput:focus{\n\t\t\twidth: 300px;\n\t\t}\n这样当input获得焦点时和失去焦点时，input宽度的变化都是在1秒内完成的。\n但是如果像下面这样写\n\n\t\tinput{\n\t\t\twidth: 200px;\n\t\t\theight: 20px;\n\t\t\tborder: 1px solid #CCC;\n\t\t\ttransition: width .2s;\n\t\t}\n\t\tinput:focus{\n\t\t\twidth: 300px;\n\t\t\ttransition: width 1s;\n\t\t}\n那么当input获得焦点时，宽度从200px变化到300px是在1s内完成的，失去焦点时宽度从300px变回到200px时则是在0.2s内完成的。\n演示见 http://shly.github.io/shly/IFE/task_12/index.html\n### css过渡的触发\n（1）伪元素触发 :active :focus :checked\n（2）媒体查询触发\n（3）JavaScript触发，给元素添加新的类，向新的类添加过渡如\n\n\t\t.box{\n\t\t\twidth:100px;\n\t\t\theight:100px;\n\t\t\tborder:1px solid #000;\n\t\t\ttransition: width 2s;\n\t\t}\n\t\t.box .on{\n\t\t\twidth:200px;\n\t\t}\n### 启用硬件加速使过渡更流畅\n   以下内容引自：<http://www.cnblogs.com/rubylouvre/p/3471490.html>\n   CSS animations, transforms 以及 transitions不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。\n   现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。\n   例如：\n\n\t\t.cube {\n\t\t   -webkit-transform: translate3d(250px,250px,250px)\n\t\t   rotate3d(250px,250px,250px,-120deg)\n\t\t   scale3d(0.5, 0.5, 0.5);\n\t\t}\n可是在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速。\n虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。例如我们可以用transform: translateZ(0); 来开启硬件加速。\n\n\t\t.cube {\n\t\t   -webkit-transform: translateZ(0);\n\t\t   -moz-transform: translateZ(0);\n\t\t   -ms-transform: translateZ(0);\n\t\t   -o-transform: translateZ(0);\n\t\t   transform: translateZ(0);\n\t\t   /* Other transform properties here */\n\t\t}\n   在 Chrome and Safari中，当我们使用CSS transforms 或者 animations时可能会有页面闪烁的效果，下面的代码可以修复此情况：\n\n\t\t.cube {\n\t\t   -webkit-backface-visibility: hidden;\n\t\t   -moz-backface-visibility: hidden;\n\t\t   -ms-backface-visibility: hidden;\n\t\t   backface-visibility: hidden;\n\t\t \n\t\t   -webkit-perspective: 1000;\n\t\t   -moz-perspective: 1000;\n\t\t   -ms-perspective: 1000;\n\t\t   perspective: 1000;\n\t\t   /* Other transform properties here */\n\t\t}\n   在webkit内核的浏览器中，另一个行之有效的方法是\n\n\t\t.cube {\n\t\t   -webkit-transform: translate3d(0, 0, 0);\n\t\t   -moz-transform: translate3d(0, 0, 0);\n\t\t   -ms-transform: translate3d(0, 0, 0);\n\t\t   transform: translate3d(0, 0, 0);\n\t\t  /* Other transform properties here */\n\t\t}\n原生的移动端应用(Native mobile applications)总是可以很好的运用GPU，这是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用(麦时注：移动端本身资源有限)。\n\n只对我们需要实现动画效果的元素应用以上方法，如果仅仅为了开启硬件加速而随便乱用，那是不明智的。\n小心使用这些方法，如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。","slug":"transition","published":1,"updated":"2016-06-14T02:46:19.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx17000yogsaqf67rvri","content":"<p>以下内容主要出自《图解CSS3-大漠》</p>\n<h3 id=\"W3C标准中对transition的描述\"><a href=\"#W3C标准中对transition的描述\" class=\"headerlink\" title=\"W3C标准中对transition的描述\"></a>W3C标准中对transition的描述</h3><p>CSS3的transition允许css的属性值在一定的时间区间内平滑的过渡。这种效果可以在鼠标单击，获得焦点，被点击或者对元素的任何改变中触发，并平滑地以动画的效果改变css的属性值。<br><a id=\"more\"></a></p>\n<h3 id=\"css中创建简单过渡的步骤\"><a href=\"#css中创建简单过渡的步骤\" class=\"headerlink\" title=\"css中创建简单过渡的步骤\"></a>css中创建简单过渡的步骤</h3><p>  （1）在默认样式中声明元素的初始状态样式<br>  （2）声明过渡元素最终状态样式<br>  （3）在默认样式中通过添加过渡函数，添加一些不同的样式。 </p>\n<h3 id=\"transition属性主要包含四个属性值\"><a href=\"#transition属性主要包含四个属性值\" class=\"headerlink\" title=\"transition属性主要包含四个属性值\"></a>transition属性主要包含四个属性值</h3><p>  （1）transition-property：指定过渡或动态模拟的CSS属性<br>  （2）transition-duration：指定完成过渡所需的时间<br>  （3）transition-timing-function：指定过渡函数<br>  （4）transition-delay:指定过渡开始出现的延迟时间</p>\n<h3 id=\"简写形式\"><a href=\"#简写形式\" class=\"headerlink\" title=\"简写形式\"></a>简写形式</h3><pre><code>transition: &lt;property&gt; &lt;duration&gt; &lt;animation type&gt; &lt;delay&gt;\n</code></pre><h3 id=\"可以使用过渡的属性\"><a href=\"#可以使用过渡的属性\" class=\"headerlink\" title=\"可以使用过渡的属性\"></a>可以使用过渡的属性</h3><p>  （1）颜色属性<br>  （2）具有长度值，百分比的属性<br>  （3）integer<br>  （4）number真实的（浮点型）数值<br>  （5）变形系列属性。如rotate(),rotate3d(),scale(),scale3d(),skew(),translate(),translate3d()等<br>  （6）reactangle：通过x,y,width,height变形<br>  （7）visibility：离散步骤，在0~1范围内<br>  （8）阴影<br>  （9）渐变<br>  （10）paint server(SVG)：只支持下面的情况。从gradient到gradient，以及从color到color<br>  （11）space-separated list of above：如果列表有相同的项目数值，则列表每一项按照上面的规则进行变化，否则无变化<br>  （12）缩写属性</p>\n<h3 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h3><p>  （1）IE 10+（PP3）（平台预览第三版），Firefox4.0~15.0，Chrome4.0~    20.0，Safari3.1~6.0和Opera10.5~12.0，在使用时需要加上各浏览器的私有属性。<br>  （2）IE10+，Firefox16.0+，chrome26.0+，Safari 7.0+，Opera 12.1+支持transition的标准语法。<br>  （3）ios Safari 3.2~6.1、Android browser2.1+，Blackberry browser7.0+和chrome for Android 27.0需要添加浏览器前缀-webkit-,Opero mobile 10.0~12.0中需要添加浏览器前缀-o-。<br>  （4）ios Safari 7.0+和Firefox for Android 22.0支持transition的标准语法。</p>\n<h3 id=\"开关状态的不同过渡方式\"><a href=\"#开关状态的不同过渡方式\" class=\"headerlink\" title=\"开关状态的不同过渡方式\"></a>开关状态的不同过渡方式</h3><pre><code>input{\n    width: 200px;\n    height: 20px;\n    border: 1px solid #CCC;\n    transition: width 1s;\n}\ninput:focus{\n    width: 300px;\n}\n</code></pre><p>这样当input获得焦点时和失去焦点时，input宽度的变化都是在1秒内完成的。<br>但是如果像下面这样写</p>\n<pre><code>input{\n    width: 200px;\n    height: 20px;\n    border: 1px solid #CCC;\n    transition: width .2s;\n}\ninput:focus{\n    width: 300px;\n    transition: width 1s;\n}\n</code></pre><p>那么当input获得焦点时，宽度从200px变化到300px是在1s内完成的，失去焦点时宽度从300px变回到200px时则是在0.2s内完成的。<br>演示见 <a href=\"http://shly.github.io/shly/IFE/task_12/index.html\" target=\"_blank\" rel=\"external\">http://shly.github.io/shly/IFE/task_12/index.html</a></p>\n<h3 id=\"css过渡的触发\"><a href=\"#css过渡的触发\" class=\"headerlink\" title=\"css过渡的触发\"></a>css过渡的触发</h3><p>（1）伪元素触发 :active :focus :checked<br>（2）媒体查询触发<br>（3）JavaScript触发，给元素添加新的类，向新的类添加过渡如</p>\n<pre><code>.box{\n    width:100px;\n    height:100px;\n    border:1px solid #000;\n    transition: width 2s;\n}\n.box .on{\n    width:200px;\n}\n</code></pre><h3 id=\"启用硬件加速使过渡更流畅\"><a href=\"#启用硬件加速使过渡更流畅\" class=\"headerlink\" title=\"启用硬件加速使过渡更流畅\"></a>启用硬件加速使过渡更流畅</h3><p>   以下内容引自：<a href=\"http://www.cnblogs.com/rubylouvre/p/3471490.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/rubylouvre/p/3471490.html</a><br>   CSS animations, transforms 以及 transitions不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。<br>   现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。<br>   例如：</p>\n<pre><code>.cube {\n   -webkit-transform: translate3d(250px,250px,250px)\n   rotate3d(250px,250px,250px,-120deg)\n   scale3d(0.5, 0.5, 0.5);\n}\n</code></pre><p>可是在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速。<br>虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。例如我们可以用transform: translateZ(0); 来开启硬件加速。</p>\n<pre><code>.cube {\n   -webkit-transform: translateZ(0);\n   -moz-transform: translateZ(0);\n   -ms-transform: translateZ(0);\n   -o-transform: translateZ(0);\n   transform: translateZ(0);\n   /* Other transform properties here */\n}\n</code></pre><p>   在 Chrome and Safari中，当我们使用CSS transforms 或者 animations时可能会有页面闪烁的效果，下面的代码可以修复此情况：</p>\n<pre><code>.cube {\n   -webkit-backface-visibility: hidden;\n   -moz-backface-visibility: hidden;\n   -ms-backface-visibility: hidden;\n   backface-visibility: hidden;\n\n   -webkit-perspective: 1000;\n   -moz-perspective: 1000;\n   -ms-perspective: 1000;\n   perspective: 1000;\n   /* Other transform properties here */\n}\n</code></pre><p>   在webkit内核的浏览器中，另一个行之有效的方法是</p>\n<pre><code>.cube {\n   -webkit-transform: translate3d(0, 0, 0);\n   -moz-transform: translate3d(0, 0, 0);\n   -ms-transform: translate3d(0, 0, 0);\n   transform: translate3d(0, 0, 0);\n  /* Other transform properties here */\n}\n</code></pre><p>原生的移动端应用(Native mobile applications)总是可以很好的运用GPU，这是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用(麦时注：移动端本身资源有限)。</p>\n<p>只对我们需要实现动画效果的元素应用以上方法，如果仅仅为了开启硬件加速而随便乱用，那是不明智的。<br>小心使用这些方法，如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。</p>\n","excerpt":"<p>以下内容主要出自《图解CSS3-大漠》</p>\n<h3 id=\"W3C标准中对transition的描述\"><a href=\"#W3C标准中对transition的描述\" class=\"headerlink\" title=\"W3C标准中对transition的描述\"></a>W3C标准中对transition的描述</h3><p>CSS3的transition允许css的属性值在一定的时间区间内平滑的过渡。这种效果可以在鼠标单击，获得焦点，被点击或者对元素的任何改变中触发，并平滑地以动画的效果改变css的属性值。<br>","more":"</p>\n<h3 id=\"css中创建简单过渡的步骤\"><a href=\"#css中创建简单过渡的步骤\" class=\"headerlink\" title=\"css中创建简单过渡的步骤\"></a>css中创建简单过渡的步骤</h3><p>  （1）在默认样式中声明元素的初始状态样式<br>  （2）声明过渡元素最终状态样式<br>  （3）在默认样式中通过添加过渡函数，添加一些不同的样式。 </p>\n<h3 id=\"transition属性主要包含四个属性值\"><a href=\"#transition属性主要包含四个属性值\" class=\"headerlink\" title=\"transition属性主要包含四个属性值\"></a>transition属性主要包含四个属性值</h3><p>  （1）transition-property：指定过渡或动态模拟的CSS属性<br>  （2）transition-duration：指定完成过渡所需的时间<br>  （3）transition-timing-function：指定过渡函数<br>  （4）transition-delay:指定过渡开始出现的延迟时间</p>\n<h3 id=\"简写形式\"><a href=\"#简写形式\" class=\"headerlink\" title=\"简写形式\"></a>简写形式</h3><pre><code>transition: &lt;property&gt; &lt;duration&gt; &lt;animation type&gt; &lt;delay&gt;\n</code></pre><h3 id=\"可以使用过渡的属性\"><a href=\"#可以使用过渡的属性\" class=\"headerlink\" title=\"可以使用过渡的属性\"></a>可以使用过渡的属性</h3><p>  （1）颜色属性<br>  （2）具有长度值，百分比的属性<br>  （3）integer<br>  （4）number真实的（浮点型）数值<br>  （5）变形系列属性。如rotate(),rotate3d(),scale(),scale3d(),skew(),translate(),translate3d()等<br>  （6）reactangle：通过x,y,width,height变形<br>  （7）visibility：离散步骤，在0~1范围内<br>  （8）阴影<br>  （9）渐变<br>  （10）paint server(SVG)：只支持下面的情况。从gradient到gradient，以及从color到color<br>  （11）space-separated list of above：如果列表有相同的项目数值，则列表每一项按照上面的规则进行变化，否则无变化<br>  （12）缩写属性</p>\n<h3 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h3><p>  （1）IE 10+（PP3）（平台预览第三版），Firefox4.0~15.0，Chrome4.0~    20.0，Safari3.1~6.0和Opera10.5~12.0，在使用时需要加上各浏览器的私有属性。<br>  （2）IE10+，Firefox16.0+，chrome26.0+，Safari 7.0+，Opera 12.1+支持transition的标准语法。<br>  （3）ios Safari 3.2~6.1、Android browser2.1+，Blackberry browser7.0+和chrome for Android 27.0需要添加浏览器前缀-webkit-,Opero mobile 10.0~12.0中需要添加浏览器前缀-o-。<br>  （4）ios Safari 7.0+和Firefox for Android 22.0支持transition的标准语法。</p>\n<h3 id=\"开关状态的不同过渡方式\"><a href=\"#开关状态的不同过渡方式\" class=\"headerlink\" title=\"开关状态的不同过渡方式\"></a>开关状态的不同过渡方式</h3><pre><code>input{\n    width: 200px;\n    height: 20px;\n    border: 1px solid #CCC;\n    transition: width 1s;\n}\ninput:focus{\n    width: 300px;\n}\n</code></pre><p>这样当input获得焦点时和失去焦点时，input宽度的变化都是在1秒内完成的。<br>但是如果像下面这样写</p>\n<pre><code>input{\n    width: 200px;\n    height: 20px;\n    border: 1px solid #CCC;\n    transition: width .2s;\n}\ninput:focus{\n    width: 300px;\n    transition: width 1s;\n}\n</code></pre><p>那么当input获得焦点时，宽度从200px变化到300px是在1s内完成的，失去焦点时宽度从300px变回到200px时则是在0.2s内完成的。<br>演示见 <a href=\"http://shly.github.io/shly/IFE/task_12/index.html\">http://shly.github.io/shly/IFE/task_12/index.html</a></p>\n<h3 id=\"css过渡的触发\"><a href=\"#css过渡的触发\" class=\"headerlink\" title=\"css过渡的触发\"></a>css过渡的触发</h3><p>（1）伪元素触发 :active :focus :checked<br>（2）媒体查询触发<br>（3）JavaScript触发，给元素添加新的类，向新的类添加过渡如</p>\n<pre><code>.box{\n    width:100px;\n    height:100px;\n    border:1px solid #000;\n    transition: width 2s;\n}\n.box .on{\n    width:200px;\n}\n</code></pre><h3 id=\"启用硬件加速使过渡更流畅\"><a href=\"#启用硬件加速使过渡更流畅\" class=\"headerlink\" title=\"启用硬件加速使过渡更流畅\"></a>启用硬件加速使过渡更流畅</h3><p>   以下内容引自：<a href=\"http://www.cnblogs.com/rubylouvre/p/3471490.html\">http://www.cnblogs.com/rubylouvre/p/3471490.html</a><br>   CSS animations, transforms 以及 transitions不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。<br>   现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。<br>   例如：</p>\n<pre><code>.cube {\n   -webkit-transform: translate3d(250px,250px,250px)\n   rotate3d(250px,250px,250px,-120deg)\n   scale3d(0.5, 0.5, 0.5);\n}\n</code></pre><p>可是在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速。<br>虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。例如我们可以用transform: translateZ(0); 来开启硬件加速。</p>\n<pre><code>.cube {\n   -webkit-transform: translateZ(0);\n   -moz-transform: translateZ(0);\n   -ms-transform: translateZ(0);\n   -o-transform: translateZ(0);\n   transform: translateZ(0);\n   /* Other transform properties here */\n}\n</code></pre><p>   在 Chrome and Safari中，当我们使用CSS transforms 或者 animations时可能会有页面闪烁的效果，下面的代码可以修复此情况：</p>\n<pre><code>.cube {\n   -webkit-backface-visibility: hidden;\n   -moz-backface-visibility: hidden;\n   -ms-backface-visibility: hidden;\n   backface-visibility: hidden;\n\n   -webkit-perspective: 1000;\n   -moz-perspective: 1000;\n   -ms-perspective: 1000;\n   perspective: 1000;\n   /* Other transform properties here */\n}\n</code></pre><p>   在webkit内核的浏览器中，另一个行之有效的方法是</p>\n<pre><code>.cube {\n   -webkit-transform: translate3d(0, 0, 0);\n   -moz-transform: translate3d(0, 0, 0);\n   -ms-transform: translate3d(0, 0, 0);\n   transform: translate3d(0, 0, 0);\n  /* Other transform properties here */\n}\n</code></pre><p>原生的移动端应用(Native mobile applications)总是可以很好的运用GPU，这是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用(麦时注：移动端本身资源有限)。</p>\n<p>只对我们需要实现动画效果的元素应用以上方法，如果仅仅为了开启硬件加速而随便乱用，那是不明智的。<br>小心使用这些方法，如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。</p>"},{"title":"关门山","date":"2014-10-18T13:18:35.000Z","_content":"刚刚忽然发现这个网站里面都是学习的记录，好无聊呀，为了使网站内容更丰富些，在次添加几张14年去关门山旅游的照片，虽然去的时候枫叶都落没了，不过其他的景色还是蛮漂亮的，主要是玩的也很开心呀，哈哈哈~ 下面上图\n<!--more-->\n![照片一](/img/1.jpg)\n![照片二](/img/2.jpg)\n![照片三](/img/3.jpg)\n![照片四](/img/4.jpg)\n\n这次只是选了几张照片，只是为了点缀，等以后再出去玩的，在好好发些。","source":"_posts/关门山.md","raw":"---\ntitle: 关门山\ndate: 2014-10-18 21:18:35\ntags: \n  - 旅游日记\ncategories:\n  - 随手日记\n---\n刚刚忽然发现这个网站里面都是学习的记录，好无聊呀，为了使网站内容更丰富些，在次添加几张14年去关门山旅游的照片，虽然去的时候枫叶都落没了，不过其他的景色还是蛮漂亮的，主要是玩的也很开心呀，哈哈哈~ 下面上图\n<!--more-->\n![照片一](/img/1.jpg)\n![照片二](/img/2.jpg)\n![照片三](/img/3.jpg)\n![照片四](/img/4.jpg)\n\n这次只是选了几张照片，只是为了点缀，等以后再出去玩的，在好好发些。","slug":"关门山","published":1,"updated":"2016-06-14T02:46:19.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx1f0010ogsa2jqv9hvl","content":"<p>刚刚忽然发现这个网站里面都是学习的记录，好无聊呀，为了使网站内容更丰富些，在次添加几张14年去关门山旅游的照片，虽然去的时候枫叶都落没了，不过其他的景色还是蛮漂亮的，主要是玩的也很开心呀，哈哈哈~ 下面上图<br><a id=\"more\"></a><br><img src=\"/img/1.jpg\" alt=\"照片一\"><br><img src=\"/img/2.jpg\" alt=\"照片二\"><br><img src=\"/img/3.jpg\" alt=\"照片三\"><br><img src=\"/img/4.jpg\" alt=\"照片四\"></p>\n<p>这次只是选了几张照片，只是为了点缀，等以后再出去玩的，在好好发些。</p>\n","excerpt":"<p>刚刚忽然发现这个网站里面都是学习的记录，好无聊呀，为了使网站内容更丰富些，在次添加几张14年去关门山旅游的照片，虽然去的时候枫叶都落没了，不过其他的景色还是蛮漂亮的，主要是玩的也很开心呀，哈哈哈~ 下面上图<br>","more":"<br><img src=\"/img/1.jpg\" alt=\"照片一\"><br><img src=\"/img/2.jpg\" alt=\"照片二\"><br><img src=\"/img/3.jpg\" alt=\"照片三\"><br><img src=\"/img/4.jpg\" alt=\"照片四\"></p>\n<p>这次只是选了几张照片，只是为了点缀，等以后再出去玩的，在好好发些。</p>"},{"title":"思考","date":"2016-05-24T13:21:38.000Z","_content":"之前一直想同样环境下学习的两个人，为什么取得的成果会有很大的不同，得出的结论就是思考。也就是说，为什么同样的学习，有些人也看起来更努力一些，结果往往还不如那些看起来不努力的人？那除了智商的原因，还有什么其他的东西导致了人与人之间的不同？通过长时间的观察研究，我得出的结论是，同样的学习，有些人一边学习，一边思考一边总结，那他掌握东西就比那些不思考的人掌握的更多更深刻。俗话讲的失败乃成功之母，你失败了不去总结经验，下次还是失败。所以说人一定要不断学习不断思考总结。\n<!-- more -->\n那还有什么原因造成两个人进步的不同？答案是有的人站在了巨人的肩膀上。除了自己不断试错不断总结经验，我们还要学会从其他人的身上学习经验。有些人这点可能做得很好，但是我自己这点就很差，别人的教训我往往很难接受，经常是自己吃了亏，才明白别人当初说的没错。所谓站在巨人的肩膀上还有一个意思，要勇于向别人请教，也许有的时候你看了很久的书还没有思路的问题，别人一句话就会点醒你。当然，问别人的前提是你自己得做了足够的功课。\n我一直牢记要思考，所以最近发生件特别有趣的事情，我一直在心里想，我毕设到底做什么，这些数据能做什么，注意，是在想，可是我发现想的就是这两句话，可是大脑根本没转。我想了一下为什么会这样，很尴尬的发现不是它不爱转，是因为知识储备不够，脑袋根本转不起来。。。后来跑去看了一些论文，终于有了一些想法。于是明白了一句话，学而不思则罔，思而不学则殆。\n\n","source":"_posts/思考.md","raw":"---\ntitle: 思考\ndate: 2016-05-24 21:21:38\ntags:\n - 随笔\ncategories:\n - 随手日记\n---\n之前一直想同样环境下学习的两个人，为什么取得的成果会有很大的不同，得出的结论就是思考。也就是说，为什么同样的学习，有些人也看起来更努力一些，结果往往还不如那些看起来不努力的人？那除了智商的原因，还有什么其他的东西导致了人与人之间的不同？通过长时间的观察研究，我得出的结论是，同样的学习，有些人一边学习，一边思考一边总结，那他掌握东西就比那些不思考的人掌握的更多更深刻。俗话讲的失败乃成功之母，你失败了不去总结经验，下次还是失败。所以说人一定要不断学习不断思考总结。\n<!-- more -->\n那还有什么原因造成两个人进步的不同？答案是有的人站在了巨人的肩膀上。除了自己不断试错不断总结经验，我们还要学会从其他人的身上学习经验。有些人这点可能做得很好，但是我自己这点就很差，别人的教训我往往很难接受，经常是自己吃了亏，才明白别人当初说的没错。所谓站在巨人的肩膀上还有一个意思，要勇于向别人请教，也许有的时候你看了很久的书还没有思路的问题，别人一句话就会点醒你。当然，问别人的前提是你自己得做了足够的功课。\n我一直牢记要思考，所以最近发生件特别有趣的事情，我一直在心里想，我毕设到底做什么，这些数据能做什么，注意，是在想，可是我发现想的就是这两句话，可是大脑根本没转。我想了一下为什么会这样，很尴尬的发现不是它不爱转，是因为知识储备不够，脑袋根本转不起来。。。后来跑去看了一些论文，终于有了一些想法。于是明白了一句话，学而不思则罔，思而不学则殆。\n\n","slug":"思考","published":1,"updated":"2016-06-14T02:46:19.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx1l0014ogsag76sea2d","content":"<p>之前一直想同样环境下学习的两个人，为什么取得的成果会有很大的不同，得出的结论就是思考。也就是说，为什么同样的学习，有些人也看起来更努力一些，结果往往还不如那些看起来不努力的人？那除了智商的原因，还有什么其他的东西导致了人与人之间的不同？通过长时间的观察研究，我得出的结论是，同样的学习，有些人一边学习，一边思考一边总结，那他掌握东西就比那些不思考的人掌握的更多更深刻。俗话讲的失败乃成功之母，你失败了不去总结经验，下次还是失败。所以说人一定要不断学习不断思考总结。<br><a id=\"more\"></a><br>那还有什么原因造成两个人进步的不同？答案是有的人站在了巨人的肩膀上。除了自己不断试错不断总结经验，我们还要学会从其他人的身上学习经验。有些人这点可能做得很好，但是我自己这点就很差，别人的教训我往往很难接受，经常是自己吃了亏，才明白别人当初说的没错。所谓站在巨人的肩膀上还有一个意思，要勇于向别人请教，也许有的时候你看了很久的书还没有思路的问题，别人一句话就会点醒你。当然，问别人的前提是你自己得做了足够的功课。<br>我一直牢记要思考，所以最近发生件特别有趣的事情，我一直在心里想，我毕设到底做什么，这些数据能做什么，注意，是在想，可是我发现想的就是这两句话，可是大脑根本没转。我想了一下为什么会这样，很尴尬的发现不是它不爱转，是因为知识储备不够，脑袋根本转不起来。。。后来跑去看了一些论文，终于有了一些想法。于是明白了一句话，学而不思则罔，思而不学则殆。</p>\n","excerpt":"<p>之前一直想同样环境下学习的两个人，为什么取得的成果会有很大的不同，得出的结论就是思考。也就是说，为什么同样的学习，有些人也看起来更努力一些，结果往往还不如那些看起来不努力的人？那除了智商的原因，还有什么其他的东西导致了人与人之间的不同？通过长时间的观察研究，我得出的结论是，同样的学习，有些人一边学习，一边思考一边总结，那他掌握东西就比那些不思考的人掌握的更多更深刻。俗话讲的失败乃成功之母，你失败了不去总结经验，下次还是失败。所以说人一定要不断学习不断思考总结。<br>","more":"<br>那还有什么原因造成两个人进步的不同？答案是有的人站在了巨人的肩膀上。除了自己不断试错不断总结经验，我们还要学会从其他人的身上学习经验。有些人这点可能做得很好，但是我自己这点就很差，别人的教训我往往很难接受，经常是自己吃了亏，才明白别人当初说的没错。所谓站在巨人的肩膀上还有一个意思，要勇于向别人请教，也许有的时候你看了很久的书还没有思路的问题，别人一句话就会点醒你。当然，问别人的前提是你自己得做了足够的功课。<br>我一直牢记要思考，所以最近发生件特别有趣的事情，我一直在心里想，我毕设到底做什么，这些数据能做什么，注意，是在想，可是我发现想的就是这两句话，可是大脑根本没转。我想了一下为什么会这样，很尴尬的发现不是它不爱转，是因为知识储备不够，脑袋根本转不起来。。。后来跑去看了一些论文，终于有了一些想法。于是明白了一句话，学而不思则罔，思而不学则殆。</p>"},{"title":"数据库学习笔记（一）","date":"2016-05-24T02:02:24.000Z","_content":"# 基本概念\n1. 数据库管理系统和数据库\n   数据库管理系统（DBMS）是由一个互联相关的数据的集合和一组用以访问这些数据的程序组成。一个数据集合称作数据库。DBMS的主要目标是要提供一个可以方便、高效地存取数据库信息的环境。\n   <!-- more -->\n2. 数据视图\n   数据库系统是一些互相关联的数据以及一组使得用户可以访问和修改这些数据的程序的集合。数据库系统的一个主要目的是给用户提供一个数据的抽象视图，即系统隐藏关于数据存储和维护的某些细节。\n3. 数据抽象\n系统开发人员通过以下几个层次的抽象来对用户屏蔽复杂性：\n3.1 物理层：最低层次的抽象，描述数据实际上是怎么存储的。（数据是如何存储的，编译器为开发人员屏蔽了这一层的细节，就像java中对象是如何存储的一样）\n3.2 逻辑层：描述数据库中存储什么数据及这些数据间存在什么关系。（通过sql语言描述的，像java中类的定义）\n3.3 视图层：最高层次的抽象，只描述数据库的一部分，系统为同一数据库提供多个视图。（数据选择呈现）\n4. 实例和模式\n特定时刻存储在数据库中的信息的集合称作数据库的一个实例。而数据库的总体设计称作数据库模式。（对比java中的对象与类）\n数据库系统可以分为几种不同的模式，物理模式在物理层描述了数据库的设计，逻辑模式在逻辑层描述数据库的设计。数据库在视图层也可以分为几种模式，有时称为子模式，它描述了数据库的不同视图。\n5. 数据模型\n5.1 数据库结构的基础是数据模型。数据模型是一个描述数据、数据联系、数据语义以及一致性约束的概念的工具。数据模型提供了一种物理层、逻辑层以及视图层数据库的设计方式。\n5.2 数据模型可以被分为四类\n（1）关系模型（表的集合来表示数据与数据之间的关系）\n（2）实体连续模型\n（3）基于对象数据模型\n（4）半结构化数据模型\n\n# 数据库语言\n1. 数据库操纵语言（DML）\n1.1 过程化DML 要求用户指定需要什么数据以及如何获取这些数据\n1.2 声明式DML 只要求用户指定需要什么数据，不需要指定如何获取\n2. 数据库描述语言（DDL）\n数据库模式是通过一系列的定义来说明的，这些定义由一种称作数据定义语言（DDL）的特殊语言来表达。\n2.1 一致性约束\n\t2.1.1 域约束\n\t2.1.2 参照完整性\n\t2.1.3 断言。域约束和参照完整性约束是断言的特殊形式。\n\t2.1.4 授权\n2.2 数据字典\nDDL的输出放到数据字典中，数据字典包含了元数据，元数据是关于数据的数据。","source":"_posts/数据库.md","raw":"---\ntitle: 数据库学习笔记（一）\ndate: 2016-05-24 10:02:24\ntags: \n  - 数据库\ncategories:\n  - 学习笔记\n  - 数据库\n---\n# 基本概念\n1. 数据库管理系统和数据库\n   数据库管理系统（DBMS）是由一个互联相关的数据的集合和一组用以访问这些数据的程序组成。一个数据集合称作数据库。DBMS的主要目标是要提供一个可以方便、高效地存取数据库信息的环境。\n   <!-- more -->\n2. 数据视图\n   数据库系统是一些互相关联的数据以及一组使得用户可以访问和修改这些数据的程序的集合。数据库系统的一个主要目的是给用户提供一个数据的抽象视图，即系统隐藏关于数据存储和维护的某些细节。\n3. 数据抽象\n系统开发人员通过以下几个层次的抽象来对用户屏蔽复杂性：\n3.1 物理层：最低层次的抽象，描述数据实际上是怎么存储的。（数据是如何存储的，编译器为开发人员屏蔽了这一层的细节，就像java中对象是如何存储的一样）\n3.2 逻辑层：描述数据库中存储什么数据及这些数据间存在什么关系。（通过sql语言描述的，像java中类的定义）\n3.3 视图层：最高层次的抽象，只描述数据库的一部分，系统为同一数据库提供多个视图。（数据选择呈现）\n4. 实例和模式\n特定时刻存储在数据库中的信息的集合称作数据库的一个实例。而数据库的总体设计称作数据库模式。（对比java中的对象与类）\n数据库系统可以分为几种不同的模式，物理模式在物理层描述了数据库的设计，逻辑模式在逻辑层描述数据库的设计。数据库在视图层也可以分为几种模式，有时称为子模式，它描述了数据库的不同视图。\n5. 数据模型\n5.1 数据库结构的基础是数据模型。数据模型是一个描述数据、数据联系、数据语义以及一致性约束的概念的工具。数据模型提供了一种物理层、逻辑层以及视图层数据库的设计方式。\n5.2 数据模型可以被分为四类\n（1）关系模型（表的集合来表示数据与数据之间的关系）\n（2）实体连续模型\n（3）基于对象数据模型\n（4）半结构化数据模型\n\n# 数据库语言\n1. 数据库操纵语言（DML）\n1.1 过程化DML 要求用户指定需要什么数据以及如何获取这些数据\n1.2 声明式DML 只要求用户指定需要什么数据，不需要指定如何获取\n2. 数据库描述语言（DDL）\n数据库模式是通过一系列的定义来说明的，这些定义由一种称作数据定义语言（DDL）的特殊语言来表达。\n2.1 一致性约束\n\t2.1.1 域约束\n\t2.1.2 参照完整性\n\t2.1.3 断言。域约束和参照完整性约束是断言的特殊形式。\n\t2.1.4 授权\n2.2 数据字典\nDDL的输出放到数据字典中，数据字典包含了元数据，元数据是关于数据的数据。","slug":"数据库","published":1,"updated":"2016-06-14T02:46:19.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx1p0017ogsayheujox5","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ol>\n<li>数据库管理系统和数据库<br>数据库管理系统（DBMS）是由一个互联相关的数据的集合和一组用以访问这些数据的程序组成。一个数据集合称作数据库。DBMS的主要目标是要提供一个可以方便、高效地存取数据库信息的环境。<a id=\"more\"></a></li>\n<li>数据视图<br>数据库系统是一些互相关联的数据以及一组使得用户可以访问和修改这些数据的程序的集合。数据库系统的一个主要目的是给用户提供一个数据的抽象视图，即系统隐藏关于数据存储和维护的某些细节。</li>\n<li>数据抽象<br>系统开发人员通过以下几个层次的抽象来对用户屏蔽复杂性：<br>3.1 物理层：最低层次的抽象，描述数据实际上是怎么存储的。（数据是如何存储的，编译器为开发人员屏蔽了这一层的细节，就像java中对象是如何存储的一样）<br>3.2 逻辑层：描述数据库中存储什么数据及这些数据间存在什么关系。（通过sql语言描述的，像java中类的定义）<br>3.3 视图层：最高层次的抽象，只描述数据库的一部分，系统为同一数据库提供多个视图。（数据选择呈现）</li>\n<li>实例和模式<br>特定时刻存储在数据库中的信息的集合称作数据库的一个实例。而数据库的总体设计称作数据库模式。（对比java中的对象与类）<br>数据库系统可以分为几种不同的模式，物理模式在物理层描述了数据库的设计，逻辑模式在逻辑层描述数据库的设计。数据库在视图层也可以分为几种模式，有时称为子模式，它描述了数据库的不同视图。</li>\n<li>数据模型<br>5.1 数据库结构的基础是数据模型。数据模型是一个描述数据、数据联系、数据语义以及一致性约束的概念的工具。数据模型提供了一种物理层、逻辑层以及视图层数据库的设计方式。<br>5.2 数据模型可以被分为四类<br>（1）关系模型（表的集合来表示数据与数据之间的关系）<br>（2）实体连续模型<br>（3）基于对象数据模型<br>（4）半结构化数据模型</li>\n</ol>\n<h1 id=\"数据库语言\"><a href=\"#数据库语言\" class=\"headerlink\" title=\"数据库语言\"></a>数据库语言</h1><ol>\n<li>数据库操纵语言（DML）<br>1.1 过程化DML 要求用户指定需要什么数据以及如何获取这些数据<br>1.2 声明式DML 只要求用户指定需要什么数据，不需要指定如何获取</li>\n<li>数据库描述语言（DDL）<br>数据库模式是通过一系列的定义来说明的，这些定义由一种称作数据定义语言（DDL）的特殊语言来表达。<br>2.1 一致性约束<br> 2.1.1 域约束<br> 2.1.2 参照完整性<br> 2.1.3 断言。域约束和参照完整性约束是断言的特殊形式。<br> 2.1.4 授权<br>2.2 数据字典<br>DDL的输出放到数据字典中，数据字典包含了元数据，元数据是关于数据的数据。</li>\n</ol>\n","excerpt":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ol>\n<li>数据库管理系统和数据库<br>数据库管理系统（DBMS）是由一个互联相关的数据的集合和一组用以访问这些数据的程序组成。一个数据集合称作数据库。DBMS的主要目标是要提供一个可以方便、高效地存取数据库信息的环境。","more":"</li>\n<li>数据视图<br>数据库系统是一些互相关联的数据以及一组使得用户可以访问和修改这些数据的程序的集合。数据库系统的一个主要目的是给用户提供一个数据的抽象视图，即系统隐藏关于数据存储和维护的某些细节。</li>\n<li>数据抽象<br>系统开发人员通过以下几个层次的抽象来对用户屏蔽复杂性：<br>3.1 物理层：最低层次的抽象，描述数据实际上是怎么存储的。（数据是如何存储的，编译器为开发人员屏蔽了这一层的细节，就像java中对象是如何存储的一样）<br>3.2 逻辑层：描述数据库中存储什么数据及这些数据间存在什么关系。（通过sql语言描述的，像java中类的定义）<br>3.3 视图层：最高层次的抽象，只描述数据库的一部分，系统为同一数据库提供多个视图。（数据选择呈现）</li>\n<li>实例和模式<br>特定时刻存储在数据库中的信息的集合称作数据库的一个实例。而数据库的总体设计称作数据库模式。（对比java中的对象与类）<br>数据库系统可以分为几种不同的模式，物理模式在物理层描述了数据库的设计，逻辑模式在逻辑层描述数据库的设计。数据库在视图层也可以分为几种模式，有时称为子模式，它描述了数据库的不同视图。</li>\n<li>数据模型<br>5.1 数据库结构的基础是数据模型。数据模型是一个描述数据、数据联系、数据语义以及一致性约束的概念的工具。数据模型提供了一种物理层、逻辑层以及视图层数据库的设计方式。<br>5.2 数据模型可以被分为四类<br>（1）关系模型（表的集合来表示数据与数据之间的关系）<br>（2）实体连续模型<br>（3）基于对象数据模型<br>（4）半结构化数据模型</li>\n</ol>\n<h1 id=\"数据库语言\"><a href=\"#数据库语言\" class=\"headerlink\" title=\"数据库语言\"></a>数据库语言</h1><ol>\n<li>数据库操纵语言（DML）<br>1.1 过程化DML 要求用户指定需要什么数据以及如何获取这些数据<br>1.2 声明式DML 只要求用户指定需要什么数据，不需要指定如何获取</li>\n<li>数据库描述语言（DDL）<br>数据库模式是通过一系列的定义来说明的，这些定义由一种称作数据定义语言（DDL）的特殊语言来表达。<br>2.1 一致性约束<br> 2.1.1 域约束<br> 2.1.2 参照完整性<br> 2.1.3 断言。域约束和参照完整性约束是断言的特殊形式。<br> 2.1.4 授权<br>2.2 数据字典<br>DDL的输出放到数据字典中，数据字典包含了元数据，元数据是关于数据的数据。</li>\n</ol>"},{"title":"hexo生成的页面部署到git上面时报错 FATAL spawn git ENOENT","date":"2016-04-27T15:58:01.000Z","_content":"报错信息\n\t\tFATAL spawn git ENOENT\n\t\tError: spawn git ENOENT\n\t\t<!-- more -->\n\t\t    at notFoundError (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\hexo-depl\n\t\toyer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cross-spaw\n\t\tn-async\\lib\\enoent.js:8:11)\n\t\t    at verifyENOENT (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\hexo-deplo\n\t\tyer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cross-spawn\n\t\t-async\\lib\\enoent.js:43:16)\n\t\t    at ChildProcess.cp.emit (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\he\n\t\txo-deployer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cro\n\t\tss-spawn-async\\lib\\enoent.js:30:19)\n\t\t    at Process.ChildProcess._handle.onexit (child_process.js:1074:12)\n解决方案：\n\n之前使用cmd执行的hexo d ,改成使用git bash执行就成功了。","source":"_posts/部署到git上面时报错.md","raw":"---\ntitle: hexo生成的页面部署到git上面时报错 FATAL spawn git ENOENT\ndate: 2016-04-27 23:58:01\ntags: \n  - hexo部署\ncategories:\n  - 学习笔记\n  - hexo学习\n---\n报错信息\n\t\tFATAL spawn git ENOENT\n\t\tError: spawn git ENOENT\n\t\t<!-- more -->\n\t\t    at notFoundError (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\hexo-depl\n\t\toyer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cross-spaw\n\t\tn-async\\lib\\enoent.js:8:11)\n\t\t    at verifyENOENT (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\hexo-deplo\n\t\tyer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cross-spawn\n\t\t-async\\lib\\enoent.js:43:16)\n\t\t    at ChildProcess.cp.emit (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\he\n\t\txo-deployer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cro\n\t\tss-spawn-async\\lib\\enoent.js:30:19)\n\t\t    at Process.ChildProcess._handle.onexit (child_process.js:1074:12)\n解决方案：\n\n之前使用cmd执行的hexo d ,改成使用git bash执行就成功了。","slug":"部署到git上面时报错","published":1,"updated":"2016-06-14T02:46:19.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx1x001bogsafxha5y3y","content":"<p>报错信息<br>        FATAL spawn git ENOENT<br>        Error: spawn git ENOENT<br>        <a id=\"more\"></a><br>            at notFoundError (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\hexo-depl<br>        oyer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cross-spaw<br>        n-async\\lib\\enoent.js:8:11)<br>            at verifyENOENT (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\hexo-deplo<br>        yer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cross-spawn<br>        -async\\lib\\enoent.js:43:16)<br>            at ChildProcess.cp.emit (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\he<br>        xo-deployer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cro<br>        ss-spawn-async\\lib\\enoent.js:30:19)<br>            at Process.ChildProcess._handle.onexit (child_process.js:1074:12)<br>解决方案：</p>\n<p>之前使用cmd执行的hexo d ,改成使用git bash执行就成功了。</p>\n","excerpt":"<p>报错信息<br>        FATAL spawn git ENOENT<br>        Error: spawn git ENOENT<br>","more":"<br>            at notFoundError (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\hexo-depl<br>        oyer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cross-spaw<br>        n-async\\lib\\enoent.js:8:11)<br>            at verifyENOENT (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\hexo-deplo<br>        yer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cross-spawn<br>        -async\\lib\\enoent.js:43:16)<br>            at ChildProcess.cp.emit (C:\\Users\\Administrator\\Desktop\\Hexo\\node_modules\\he<br>        xo-deployer-git\\node_modules\\hexo-util\\node_modules\\cross-spawn\\node_modules\\cro<br>        ss-spawn-async\\lib\\enoent.js:30:19)<br>            at Process.ChildProcess._handle.onexit (child_process.js:1074:12)<br>解决方案：</p>\n<p>之前使用cmd执行的hexo d ,改成使用git bash执行就成功了。</p>"},{"title":"配置Hexo","date":"2016-04-26T15:39:40.000Z","_content":"\nhexo要在node环境下部署。\n主要命令：\n1. 装置hexo\n\t\t$ npm install -g hexo\n2. 部署hexo\n\t\t$ hexo init\n<!-- more -->\n3. 生成html页面\n\t\t$ hexo g\n4. 运行测试环境\n\t\t$ hexo s\n接下来就可以在浏览器中输入 localhost:4000 查看了\n6. 安装部署插件\n\t\t$ npm install hexo-deployer-git--save\n7. 配置_config.yml文件，在文件的最后一行加上\n\t\tdeploy:\n\t\t  type: git\n \t\t repo: https://github.com/XXX/XXX.github.io.git(你的git地址)\n \t\t branch: master\n\n8. 部署\n\t\t$ hexo d\n\n另外type的值也有可能为github。\n\n当然，在进行第五步部署到git上之前，必须得有一个git地址。\n\n以下是有关Hexo配置的两篇文章\n\nhttp://blog.csdn.net/poem_of_sunshine/article/details/29369785/\n\nhttp://www.jianshu.com/p/465830080ea9","source":"_posts/配置Hexo.md","raw":"---\ntitle: 配置Hexo\ndate: 2016-04-26 23:39:40\ntags: \n  - hexo\n  - hexo配置\ncategories:\n  - 学习笔记\n  - hexo学习\n---\n\nhexo要在node环境下部署。\n主要命令：\n1. 装置hexo\n\t\t$ npm install -g hexo\n2. 部署hexo\n\t\t$ hexo init\n<!-- more -->\n3. 生成html页面\n\t\t$ hexo g\n4. 运行测试环境\n\t\t$ hexo s\n接下来就可以在浏览器中输入 localhost:4000 查看了\n6. 安装部署插件\n\t\t$ npm install hexo-deployer-git--save\n7. 配置_config.yml文件，在文件的最后一行加上\n\t\tdeploy:\n\t\t  type: git\n \t\t repo: https://github.com/XXX/XXX.github.io.git(你的git地址)\n \t\t branch: master\n\n8. 部署\n\t\t$ hexo d\n\n另外type的值也有可能为github。\n\n当然，在进行第五步部署到git上之前，必须得有一个git地址。\n\n以下是有关Hexo配置的两篇文章\n\nhttp://blog.csdn.net/poem_of_sunshine/article/details/29369785/\n\nhttp://www.jianshu.com/p/465830080ea9","slug":"配置Hexo","published":1,"updated":"2016-06-14T02:46:19.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipevvx2c001eogsa4jt102wj","content":"<p>hexo要在node环境下部署。<br>主要命令：</p>\n<ol>\n<li>装置hexo<pre><code>$ npm install -g hexo\n</code></pre></li>\n<li>部署hexo<pre><code>$ hexo init\n</code></pre><a id=\"more\"></a></li>\n<li>生成html页面<pre><code>$ hexo g\n</code></pre></li>\n<li>运行测试环境<pre><code>$ hexo s\n</code></pre>接下来就可以在浏览器中输入 localhost:4000 查看了</li>\n<li>安装部署插件<pre><code>$ npm install hexo-deployer-git--save\n</code></pre></li>\n<li><p>配置_config.yml文件，在文件的最后一行加上</p>\n<pre><code>deploy:\n  type: git\n  repo: https://github.com/XXX/XXX.github.io.git(你的git地址)\n  branch: master\n</code></pre></li>\n<li><p>部署</p>\n<pre><code>$ hexo d\n</code></pre></li>\n</ol>\n<p>另外type的值也有可能为github。</p>\n<p>当然，在进行第五步部署到git上之前，必须得有一个git地址。</p>\n<p>以下是有关Hexo配置的两篇文章</p>\n<p><a href=\"http://blog.csdn.net/poem_of_sunshine/article/details/29369785/\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/poem_of_sunshine/article/details/29369785/</a></p>\n<p><a href=\"http://www.jianshu.com/p/465830080ea9\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/465830080ea9</a></p>\n","excerpt":"<p>hexo要在node环境下部署。<br>主要命令：</p>\n<ol>\n<li>装置hexo<pre><code>$ npm install -g hexo\n</code></pre></li>\n<li>部署hexo<pre><code>$ hexo init\n</code></pre>","more":"</li>\n<li>生成html页面<pre><code>$ hexo g\n</code></pre></li>\n<li>运行测试环境<pre><code>$ hexo s\n</code></pre>接下来就可以在浏览器中输入 localhost:4000 查看了</li>\n<li>安装部署插件<pre><code>$ npm install hexo-deployer-git--save\n</code></pre></li>\n<li><p>配置_config.yml文件，在文件的最后一行加上</p>\n<pre><code>deploy:\n  type: git\n  repo: https://github.com/XXX/XXX.github.io.git(你的git地址)\n  branch: master\n</code></pre></li>\n<li><p>部署</p>\n<pre><code>$ hexo d\n</code></pre></li>\n</ol>\n<p>另外type的值也有可能为github。</p>\n<p>当然，在进行第五步部署到git上之前，必须得有一个git地址。</p>\n<p>以下是有关Hexo配置的两篇文章</p>\n<p><a href=\"http://blog.csdn.net/poem_of_sunshine/article/details/29369785/\">http://blog.csdn.net/poem_of_sunshine/article/details/29369785/</a></p>\n<p><a href=\"http://www.jianshu.com/p/465830080ea9\">http://www.jianshu.com/p/465830080ea9</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cipevvwzf0007ogsa15s944n2","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx0u000nogsabrepdwkt"},{"post_id":"cipevvx0r000mogsa53wbk2nd","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx14000uogsaqhldgaho"},{"post_id":"cipevvx0r000mogsa53wbk2nd","category_id":"cipevvx0p000kogsa71mulab4","_id":"cipevvx1b000zogsajdge03vo"},{"post_id":"cipevvwzj0008ogsas3iaxrtk","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx1i0011ogsa82ph9zd1"},{"post_id":"cipevvwzj0008ogsas3iaxrtk","category_id":"cipevvx0p000kogsa71mulab4","_id":"cipevvx1n0015ogsarhbdc2xq"},{"post_id":"cipevvx0y000rogsamm3tytx1","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx1s0018ogsamcfjbfui"},{"post_id":"cipevvx0y000rogsamm3tytx1","category_id":"cipevvx0p000kogsa71mulab4","_id":"cipevvx20001cogsasvsjn5bc"},{"post_id":"cipevvwyw0002ogsagx8akv37","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx2e001fogsa79f1rb4d"},{"post_id":"cipevvwyw0002ogsagx8akv37","category_id":"cipevvx0x000pogsakjxu365v","_id":"cipevvx2i001hogsa83mn5wuj"},{"post_id":"cipevvx17000yogsaqf67rvri","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx2l001jogsaso2r1xo9"},{"post_id":"cipevvx17000yogsaqf67rvri","category_id":"cipevvx0p000kogsa71mulab4","_id":"cipevvx2m001logsam6lp0u0z"},{"post_id":"cipevvwzo000aogsa8plajw9x","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx2p001pogsanqabusmh"},{"post_id":"cipevvwzo000aogsa8plajw9x","category_id":"cipevvx15000wogsaq7i65d1s","_id":"cipevvx2q001qogsa6kfrisb4"},{"post_id":"cipevvx03000dogsad9ib6r6q","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx2s001togsa8antz5b1"},{"post_id":"cipevvx03000dogsad9ib6r6q","category_id":"cipevvx0p000kogsa71mulab4","_id":"cipevvx2t001vogsazajr4dhm"},{"post_id":"cipevvwz60004ogsaju63r406","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx2v001zogsasnt3j0px"},{"post_id":"cipevvwz60004ogsaju63r406","category_id":"cipevvx0p000kogsa71mulab4","_id":"cipevvx2x0020ogsau17gu33e"},{"post_id":"cipevvx09000eogsa7ac5gqju","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx2z0022ogsa400vxt3r"},{"post_id":"cipevvx09000eogsa7ac5gqju","category_id":"cipevvx2g001gogsa65663syo","_id":"cipevvx320025ogsaat97cm28"},{"post_id":"cipevvx0j000iogsanzgterx5","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx330028ogsakyf4gfv9"},{"post_id":"cipevvx0j000iogsanzgterx5","category_id":"cipevvx0p000kogsa71mulab4","_id":"cipevvx33002aogsae3atqs8j"},{"post_id":"cipevvx0m000jogsa93bttysd","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx35002cogsahtc07mw2"},{"post_id":"cipevvx0m000jogsa93bttysd","category_id":"cipevvx15000wogsaq7i65d1s","_id":"cipevvx36002eogsa5s79o05a"},{"post_id":"cipevvx0v000oogsa3m1u9ogf","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx37002hogsalxyn20u1"},{"post_id":"cipevvx0v000oogsa3m1u9ogf","category_id":"cipevvx15000wogsaq7i65d1s","_id":"cipevvx38002kogsavxv75mmd"},{"post_id":"cipevvx1f0010ogsa2jqv9hvl","category_id":"cipevvx2x0021ogsa20fxz9pd","_id":"cipevvx39002nogsa2qnfctaa"},{"post_id":"cipevvx1l0014ogsag76sea2d","category_id":"cipevvx2x0021ogsa20fxz9pd","_id":"cipevvx3b002pogsau7c88lxf"},{"post_id":"cipevvx1p0017ogsayheujox5","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx3d002rogsa6yir6ghx"},{"post_id":"cipevvx1p0017ogsayheujox5","category_id":"cipevvx34002bogsahjaiqca7","_id":"cipevvx3e002togsa15o0ggsz"},{"post_id":"cipevvx1x001bogsafxha5y3y","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx3f002vogsaznrnw0u0"},{"post_id":"cipevvx1x001bogsafxha5y3y","category_id":"cipevvx36002gogsazgy4ztru","_id":"cipevvx3g002wogsafl1xk5j7"},{"post_id":"cipevvx2c001eogsa4jt102wj","category_id":"cipevvwze0006ogsakalt94mz","_id":"cipevvx3h002yogsa0p0z7lsg"},{"post_id":"cipevvx2c001eogsa4jt102wj","category_id":"cipevvx36002gogsazgy4ztru","_id":"cipevvx3i002zogsazhpeatr2"}],"PostTag":[{"post_id":"cipevvwyw0002ogsagx8akv37","tag_id":"cipevvwza0005ogsa83mscbor","_id":"cipevvx02000cogsahbocv2uk"},{"post_id":"cipevvwz60004ogsaju63r406","tag_id":"cipevvwzn0009ogsamatv52q5","_id":"cipevvx0i000hogsakt872vjy"},{"post_id":"cipevvwzf0007ogsa15s944n2","tag_id":"cipevvx0f000gogsajd954rei","_id":"cipevvx11000sogsag8ed7uo8"},{"post_id":"cipevvwzf0007ogsa15s944n2","tag_id":"cipevvx0q000logsaspmjx9it","_id":"cipevvx15000vogsabedzbx1e"},{"post_id":"cipevvwzj0008ogsas3iaxrtk","tag_id":"cipevvx0q000logsaspmjx9it","_id":"cipevvx1o0016ogsau2rrilu6"},{"post_id":"cipevvwzj0008ogsas3iaxrtk","tag_id":"cipevvx16000xogsavrjfwacf","_id":"cipevvx1v0019ogsaqhpw3sa4"},{"post_id":"cipevvwzo000aogsa8plajw9x","tag_id":"cipevvx1k0013ogsa4jtgtoej","_id":"cipevvx2l001kogsagamb1z28"},{"post_id":"cipevvwzo000aogsa8plajw9x","tag_id":"cipevvx21001dogsa22b1scpr","_id":"cipevvx2n001nogsatavh8io5"},{"post_id":"cipevvx03000dogsad9ib6r6q","tag_id":"cipevvx0q000logsaspmjx9it","_id":"cipevvx2t001uogsat3jmpm7w"},{"post_id":"cipevvx03000dogsad9ib6r6q","tag_id":"cipevvx2o001oogsag3m0fswq","_id":"cipevvx2u001xogsafl0xvpiy"},{"post_id":"cipevvx09000eogsa7ac5gqju","tag_id":"cipevvx2s001sogsafxxemw9d","_id":"cipevvx310024ogsa90gmvrmx"},{"post_id":"cipevvx09000eogsa7ac5gqju","tag_id":"cipevvx2u001yogsawvg0a5s9","_id":"cipevvx320027ogsa53j17joh"},{"post_id":"cipevvx0j000iogsanzgterx5","tag_id":"cipevvx0q000logsaspmjx9it","_id":"cipevvx36002fogsa27z1r34q"},{"post_id":"cipevvx0j000iogsanzgterx5","tag_id":"cipevvx330029ogsa3t9mpef3","_id":"cipevvx37002iogsaf42h07pk"},{"post_id":"cipevvx0m000jogsa93bttysd","tag_id":"cipevvx35002dogsa8xikw6at","_id":"cipevvx38002logsa2ynnqrhn"},{"post_id":"cipevvx0r000mogsa53wbk2nd","tag_id":"cipevvx37002jogsa4vr8ygl1","_id":"cipevvx3d002qogsaujc91clc"},{"post_id":"cipevvx0v000oogsa3m1u9ogf","tag_id":"cipevvx35002dogsa8xikw6at","_id":"cipevvx3f002uogsavv1codps"},{"post_id":"cipevvx0y000rogsamm3tytx1","tag_id":"cipevvx3e002sogsabe6389la","_id":"cipevvx3i0031ogsae9mdes31"},{"post_id":"cipevvx0y000rogsamm3tytx1","tag_id":"cipevvx3g002xogsaknibosyt","_id":"cipevvx3j0032ogsadnhvkitr"},{"post_id":"cipevvx17000yogsaqf67rvri","tag_id":"cipevvx0q000logsaspmjx9it","_id":"cipevvx3j0034ogsaur1b46i4"},{"post_id":"cipevvx17000yogsaqf67rvri","tag_id":"cipevvx3i0030ogsa98owcwtb","_id":"cipevvx3k0035ogsav8av777e"},{"post_id":"cipevvx1f0010ogsa2jqv9hvl","tag_id":"cipevvx3j0033ogsafq5og9lp","_id":"cipevvx3k0037ogsamiy0p8uc"},{"post_id":"cipevvx1l0014ogsag76sea2d","tag_id":"cipevvx3k0036ogsa6lzw2q3j","_id":"cipevvx3l0039ogsacfitvhjf"},{"post_id":"cipevvx1p0017ogsayheujox5","tag_id":"cipevvx3l0038ogsay9gt01gb","_id":"cipevvx3m003bogsabfhknm8x"},{"post_id":"cipevvx1x001bogsafxha5y3y","tag_id":"cipevvx3m003aogsaqpwo5mnb","_id":"cipevvx3o003dogsa1f8xv2yn"},{"post_id":"cipevvx2c001eogsa4jt102wj","tag_id":"cipevvx3n003cogsap51z4ym3","_id":"cipevvx3q003fogsadz6a3wb6"},{"post_id":"cipevvx2c001eogsa4jt102wj","tag_id":"cipevvx3o003eogsawbbo7jd6","_id":"cipevvx3r003gogsa1yrqe7ka"}],"Tag":[{"name":"数据挖掘","_id":"cipevvwza0005ogsa83mscbor"},{"name":"BFC","_id":"cipevvwzn0009ogsamatv52q5"},{"name":"css3变形","_id":"cipevvx0f000gogsajd954rei"},{"name":"css3","_id":"cipevvx0q000logsaspmjx9it"},{"name":"css3多列布局","_id":"cipevvx16000xogsavrjfwacf"},{"name":"数据结构","_id":"cipevvx1k0013ogsa4jtgtoej"},{"name":"二叉树遍历","_id":"cipevvx21001dogsa22b1scpr"},{"name":"css3选择器","_id":"cipevvx2o001oogsag3m0fswq"},{"name":"git","_id":"cipevvx2s001sogsafxxemw9d"},{"name":"gitignore配置","_id":"cipevvx2u001yogsawvg0a5s9"},{"name":"FlexBox","_id":"cipevvx330029ogsa3t9mpef3"},{"name":"排序算法","_id":"cipevvx35002dogsa8xikw6at"},{"name":"html标签","_id":"cipevvx37002jogsa4vr8ygl1"},{"name":"html5","_id":"cipevvx3e002sogsabe6389la"},{"name":"pushState","_id":"cipevvx3g002xogsaknibosyt"},{"name":"css3 transition","_id":"cipevvx3i0030ogsa98owcwtb"},{"name":"旅游日记","_id":"cipevvx3j0033ogsafq5og9lp"},{"name":"随笔","_id":"cipevvx3k0036ogsa6lzw2q3j"},{"name":"数据库","_id":"cipevvx3l0038ogsay9gt01gb"},{"name":"hexo部署","_id":"cipevvx3m003aogsaqpwo5mnb"},{"name":"hexo","_id":"cipevvx3n003cogsap51z4ym3"},{"name":"hexo配置","_id":"cipevvx3o003eogsawbbo7jd6"}]}}